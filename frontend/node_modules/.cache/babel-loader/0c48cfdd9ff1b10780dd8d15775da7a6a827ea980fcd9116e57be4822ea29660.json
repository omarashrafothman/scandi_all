{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from \"rehackt\";\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\nimport { parser } from \"../parser/index.js\";\nimport { Mutation } from \"../components/index.js\";\nimport { defaultMapPropsToOptions, getDisplayName, calculateVariablesFromProps, GraphQLBase } from \"./hoc-utils.js\";\n/**\n * @deprecated\n * Official support for React Apollo higher order components ended in March 2020.\n * This library is still included in the `@apollo/client` package, but it no longer receives feature updates or bug fixes.\n */\nexport function withMutation(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  var operation = parser(document);\n  // extract options\n  var _a = operationOptions.options,\n    options = _a === void 0 ? defaultMapPropsToOptions : _a,\n    _b = operationOptions.alias,\n    alias = _b === void 0 ? \"Apollo\" : _b;\n  var mapPropsToOptions = options;\n  if (typeof mapPropsToOptions !== \"function\") mapPropsToOptions = function () {\n    return options;\n  };\n  return function (WrappedComponent) {\n    var graphQLDisplayName = \"\".concat(alias, \"(\").concat(getDisplayName(WrappedComponent), \")\");\n    var GraphQL = /** @class */function (_super) {\n      __extends(GraphQL, _super);\n      function GraphQL() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n      GraphQL.prototype.render = function () {\n        var props = this.props;\n        var opts = mapPropsToOptions(props);\n        if (operationOptions.withRef) {\n          this.withRef = true;\n          props = Object.assign({}, props, {\n            ref: this.setWrappedInstance\n          });\n        }\n        if (!opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n        return React.createElement(Mutation, __assign({\n          ignoreResults: true\n        }, opts, {\n          mutation: document\n        }), function (mutate, _a) {\n          var _b, _c;\n          var data = _a.data,\n            r = __rest(_a, [\"data\"]);\n          // the HOC's historically hoisted the data from the execution result\n          // up onto the result since it was passed as a nested prop\n          // we massage the Mutation component's shape here to replicate that\n          // this matches the query HoC\n          var result = Object.assign(r, data || {});\n          var name = operationOptions.name || \"mutate\";\n          var resultName = operationOptions.name ? \"\".concat(name, \"Result\") : \"result\";\n          var childProps = (_b = {}, _b[name] = mutate, _b[resultName] = result, _b);\n          if (operationOptions.props) {\n            var newResult = (_c = {}, _c[name] = mutate, _c[resultName] = result, _c.ownProps = props, _c);\n            childProps = operationOptions.props(newResult);\n          }\n          return React.createElement(WrappedComponent, __assign({}, props, childProps));\n        });\n      };\n      GraphQL.displayName = graphQLDisplayName;\n      GraphQL.WrappedComponent = WrappedComponent;\n      return GraphQL;\n    }(GraphQLBase);\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}","map":{"version":3,"names":["React","hoistNonReactStatics","parser","Mutation","defaultMapPropsToOptions","getDisplayName","calculateVariablesFromProps","GraphQLBase","withMutation","document","operationOptions","operation","_a","options","_b","alias","mapPropsToOptions","WrappedComponent","graphQLDisplayName","concat","GraphQL","_super","__extends","prototype","render","props","opts","withRef","Object","assign","ref","setWrappedInstance","variables","length","createElement","__assign","ignoreResults","mutation","mutate","data","r","__rest","result","name","resultName","childProps","newResult","_c","ownProps","displayName"],"sources":["C:\\laragon\\www\\php_projects\\scandiweb_store\\frontend\\node_modules\\@apollo\\src\\react\\hoc\\mutation-hoc.tsx"],"sourcesContent":["import * as React from \"rehackt\";\nimport type * as ReactTypes from \"react\";\nimport type { DocumentNode } from \"graphql\";\nimport hoistNonReactStatics from \"hoist-non-react-statics\";\n\nimport { parser } from \"../parser/index.js\";\nimport type { DefaultContext, OperationVariables } from \"../../core/types.js\";\nimport type {\n  BaseMutationOptions,\n  MutationFunction,\n  MutationResult,\n} from \"../types/types.js\";\nimport { Mutation } from \"../components/index.js\";\n\nimport {\n  defaultMapPropsToOptions,\n  getDisplayName,\n  calculateVariablesFromProps,\n  GraphQLBase,\n} from \"./hoc-utils.js\";\nimport type { OperationOption, OptionProps, MutateProps } from \"./types.js\";\nimport type { ApolloCache } from \"../../core/index.js\";\n\n/**\n * @deprecated\n * Official support for React Apollo higher order components ended in March 2020.\n * This library is still included in the `@apollo/client` package, but it no longer receives feature updates or bug fixes.\n */\nexport function withMutation<\n  TProps extends TGraphQLVariables | {} = {},\n  TData extends Record<string, any> = {},\n  TGraphQLVariables extends OperationVariables = {},\n  TChildProps = MutateProps<TData, TGraphQLVariables>,\n  TContext extends Record<string, any> = DefaultContext,\n  TCache extends ApolloCache<any> = ApolloCache<any>,\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n\n  const { options = defaultMapPropsToOptions, alias = \"Apollo\" } =\n    operationOptions;\n\n  let mapPropsToOptions = options as (\n    props: any\n  ) => BaseMutationOptions<TData, TGraphQLVariables, TContext, TCache>;\n  if (typeof mapPropsToOptions !== \"function\")\n    mapPropsToOptions = () =>\n      options as BaseMutationOptions<\n        TData,\n        TGraphQLVariables,\n        TContext,\n        TCache\n      >;\n\n  return (\n    WrappedComponent: ReactTypes.ComponentType<TProps & TChildProps>\n  ): ReactTypes.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<TProps, TChildProps> {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n      render() {\n        let props = this.props as TProps;\n        const opts = mapPropsToOptions(props) as BaseMutationOptions<\n          TData,\n          TGraphQLVariables,\n          TContext,\n          TCache\n        >;\n\n        if (operationOptions.withRef) {\n          this.withRef = true;\n          props = Object.assign({}, props, {\n            ref: this.setWrappedInstance,\n          });\n        }\n        if (!opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(\n            operation,\n            props\n          ) as TGraphQLVariables;\n        }\n\n        return (\n          <Mutation ignoreResults {...opts} mutation={document}>\n            {/* @ts-expect-error */}\n            {(\n              mutate: MutationFunction<TData, TGraphQLVariables>,\n              { data, ...r }: MutationResult<TData>\n            ) => {\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Mutation component's shape here to replicate that\n              // this matches the query HoC\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || \"mutate\";\n              const resultName =\n                operationOptions.name ? `${name}Result` : \"result\";\n              let childProps = {\n                [name]: mutate,\n                [resultName]: result,\n              } as any as TChildProps;\n              if (operationOptions.props) {\n                const newResult: OptionProps<TProps, TData, TGraphQLVariables> =\n                  {\n                    [name]: mutate,\n                    [resultName]: result,\n                    ownProps: props,\n                  };\n                childProps = operationOptions.props(newResult) as any;\n              }\n\n              return <WrappedComponent {...props} {...childProps} />;\n            }}\n          </Mutation>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}