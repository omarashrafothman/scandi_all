{"ast":null,"code":"var _jsxFileName = \"C:\\\\laragon\\\\www\\\\php_projects\\\\scandiweb_store\\\\frontend\\\\src\\\\pages\\\\productDetails\\\\ProductDetails.jsx\";\nimport React, { Component } from 'react';\nimport { gql } from '@apollo/client';\nimport { Query } from '@apollo/client/react/components';\nimport ImageSlider from '../../components/slider/ImageSlider';\n\n// GraphQL query to get product by sku_id\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_PRODUCT_BY_SKU_ID = gql`\n  query getProductBySkuId($sku_id: Int!) {\n    product(sku_id: $sku_id) {\n      id\n      name\n      description\n      galleries {\n        image_url\n      }\n      prices {\n        currency_symbol\n        amount\n      }\n      attributes {\n        name\n        items {\n          value\n        }\n      }\n    }\n  }\n`;\nclass ProductDetails extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      skuId: null,\n      loading: true,\n      error: null,\n      product: null\n    };\n  }\n  componentDidMount() {\n    this.fetchSkuId();\n  }\n  fetchSkuId() {\n    const param = parseInt(window.location.pathname.split('/')[2]);\n    console.log(\"Extracted SKU ID:\", param);\n    if (!isNaN(param)) {\n      this.setState({\n        skuId: param\n      }, () => {\n        this.fetchProduct(); // Fetch product after setting skuId\n      });\n    } else {\n      this.setState({\n        error: \"SKU ID is not valid.\",\n        loading: false\n      });\n    }\n  }\n  async fetchProduct() {\n    const {\n      skuId\n    } = this.state;\n    console.log(\"SKU ID before query:\", skuId); // تسجيل قبل الاستعلام\n\n    if (skuId) {\n      try {\n        this.setState({\n          loading: false\n        });\n      } catch (error) {\n        this.setState({\n          error: error.message,\n          loading: false\n        });\n      }\n    } else {\n      this.setState({\n        loading: false,\n        error: \"SKU ID is not valid.\"\n      });\n    }\n  }\n  render() {\n    const {\n      loading,\n      error,\n      product\n    } = this.state;\n    if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 29\n    }, this);\n    if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 27\n    }, this);\n    console.log(\"Product data:\", product);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default ProductDetails;","map":{"version":3,"names":["React","Component","gql","Query","ImageSlider","jsxDEV","_jsxDEV","GET_PRODUCT_BY_SKU_ID","ProductDetails","constructor","args","state","skuId","loading","error","product","componentDidMount","fetchSkuId","param","parseInt","window","location","pathname","split","console","log","isNaN","setState","fetchProduct","message","render","children","fileName","_jsxFileName","lineNumber","columnNumber","className"],"sources":["C:/laragon/www/php_projects/scandiweb_store/frontend/src/pages/productDetails/ProductDetails.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport { gql } from '@apollo/client';\r\nimport { Query } from '@apollo/client/react/components';\r\nimport ImageSlider from '../../components/slider/ImageSlider';\r\n\r\n// GraphQL query to get product by sku_id\r\nconst GET_PRODUCT_BY_SKU_ID = gql`\r\n  query getProductBySkuId($sku_id: Int!) {\r\n    product(sku_id: $sku_id) {\r\n      id\r\n      name\r\n      description\r\n      galleries {\r\n        image_url\r\n      }\r\n      prices {\r\n        currency_symbol\r\n        amount\r\n      }\r\n      attributes {\r\n        name\r\n        items {\r\n          value\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nclass ProductDetails extends Component {\r\n    state = {\r\n        skuId: null,\r\n        loading: true,\r\n        error: null,\r\n        product: null,\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.fetchSkuId();\r\n    }\r\n\r\n    fetchSkuId() {\r\n        const param = parseInt(window.location.pathname.split('/')[2]);\r\n        console.log(\"Extracted SKU ID:\", param);\r\n\r\n        if (!isNaN(param)) {\r\n            this.setState({ skuId: param }, () => {\r\n                this.fetchProduct(); // Fetch product after setting skuId\r\n            });\r\n        } else {\r\n            this.setState({ error: \"SKU ID is not valid.\", loading: false });\r\n        }\r\n    }\r\n\r\n    async fetchProduct() {\r\n        const { skuId } = this.state;\r\n        console.log(\"SKU ID before query:\", skuId); // تسجيل قبل الاستعلام\r\n\r\n        if (skuId) {\r\n            try {\r\n\r\n\r\n                this.setState({\r\n\r\n                    loading: false,\r\n                });\r\n            } catch (error) {\r\n                this.setState({\r\n                    error: error.message,\r\n                    loading: false,\r\n                });\r\n            }\r\n        } else {\r\n            this.setState({ loading: false, error: \"SKU ID is not valid.\" });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { loading, error, product } = this.state;\r\n\r\n        if (loading) return <p>Loading...</p>;\r\n        if (error) return <p>Error: {error}</p>;\r\n\r\n        console.log(\"Product data:\", product);\r\n\r\n        return (\r\n            <div>\r\n                <div className='container'>\r\n                    {/*    <div className='productDetails d-flex justify-content-around flex-wrap my-5'>\r\n                        <div className='productDetailsGallery'>\r\n                            <ImageSlider images={product.galleries.map(g => g.image_url)} />\r\n                        </div>\r\n                        <div className='productDetailsContent'>\r\n                            <h3>{product.name}</h3>\r\n                            {\r\n                                product.attributes.map((attrItem) => {\r\n                                    let content;\r\n                                    switch (attrItem.name) {\r\n                                        case \"Color\":\r\n                                            content = (\r\n                                                <div className='productColors' key={attrItem.name}>\r\n                                                    <p>{attrItem.name}:</p>\r\n                                                    <div className=\"d-flex align-items-center w-75 sizesContainer my-2\">\r\n                                                        {attrItem.items.map((colorItem) => (\r\n                                                            <label className=\"containerBlock colorItem\" style={{ background: colorItem.value }} key={colorItem.value}>\r\n                                                                <input type=\"radio\" name=\"color\" value={colorItem.value} />\r\n                                                                <span className=\"checkmark\"></span>\r\n                                                            </label>\r\n                                                        ))}\r\n                                                    </div>\r\n                                                </div>\r\n                                            );\r\n                                            break;\r\n                                        default:\r\n                                            content = (\r\n                                                <div className=\"productSizes my-2\" key={attrItem.name}>\r\n                                                    <p>{attrItem.name}:</p>\r\n                                                    {attrItem.items.map((item) => (\r\n                                                        <label className=\"containerBlock\" key={item.value}>\r\n                                                            <input type=\"radio\" name={attrItem.name} value={item.value} />\r\n                                                            <span className=\"checkmark\">{item.value}</span>\r\n                                                        </label>\r\n                                                    ))}\r\n                                                </div>\r\n                                            );\r\n                                            break;\r\n                                    }\r\n\r\n                                    return content;\r\n                                })\r\n                            }\r\n\r\n                            <div className='productSizes'>\r\n                                <p className=''>PRICE:</p>\r\n                                <p className=\"priceNumber\">\r\n                                    {product.prices[0].currency_symbol}{product.prices[0].amount}\r\n                                </p>\r\n                            </div>\r\n\r\n                            <div className='my-4'>\r\n                                <button className='cartBtn' type='submit'>ADD TO CART</button>\r\n                            </div>\r\n\r\n                            <div className='productDet'>\r\n                                <p className=''>{product.description}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>*/}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProductDetails;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}