{"ast":null,"code":"import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, newInvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { execute } from \"../link/core/index.js\";\nimport { hasDirectives, isExecutionPatchIncrementalResult, isExecutionPatchResult, removeDirectivesFromDocument } from \"../utilities/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, getGraphQLErrorsFromResult, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, DocumentTransform } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport { ApolloError, isApolloError, graphQLResultHasProtocolErrors } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { QueryInfo, shouldWriteResult } from \"./QueryInfo.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../errors/index.js\";\nimport { print } from \"../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar IGNORE = Object.create(null);\nimport { Trie } from \"@wry/trie\";\nimport { AutoCleanedWeakCache, cacheSizes } from \"../utilities/index.js\";\nvar QueryManager = /** @class */function () {\n  function QueryManager(options) {\n    var _this = this;\n    this.clientAwareness = {};\n    // All the queries that the QueryManager is currently managing (not\n    // including mutations and subscriptions).\n    this.queries = new Map();\n    // Maps from queryId strings to Promise rejection functions for\n    // currently active queries and fetches.\n    // Use protected instead of private field so\n    // @apollo/experimental-nextjs-app-support can access type info.\n    this.fetchCancelFns = new Map();\n    this.transformCache = new AutoCleanedWeakCache(cacheSizes[\"queryManager.getDocumentInfo\"] || 2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */);\n    this.queryIdCounter = 1;\n    this.requestIdCounter = 1;\n    this.mutationIdCounter = 1;\n    // Use protected instead of private field so\n    // @apollo/experimental-nextjs-app-support can access type info.\n    this.inFlightLinkObservables = new Trie(false);\n    var defaultDocumentTransform = new DocumentTransform(function (document) {\n      return _this.cache.transformDocument(document);\n    },\n    // Allow the apollo cache to manage its own transform caches\n    {\n      cache: false\n    });\n    this.cache = options.cache;\n    this.link = options.link;\n    this.defaultOptions = options.defaultOptions;\n    this.queryDeduplication = options.queryDeduplication;\n    this.clientAwareness = options.clientAwareness;\n    this.localState = options.localState;\n    this.ssrMode = options.ssrMode;\n    this.assumeImmutableResults = options.assumeImmutableResults;\n    var documentTransform = options.documentTransform;\n    this.documentTransform = documentTransform ? defaultDocumentTransform.concat(documentTransform)\n    // The custom document transform may add new fragment spreads or new\n    // field selections, so we want to give the cache a chance to run\n    // again. For example, the InMemoryCache adds __typename to field\n    // selections and fragments from the fragment registry.\n    .concat(defaultDocumentTransform) : defaultDocumentTransform;\n    this.defaultContext = options.defaultContext || Object.create(null);\n    if (this.onBroadcast = options.onBroadcast) {\n      this.mutationStore = Object.create(null);\n    }\n  }\n  /**\n   * Call this method to terminate any active query processes, making it safe\n   * to dispose of this QueryManager instance.\n   */\n  QueryManager.prototype.stop = function () {\n    var _this = this;\n    this.queries.forEach(function (_info, queryId) {\n      _this.stopQueryNoBroadcast(queryId);\n    });\n    this.cancelPendingFetches(newInvariantError(26));\n  };\n  QueryManager.prototype.cancelPendingFetches = function (error) {\n    this.fetchCancelFns.forEach(function (cancel) {\n      return cancel(error);\n    });\n    this.fetchCancelFns.clear();\n  };\n  QueryManager.prototype.mutate = function (_a) {\n    return __awaiter(this, arguments, void 0, function (_b) {\n      var mutationId, hasClientExports, mutationStoreValue, isOptimistic, self;\n      var _c, _d;\n      var mutation = _b.mutation,\n        variables = _b.variables,\n        optimisticResponse = _b.optimisticResponse,\n        updateQueries = _b.updateQueries,\n        _e = _b.refetchQueries,\n        refetchQueries = _e === void 0 ? [] : _e,\n        _f = _b.awaitRefetchQueries,\n        awaitRefetchQueries = _f === void 0 ? false : _f,\n        updateWithProxyFn = _b.update,\n        onQueryUpdated = _b.onQueryUpdated,\n        _g = _b.fetchPolicy,\n        fetchPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.fetchPolicy) || \"network-only\" : _g,\n        _h = _b.errorPolicy,\n        errorPolicy = _h === void 0 ? ((_d = this.defaultOptions.mutate) === null || _d === void 0 ? void 0 : _d.errorPolicy) || \"none\" : _h,\n        keepRootFields = _b.keepRootFields,\n        context = _b.context;\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            invariant(mutation, 27);\n            invariant(fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\", 28);\n            mutationId = this.generateMutationId();\n            mutation = this.cache.transformForLink(this.transform(mutation));\n            hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n            variables = this.getVariables(mutation, variables);\n            if (!hasClientExports) return [3 /*break*/, 2];\n            return [4 /*yield*/, this.localState.addExportedVariables(mutation, variables, context)];\n          case 1:\n            variables = _j.sent();\n            _j.label = 2;\n          case 2:\n            mutationStoreValue = this.mutationStore && (this.mutationStore[mutationId] = {\n              mutation: mutation,\n              variables: variables,\n              loading: true,\n              error: null\n            });\n            isOptimistic = optimisticResponse && this.markMutationOptimistic(optimisticResponse, {\n              mutationId: mutationId,\n              document: mutation,\n              variables: variables,\n              fetchPolicy: fetchPolicy,\n              errorPolicy: errorPolicy,\n              context: context,\n              updateQueries: updateQueries,\n              update: updateWithProxyFn,\n              keepRootFields: keepRootFields\n            });\n            this.broadcastQueries();\n            self = this;\n            return [2 /*return*/, new Promise(function (resolve, reject) {\n              return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), {\n                optimisticResponse: isOptimistic ? optimisticResponse : void 0\n              }), variables, {}, false), function (result) {\n                if (graphQLResultHasError(result) && errorPolicy === \"none\") {\n                  throw new ApolloError({\n                    graphQLErrors: getGraphQLErrorsFromResult(result)\n                  });\n                }\n                if (mutationStoreValue) {\n                  mutationStoreValue.loading = false;\n                  mutationStoreValue.error = null;\n                }\n                var storeResult = __assign({}, result);\n                if (typeof refetchQueries === \"function\") {\n                  refetchQueries = refetchQueries(storeResult);\n                }\n                if (errorPolicy === \"ignore\" && graphQLResultHasError(storeResult)) {\n                  delete storeResult.errors;\n                }\n                return self.markMutationResult({\n                  mutationId: mutationId,\n                  result: storeResult,\n                  document: mutation,\n                  variables: variables,\n                  fetchPolicy: fetchPolicy,\n                  errorPolicy: errorPolicy,\n                  context: context,\n                  update: updateWithProxyFn,\n                  updateQueries: updateQueries,\n                  awaitRefetchQueries: awaitRefetchQueries,\n                  refetchQueries: refetchQueries,\n                  removeOptimistic: isOptimistic ? mutationId : void 0,\n                  onQueryUpdated: onQueryUpdated,\n                  keepRootFields: keepRootFields\n                });\n              }).subscribe({\n                next: function (storeResult) {\n                  self.broadcastQueries();\n                  // Since mutations might receive multiple payloads from the\n                  // ApolloLink chain (e.g. when used with @defer),\n                  // we resolve with a SingleExecutionResult or after the final\n                  // ExecutionPatchResult has arrived and we have assembled the\n                  // multipart response into a single result.\n                  if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n                    resolve(storeResult);\n                  }\n                },\n                error: function (err) {\n                  if (mutationStoreValue) {\n                    mutationStoreValue.loading = false;\n                    mutationStoreValue.error = err;\n                  }\n                  if (isOptimistic) {\n                    self.cache.removeOptimistic(mutationId);\n                  }\n                  self.broadcastQueries();\n                  reject(err instanceof ApolloError ? err : new ApolloError({\n                    networkError: err\n                  }));\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  QueryManager.prototype.markMutationResult = function (mutation, cache) {\n    var _this = this;\n    if (cache === void 0) {\n      cache = this.cache;\n    }\n    var result = mutation.result;\n    var cacheWrites = [];\n    var skipCache = mutation.fetchPolicy === \"no-cache\";\n    if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n      if (!isExecutionPatchIncrementalResult(result)) {\n        cacheWrites.push({\n          result: result.data,\n          dataId: \"ROOT_MUTATION\",\n          query: mutation.document,\n          variables: mutation.variables\n        });\n      }\n      if (isExecutionPatchIncrementalResult(result) && isNonEmptyArray(result.incremental)) {\n        var diff = cache.diff({\n          id: \"ROOT_MUTATION\",\n          // The cache complains if passed a mutation where it expects a\n          // query, so we transform mutations and subscriptions to queries\n          // (only once, thanks to this.transformCache).\n          query: this.getDocumentInfo(mutation.document).asQuery,\n          variables: mutation.variables,\n          optimistic: false,\n          returnPartialData: true\n        });\n        var mergedData = void 0;\n        if (diff.result) {\n          mergedData = mergeIncrementalData(diff.result, result);\n        }\n        if (typeof mergedData !== \"undefined\") {\n          // cast the ExecutionPatchResult to FetchResult here since\n          // ExecutionPatchResult never has `data` when returned from the server\n          result.data = mergedData;\n          cacheWrites.push({\n            result: mergedData,\n            dataId: \"ROOT_MUTATION\",\n            query: mutation.document,\n            variables: mutation.variables\n          });\n        }\n      }\n      var updateQueries_1 = mutation.updateQueries;\n      if (updateQueries_1) {\n        this.queries.forEach(function (_a, queryId) {\n          var observableQuery = _a.observableQuery;\n          var queryName = observableQuery && observableQuery.queryName;\n          if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n            return;\n          }\n          var updater = updateQueries_1[queryName];\n          var _b = _this.queries.get(queryId),\n            document = _b.document,\n            variables = _b.variables;\n          // Read the current query result from the store.\n          var _c = cache.diff({\n              query: document,\n              variables: variables,\n              returnPartialData: true,\n              optimistic: false\n            }),\n            currentQueryResult = _c.result,\n            complete = _c.complete;\n          if (complete && currentQueryResult) {\n            // Run our reducer using the current query result and the mutation result.\n            var nextQueryResult = updater(currentQueryResult, {\n              mutationResult: result,\n              queryName: document && getOperationName(document) || void 0,\n              queryVariables: variables\n            });\n            // Write the modified result back into the store if we got a new result.\n            if (nextQueryResult) {\n              cacheWrites.push({\n                result: nextQueryResult,\n                dataId: \"ROOT_QUERY\",\n                query: document,\n                variables: variables\n              });\n            }\n          }\n        });\n      }\n    }\n    if (cacheWrites.length > 0 || (mutation.refetchQueries || \"\").length > 0 || mutation.update || mutation.onQueryUpdated || mutation.removeOptimistic) {\n      var results_1 = [];\n      this.refetchQueries({\n        updateCache: function (cache) {\n          if (!skipCache) {\n            cacheWrites.forEach(function (write) {\n              return cache.write(write);\n            });\n          }\n          // If the mutation has some writes associated with it then we need to\n          // apply those writes to the store by running this reducer again with\n          // a write action.\n          var update = mutation.update;\n          // Determine whether result is a SingleExecutionResult,\n          // or the final ExecutionPatchResult.\n          var isFinalResult = !isExecutionPatchResult(result) || isExecutionPatchIncrementalResult(result) && !result.hasNext;\n          if (update) {\n            if (!skipCache) {\n              // Re-read the ROOT_MUTATION data we just wrote into the cache\n              // (the first cache.write call in the cacheWrites.forEach loop\n              // above), so field read functions have a chance to run for\n              // fields within mutation result objects.\n              var diff = cache.diff({\n                id: \"ROOT_MUTATION\",\n                // The cache complains if passed a mutation where it expects a\n                // query, so we transform mutations and subscriptions to queries\n                // (only once, thanks to this.transformCache).\n                query: _this.getDocumentInfo(mutation.document).asQuery,\n                variables: mutation.variables,\n                optimistic: false,\n                returnPartialData: true\n              });\n              if (diff.complete) {\n                result = __assign(__assign({}, result), {\n                  data: diff.result\n                });\n                if (\"incremental\" in result) {\n                  delete result.incremental;\n                }\n                if (\"hasNext\" in result) {\n                  delete result.hasNext;\n                }\n              }\n            }\n            // If we've received the whole response,\n            // either a SingleExecutionResult or the final ExecutionPatchResult,\n            // call the update function.\n            if (isFinalResult) {\n              update(cache, result, {\n                context: mutation.context,\n                variables: mutation.variables\n              });\n            }\n          }\n          // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n          // shallow to allow rolling back optimistic evictions.\n          if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n            cache.modify({\n              id: \"ROOT_MUTATION\",\n              fields: function (value, _a) {\n                var fieldName = _a.fieldName,\n                  DELETE = _a.DELETE;\n                return fieldName === \"__typename\" ? value : DELETE;\n              }\n            });\n          }\n        },\n        include: mutation.refetchQueries,\n        // Write the final mutation.result to the root layer of the cache.\n        optimistic: false,\n        // Remove the corresponding optimistic layer at the same time as we\n        // write the final non-optimistic result.\n        removeOptimistic: mutation.removeOptimistic,\n        // Let the caller of client.mutate optionally determine the refetching\n        // behavior for watched queries after the mutation.update function runs.\n        // If no onQueryUpdated function was provided for this mutation, pass\n        // null instead of undefined to disable the default refetching behavior.\n        onQueryUpdated: mutation.onQueryUpdated || null\n      }).forEach(function (result) {\n        return results_1.push(result);\n      });\n      if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n        // Returning a promise here makes the mutation await that promise, so we\n        // include results in that promise's work if awaitRefetchQueries or an\n        // onQueryUpdated function was specified.\n        return Promise.all(results_1).then(function () {\n          return result;\n        });\n      }\n    }\n    return Promise.resolve(result);\n  };\n  QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n    var _this = this;\n    var data = typeof optimisticResponse === \"function\" ? optimisticResponse(mutation.variables, {\n      IGNORE: IGNORE\n    }) : optimisticResponse;\n    if (data === IGNORE) {\n      return false;\n    }\n    this.cache.recordOptimisticTransaction(function (cache) {\n      try {\n        _this.markMutationResult(__assign(__assign({}, mutation), {\n          result: {\n            data: data\n          }\n        }), cache);\n      } catch (error) {\n        globalThis.__DEV__ !== false && invariant.error(error);\n      }\n    }, mutation.mutationId);\n    return true;\n  };\n  QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n    return this.fetchConcastWithInfo(queryId, options, networkStatus).concast.promise;\n  };\n  QueryManager.prototype.getQueryStore = function () {\n    var store = Object.create(null);\n    this.queries.forEach(function (info, queryId) {\n      store[queryId] = {\n        variables: info.variables,\n        networkStatus: info.networkStatus,\n        networkError: info.networkError,\n        graphQLErrors: info.graphQLErrors\n      };\n    });\n    return store;\n  };\n  QueryManager.prototype.resetErrors = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) {\n      queryInfo.networkError = undefined;\n      queryInfo.graphQLErrors = [];\n    }\n  };\n  QueryManager.prototype.transform = function (document) {\n    return this.documentTransform.transformDocument(document);\n  };\n  QueryManager.prototype.getDocumentInfo = function (document) {\n    var transformCache = this.transformCache;\n    if (!transformCache.has(document)) {\n      var cacheEntry = {\n        // TODO These three calls (hasClientExports, shouldForceResolvers, and\n        // usesNonreactiveDirective) are performing independent full traversals\n        // of the transformed document. We should consider merging these\n        // traversals into a single pass in the future, though the work is\n        // cached after the first time.\n        hasClientExports: hasClientExports(document),\n        hasForcedResolvers: this.localState.shouldForceResolvers(document),\n        hasNonreactiveDirective: hasDirectives([\"nonreactive\"], document),\n        clientQuery: this.localState.clientQuery(document),\n        serverQuery: removeDirectivesFromDocument([{\n          name: \"client\",\n          remove: true\n        }, {\n          name: \"connection\"\n        }, {\n          name: \"nonreactive\"\n        }], document),\n        defaultVars: getDefaultValues(getOperationDefinition(document)),\n        // Transform any mutation or subscription operations to query operations\n        // so we can read/write them from/to the cache.\n        asQuery: __assign(__assign({}, document), {\n          definitions: document.definitions.map(function (def) {\n            if (def.kind === \"OperationDefinition\" && def.operation !== \"query\") {\n              return __assign(__assign({}, def), {\n                operation: \"query\"\n              });\n            }\n            return def;\n          })\n        })\n      };\n      transformCache.set(document, cacheEntry);\n    }\n    return transformCache.get(document);\n  };\n  QueryManager.prototype.getVariables = function (document, variables) {\n    return __assign(__assign({}, this.getDocumentInfo(document).defaultVars), variables);\n  };\n  QueryManager.prototype.watchQuery = function (options) {\n    var query = this.transform(options.query);\n    // assign variable default values if supplied\n    // NOTE: We don't modify options.query here with the transformed query to\n    // ensure observable.options.query is set to the raw untransformed query.\n    options = __assign(__assign({}, options), {\n      variables: this.getVariables(query, options.variables)\n    });\n    if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n      options.notifyOnNetworkStatusChange = false;\n    }\n    var queryInfo = new QueryInfo(this);\n    var observable = new ObservableQuery({\n      queryManager: this,\n      queryInfo: queryInfo,\n      options: options\n    });\n    observable[\"lastQuery\"] = query;\n    this.queries.set(observable.queryId, queryInfo);\n    // We give queryInfo the transformed query to ensure the first cache diff\n    // uses the transformed query instead of the raw query\n    queryInfo.init({\n      document: query,\n      observableQuery: observable,\n      variables: observable.variables\n    });\n    return observable;\n  };\n  QueryManager.prototype.query = function (options, queryId) {\n    var _this = this;\n    if (queryId === void 0) {\n      queryId = this.generateQueryId();\n    }\n    invariant(options.query, 29);\n    invariant(options.query.kind === \"Document\", 30);\n    invariant(!options.returnPartialData, 31);\n    invariant(!options.pollInterval, 32);\n    return this.fetchQuery(queryId, __assign(__assign({}, options), {\n      query: this.transform(options.query)\n    })).finally(function () {\n      return _this.stopQuery(queryId);\n    });\n  };\n  QueryManager.prototype.generateQueryId = function () {\n    return String(this.queryIdCounter++);\n  };\n  QueryManager.prototype.generateRequestId = function () {\n    return this.requestIdCounter++;\n  };\n  QueryManager.prototype.generateMutationId = function () {\n    return String(this.mutationIdCounter++);\n  };\n  QueryManager.prototype.stopQueryInStore = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n    var queryInfo = this.queries.get(queryId);\n    if (queryInfo) queryInfo.stop();\n  };\n  QueryManager.prototype.clearStore = function (options) {\n    if (options === void 0) {\n      options = {\n        discardWatches: true\n      };\n    }\n    // Before we have sent the reset action to the store, we can no longer\n    // rely on the results returned by in-flight requests since these may\n    // depend on values that previously existed in the data portion of the\n    // store. So, we cancel the promises and observers that we have issued\n    // so far and not yet resolved (in the case of queries).\n    this.cancelPendingFetches(newInvariantError(33));\n    this.queries.forEach(function (queryInfo) {\n      if (queryInfo.observableQuery) {\n        // Set loading to true so listeners don't trigger unless they want\n        // results with partial data.\n        queryInfo.networkStatus = NetworkStatus.loading;\n      } else {\n        queryInfo.stop();\n      }\n    });\n    if (this.mutationStore) {\n      this.mutationStore = Object.create(null);\n    }\n    // begin removing data from the store\n    return this.cache.reset(options);\n  };\n  QueryManager.prototype.getObservableQueries = function (include) {\n    var _this = this;\n    if (include === void 0) {\n      include = \"active\";\n    }\n    var queries = new Map();\n    var queryNamesAndDocs = new Map();\n    var legacyQueryOptions = new Set();\n    if (Array.isArray(include)) {\n      include.forEach(function (desc) {\n        if (typeof desc === \"string\") {\n          queryNamesAndDocs.set(desc, false);\n        } else if (isDocumentNode(desc)) {\n          queryNamesAndDocs.set(_this.transform(desc), false);\n        } else if (isNonNullObject(desc) && desc.query) {\n          legacyQueryOptions.add(desc);\n        }\n      });\n    }\n    this.queries.forEach(function (_a, queryId) {\n      var oq = _a.observableQuery,\n        document = _a.document;\n      if (oq) {\n        if (include === \"all\") {\n          queries.set(queryId, oq);\n          return;\n        }\n        var queryName = oq.queryName,\n          fetchPolicy = oq.options.fetchPolicy;\n        if (fetchPolicy === \"standby\" || include === \"active\" && !oq.hasObservers()) {\n          return;\n        }\n        if (include === \"active\" || queryName && queryNamesAndDocs.has(queryName) || document && queryNamesAndDocs.has(document)) {\n          queries.set(queryId, oq);\n          if (queryName) queryNamesAndDocs.set(queryName, true);\n          if (document) queryNamesAndDocs.set(document, true);\n        }\n      }\n    });\n    if (legacyQueryOptions.size) {\n      legacyQueryOptions.forEach(function (options) {\n        // We will be issuing a fresh network request for this query, so we\n        // pre-allocate a new query ID here, using a special prefix to enable\n        // cleaning up these temporary queries later, after fetching.\n        var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n        var queryInfo = _this.getQuery(queryId).init({\n          document: options.query,\n          variables: options.variables\n        });\n        var oq = new ObservableQuery({\n          queryManager: _this,\n          queryInfo: queryInfo,\n          options: __assign(__assign({}, options), {\n            fetchPolicy: \"network-only\"\n          })\n        });\n        invariant(oq.queryId === queryId);\n        queryInfo.setObservableQuery(oq);\n        queries.set(queryId, oq);\n      });\n    }\n    if (globalThis.__DEV__ !== false && queryNamesAndDocs.size) {\n      queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n        if (!included) {\n          globalThis.__DEV__ !== false && invariant.warn(typeof nameOrDoc === \"string\" ? 34 : 35, nameOrDoc);\n        }\n      });\n    }\n    return queries;\n  };\n  QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n    var _this = this;\n    if (includeStandby === void 0) {\n      includeStandby = false;\n    }\n    var observableQueryPromises = [];\n    this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n      var fetchPolicy = observableQuery.options.fetchPolicy;\n      observableQuery.resetLastResults();\n      if (includeStandby || fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\") {\n        observableQueryPromises.push(observableQuery.refetch());\n      }\n      _this.getQuery(queryId).setDiff(null);\n    });\n    this.broadcastQueries();\n    return Promise.all(observableQueryPromises);\n  };\n  QueryManager.prototype.setObservableQuery = function (observableQuery) {\n    this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n  };\n  QueryManager.prototype.startGraphQLSubscription = function (_a) {\n    var _this = this;\n    var query = _a.query,\n      fetchPolicy = _a.fetchPolicy,\n      _b = _a.errorPolicy,\n      errorPolicy = _b === void 0 ? \"none\" : _b,\n      variables = _a.variables,\n      _c = _a.context,\n      context = _c === void 0 ? {} : _c,\n      _d = _a.extensions,\n      extensions = _d === void 0 ? {} : _d;\n    query = this.transform(query);\n    variables = this.getVariables(query, variables);\n    var makeObservable = function (variables) {\n      return _this.getObservableFromLink(query, context, variables, extensions).map(function (result) {\n        if (fetchPolicy !== \"no-cache\") {\n          // the subscription interface should handle not sending us results we no longer subscribe to.\n          // XXX I don't think we ever send in an object with errors, but we might in the future...\n          if (shouldWriteResult(result, errorPolicy)) {\n            _this.cache.write({\n              query: query,\n              result: result.data,\n              dataId: \"ROOT_SUBSCRIPTION\",\n              variables: variables\n            });\n          }\n          _this.broadcastQueries();\n        }\n        var hasErrors = graphQLResultHasError(result);\n        var hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n        if (hasErrors || hasProtocolErrors) {\n          var errors = {};\n          if (hasErrors) {\n            errors.graphQLErrors = result.errors;\n          }\n          if (hasProtocolErrors) {\n            errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n          }\n          // `errorPolicy` is a mechanism for handling GraphQL errors, according\n          // to our documentation, so we throw protocol errors regardless of the\n          // set error policy.\n          if (errorPolicy === \"none\" || hasProtocolErrors) {\n            throw new ApolloError(errors);\n          }\n        }\n        if (errorPolicy === \"ignore\") {\n          delete result.errors;\n        }\n        return result;\n      });\n    };\n    if (this.getDocumentInfo(query).hasClientExports) {\n      var observablePromise_1 = this.localState.addExportedVariables(query, variables, context).then(makeObservable);\n      return new Observable(function (observer) {\n        var sub = null;\n        observablePromise_1.then(function (observable) {\n          return sub = observable.subscribe(observer);\n        }, observer.error);\n        return function () {\n          return sub && sub.unsubscribe();\n        };\n      });\n    }\n    return makeObservable(variables);\n  };\n  QueryManager.prototype.stopQuery = function (queryId) {\n    this.stopQueryNoBroadcast(queryId);\n    this.broadcastQueries();\n  };\n  QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n    this.stopQueryInStoreNoBroadcast(queryId);\n    this.removeQuery(queryId);\n  };\n  QueryManager.prototype.removeQuery = function (queryId) {\n    // teardown all links\n    // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n    // that each add their reject functions to fetchCancelFns.\n    // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n    // The same queryId could have two rejection fns for two promises\n    this.fetchCancelFns.delete(queryId);\n    if (this.queries.has(queryId)) {\n      this.getQuery(queryId).stop();\n      this.queries.delete(queryId);\n    }\n  };\n  QueryManager.prototype.broadcastQueries = function () {\n    if (this.onBroadcast) this.onBroadcast();\n    this.queries.forEach(function (info) {\n      return info.notify();\n    });\n  };\n  QueryManager.prototype.getLocalState = function () {\n    return this.localState;\n  };\n  QueryManager.prototype.getObservableFromLink = function (query, context, variables, extensions,\n  // Prefer context.queryDeduplication if specified.\n  deduplication) {\n    var _this = this;\n    var _a;\n    if (deduplication === void 0) {\n      deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication;\n    }\n    var observable;\n    var _b = this.getDocumentInfo(query),\n      serverQuery = _b.serverQuery,\n      clientQuery = _b.clientQuery;\n    if (serverQuery) {\n      var _c = this,\n        inFlightLinkObservables_1 = _c.inFlightLinkObservables,\n        link = _c.link;\n      var operation = {\n        query: serverQuery,\n        variables: variables,\n        operationName: getOperationName(serverQuery) || void 0,\n        context: this.prepareContext(__assign(__assign({}, context), {\n          forceFetch: !deduplication\n        })),\n        extensions: extensions\n      };\n      context = operation.context;\n      if (deduplication) {\n        var printedServerQuery_1 = print(serverQuery);\n        var varJson_1 = canonicalStringify(variables);\n        var entry = inFlightLinkObservables_1.lookup(printedServerQuery_1, varJson_1);\n        observable = entry.observable;\n        if (!observable) {\n          var concast = new Concast([execute(link, operation)]);\n          observable = entry.observable = concast;\n          concast.beforeNext(function () {\n            inFlightLinkObservables_1.remove(printedServerQuery_1, varJson_1);\n          });\n        }\n      } else {\n        observable = new Concast([execute(link, operation)]);\n      }\n    } else {\n      observable = new Concast([Observable.of({\n        data: {}\n      })]);\n      context = this.prepareContext(context);\n    }\n    if (clientQuery) {\n      observable = asyncMap(observable, function (result) {\n        return _this.localState.runResolvers({\n          document: clientQuery,\n          remoteResult: result,\n          context: context,\n          variables: variables\n        });\n      });\n    }\n    return observable;\n  };\n  QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n    var requestId = queryInfo.lastRequestId = this.generateRequestId();\n    // Performing transformForLink here gives this.cache a chance to fill in\n    // missing fragment definitions (for example) before sending this document\n    // through the link chain.\n    var linkDocument = this.cache.transformForLink(options.query);\n    return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n      var graphQLErrors = getGraphQLErrorsFromResult(result);\n      var hasErrors = graphQLErrors.length > 0;\n      var errorPolicy = options.errorPolicy;\n      // If we interrupted this request by calling getResultsFromLink again\n      // with the same QueryInfo object, we ignore the old results.\n      if (requestId >= queryInfo.lastRequestId) {\n        if (hasErrors && errorPolicy === \"none\") {\n          // Throwing here effectively calls observer.error.\n          throw queryInfo.markError(new ApolloError({\n            graphQLErrors: graphQLErrors\n          }));\n        }\n        // Use linkDocument rather than queryInfo.document so the\n        // operation/fragments used to write the result are the same as the\n        // ones used to obtain it from the link.\n        queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n        queryInfo.markReady();\n      }\n      var aqr = {\n        data: result.data,\n        loading: false,\n        networkStatus: NetworkStatus.ready\n      };\n      // In the case we start multiple network requests simulatenously, we\n      // want to ensure we properly set `data` if we're reporting on an old\n      // result which will not be caught by the conditional above that ends up\n      // throwing the markError result.\n      if (hasErrors && errorPolicy === \"none\") {\n        aqr.data = void 0;\n      }\n      if (hasErrors && errorPolicy !== \"ignore\") {\n        aqr.errors = graphQLErrors;\n        aqr.networkStatus = NetworkStatus.error;\n      }\n      return aqr;\n    }, function (networkError) {\n      var error = isApolloError(networkError) ? networkError : new ApolloError({\n        networkError: networkError\n      });\n      // Avoid storing errors from older interrupted queries.\n      if (requestId >= queryInfo.lastRequestId) {\n        queryInfo.markError(error);\n      }\n      throw error;\n    });\n  };\n  QueryManager.prototype.fetchConcastWithInfo = function (queryId, options,\n  // The initial networkStatus for this fetch, most often\n  // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n  // or setVariables.\n  networkStatus, query) {\n    var _this = this;\n    if (networkStatus === void 0) {\n      networkStatus = NetworkStatus.loading;\n    }\n    if (query === void 0) {\n      query = options.query;\n    }\n    var variables = this.getVariables(query, options.variables);\n    var queryInfo = this.getQuery(queryId);\n    var defaults = this.defaultOptions.watchQuery;\n    var _a = options.fetchPolicy,\n      fetchPolicy = _a === void 0 ? defaults && defaults.fetchPolicy || \"cache-first\" : _a,\n      _b = options.errorPolicy,\n      errorPolicy = _b === void 0 ? defaults && defaults.errorPolicy || \"none\" : _b,\n      _c = options.returnPartialData,\n      returnPartialData = _c === void 0 ? false : _c,\n      _d = options.notifyOnNetworkStatusChange,\n      notifyOnNetworkStatusChange = _d === void 0 ? false : _d,\n      _e = options.context,\n      context = _e === void 0 ? {} : _e;\n    var normalized = Object.assign({}, options, {\n      query: query,\n      variables: variables,\n      fetchPolicy: fetchPolicy,\n      errorPolicy: errorPolicy,\n      returnPartialData: returnPartialData,\n      notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n      context: context\n    });\n    var fromVariables = function (variables) {\n      // Since normalized is always a fresh copy of options, it's safe to\n      // modify its properties here, rather than creating yet another new\n      // WatchQueryOptions object.\n      normalized.variables = variables;\n      var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n      if (\n      // If we're in standby, postpone advancing options.fetchPolicy using\n      // applyNextFetchPolicy.\n      normalized.fetchPolicy !== \"standby\" &&\n      // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n      // this is another way to detect when nothing was done/fetched.\n      sourcesWithInfo.sources.length > 0 && queryInfo.observableQuery) {\n        queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n      }\n      return sourcesWithInfo;\n    };\n    // This cancel function needs to be set before the concast is created,\n    // in case concast creation synchronously cancels the request.\n    var cleanupCancelFn = function () {\n      return _this.fetchCancelFns.delete(queryId);\n    };\n    this.fetchCancelFns.set(queryId, function (reason) {\n      cleanupCancelFn();\n      // This delay ensures the concast variable has been initialized.\n      setTimeout(function () {\n        return concast.cancel(reason);\n      });\n    });\n    var concast, containsDataFromLink;\n    // If the query has @export(as: ...) directives, then we need to\n    // process those directives asynchronously. When there are no\n    // @export directives (the common case), we deliberately avoid\n    // wrapping the result of this.fetchQueryByPolicy in a Promise,\n    // since the timing of result delivery is (unfortunately) important\n    // for backwards compatibility. TODO This code could be simpler if\n    // we deprecated and removed LocalState.\n    if (this.getDocumentInfo(normalized.query).hasClientExports) {\n      concast = new Concast(this.localState.addExportedVariables(normalized.query, normalized.variables, normalized.context).then(fromVariables).then(function (sourcesWithInfo) {\n        return sourcesWithInfo.sources;\n      }));\n      // there is just no way we can synchronously get the *right* value here,\n      // so we will assume `true`, which is the behaviour before the bug fix in\n      // #10597. This means that bug is not fixed in that case, and is probably\n      // un-fixable with reasonable effort for the edge case of @export as\n      // directives.\n      containsDataFromLink = true;\n    } else {\n      var sourcesWithInfo = fromVariables(normalized.variables);\n      containsDataFromLink = sourcesWithInfo.fromLink;\n      concast = new Concast(sourcesWithInfo.sources);\n    }\n    concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n    return {\n      concast: concast,\n      fromLink: containsDataFromLink\n    };\n  };\n  QueryManager.prototype.refetchQueries = function (_a) {\n    var _this = this;\n    var updateCache = _a.updateCache,\n      include = _a.include,\n      _b = _a.optimistic,\n      optimistic = _b === void 0 ? false : _b,\n      _c = _a.removeOptimistic,\n      removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c,\n      onQueryUpdated = _a.onQueryUpdated;\n    var includedQueriesById = new Map();\n    if (include) {\n      this.getObservableQueries(include).forEach(function (oq, queryId) {\n        includedQueriesById.set(queryId, {\n          oq: oq,\n          lastDiff: _this.getQuery(queryId).getDiff()\n        });\n      });\n    }\n    var results = new Map();\n    if (updateCache) {\n      this.cache.batch({\n        update: updateCache,\n        // Since you can perform any combination of cache reads and/or writes in\n        // the cache.batch update function, its optimistic option can be either\n        // a boolean or a string, representing three distinct modes of\n        // operation:\n        //\n        // * false: read/write only the root layer\n        // * true: read/write the topmost layer\n        // * string: read/write a fresh optimistic layer with that ID string\n        //\n        // When typeof optimistic === \"string\", a new optimistic layer will be\n        // temporarily created within cache.batch with that string as its ID. If\n        // we then pass that same string as the removeOptimistic option, we can\n        // make cache.batch immediately remove the optimistic layer after\n        // running the updateCache function, triggering only one broadcast.\n        //\n        // However, the refetchQueries method accepts only true or false for its\n        // optimistic option (not string). We interpret true to mean a temporary\n        // optimistic layer should be created, to allow efficiently rolling back\n        // the effect of the updateCache function, which involves passing a\n        // string instead of true as the optimistic option to cache.batch, when\n        // refetchQueries receives optimistic: true.\n        //\n        // In other words, we are deliberately not supporting the use case of\n        // writing to an *existing* optimistic layer (using the refetchQueries\n        // updateCache function), since that would potentially interfere with\n        // other optimistic updates in progress. Instead, you can read/write\n        // only the root layer by passing optimistic: false to refetchQueries,\n        // or you can read/write a brand new optimistic layer that will be\n        // automatically removed by passing optimistic: true.\n        optimistic: optimistic && removeOptimistic || false,\n        // The removeOptimistic option can also be provided by itself, even if\n        // optimistic === false, to remove some previously-added optimistic\n        // layer safely and efficiently, like we do in markMutationResult.\n        //\n        // If an explicit removeOptimistic string is provided with optimistic:\n        // true, the removeOptimistic string will determine the ID of the\n        // temporary optimistic layer, in case that ever matters.\n        removeOptimistic: removeOptimistic,\n        onWatchUpdated: function (watch, diff, lastDiff) {\n          var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n          if (oq) {\n            if (onQueryUpdated) {\n              // Since we're about to handle this query now, remove it from\n              // includedQueriesById, in case it was added earlier because of\n              // options.include.\n              includedQueriesById.delete(oq.queryId);\n              var result = onQueryUpdated(oq, diff, lastDiff);\n              if (result === true) {\n                // The onQueryUpdated function requested the default refetching\n                // behavior by returning true.\n                result = oq.refetch();\n              }\n              // Record the result in the results Map, as long as onQueryUpdated\n              // did not return false to skip/ignore this result.\n              if (result !== false) {\n                results.set(oq, result);\n              }\n              // Allow the default cache broadcast to happen, except when\n              // onQueryUpdated returns false.\n              return result;\n            }\n            if (onQueryUpdated !== null) {\n              // If we don't have an onQueryUpdated function, and onQueryUpdated\n              // was not disabled by passing null, make sure this query is\n              // \"included\" like any other options.include-specified query.\n              includedQueriesById.set(oq.queryId, {\n                oq: oq,\n                lastDiff: lastDiff,\n                diff: diff\n              });\n            }\n          }\n        }\n      });\n    }\n    if (includedQueriesById.size) {\n      includedQueriesById.forEach(function (_a, queryId) {\n        var oq = _a.oq,\n          lastDiff = _a.lastDiff,\n          diff = _a.diff;\n        var result;\n        // If onQueryUpdated is provided, we want to use it for all included\n        // queries, even the QueryOptions ones.\n        if (onQueryUpdated) {\n          if (!diff) {\n            var info = oq[\"queryInfo\"];\n            info.reset(); // Force info.getDiff() to read from cache.\n            diff = info.getDiff();\n          }\n          result = onQueryUpdated(oq, diff, lastDiff);\n        }\n        // Otherwise, we fall back to refetching.\n        if (!onQueryUpdated || result === true) {\n          result = oq.refetch();\n        }\n        if (result !== false) {\n          results.set(oq, result);\n        }\n        if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n          _this.stopQueryNoBroadcast(queryId);\n        }\n      });\n    }\n    if (removeOptimistic) {\n      // In case no updateCache callback was provided (so cache.batch was not\n      // called above, and thus did not already remove the optimistic layer),\n      // remove it here. Since this is a no-op when the layer has already been\n      // removed, we do it even if we called cache.batch above, since it's\n      // possible this.cache is an instance of some ApolloCache subclass other\n      // than InMemoryCache, and does not fully support the removeOptimistic\n      // option for cache.batch.\n      this.cache.removeOptimistic(removeOptimistic);\n    }\n    return results;\n  };\n  QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a,\n  // The initial networkStatus for this fetch, most often\n  // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n  // or setVariables.\n  networkStatus) {\n    var _this = this;\n    var query = _a.query,\n      variables = _a.variables,\n      fetchPolicy = _a.fetchPolicy,\n      refetchWritePolicy = _a.refetchWritePolicy,\n      errorPolicy = _a.errorPolicy,\n      returnPartialData = _a.returnPartialData,\n      context = _a.context,\n      notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n    var oldNetworkStatus = queryInfo.networkStatus;\n    queryInfo.init({\n      document: query,\n      variables: variables,\n      networkStatus: networkStatus\n    });\n    var readCache = function () {\n      return queryInfo.getDiff();\n    };\n    var resultsFromCache = function (diff, networkStatus) {\n      if (networkStatus === void 0) {\n        networkStatus = queryInfo.networkStatus || NetworkStatus.loading;\n      }\n      var data = diff.result;\n      if (globalThis.__DEV__ !== false && !returnPartialData && !equal(data, {})) {\n        logMissingFieldErrors(diff.missing);\n      }\n      var fromData = function (data) {\n        return Observable.of(__assign({\n          data: data,\n          loading: isNetworkRequestInFlight(networkStatus),\n          networkStatus: networkStatus\n        }, diff.complete ? null : {\n          partial: true\n        }));\n      };\n      if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n        return _this.localState.runResolvers({\n          document: query,\n          remoteResult: {\n            data: data\n          },\n          context: context,\n          variables: variables,\n          onlyRunForcedResolvers: true\n        }).then(function (resolved) {\n          return fromData(resolved.data || void 0);\n        });\n      }\n      // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n      // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n      // data was incorrectly returned from the cache on refetch:\n      // if diff.missing exists, we should not return cache data.\n      if (errorPolicy === \"none\" && networkStatus === NetworkStatus.refetch && Array.isArray(diff.missing)) {\n        return fromData(void 0);\n      }\n      return fromData(data);\n    };\n    var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 /* CacheWriteBehavior.FORBID */\n    // Watched queries must opt into overwriting existing data on refetch,\n    // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n    : networkStatus === NetworkStatus.refetch && refetchWritePolicy !== \"merge\" ? 1 /* CacheWriteBehavior.OVERWRITE */ : 2 /* CacheWriteBehavior.MERGE */;\n    var resultsFromLink = function () {\n      return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n        query: query,\n        variables: variables,\n        context: context,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy\n      });\n    };\n    var shouldNotify = notifyOnNetworkStatusChange && typeof oldNetworkStatus === \"number\" && oldNetworkStatus !== networkStatus && isNetworkRequestInFlight(networkStatus);\n    switch (fetchPolicy) {\n      default:\n      case \"cache-first\":\n        {\n          var diff = readCache();\n          if (diff.complete) {\n            return {\n              fromLink: false,\n              sources: [resultsFromCache(diff, queryInfo.markReady())]\n            };\n          }\n          if (returnPartialData || shouldNotify) {\n            return {\n              fromLink: true,\n              sources: [resultsFromCache(diff), resultsFromLink()]\n            };\n          }\n          return {\n            fromLink: true,\n            sources: [resultsFromLink()]\n          };\n        }\n      case \"cache-and-network\":\n        {\n          var diff = readCache();\n          if (diff.complete || returnPartialData || shouldNotify) {\n            return {\n              fromLink: true,\n              sources: [resultsFromCache(diff), resultsFromLink()]\n            };\n          }\n          return {\n            fromLink: true,\n            sources: [resultsFromLink()]\n          };\n        }\n      case \"cache-only\":\n        return {\n          fromLink: false,\n          sources: [resultsFromCache(readCache(), queryInfo.markReady())]\n        };\n      case \"network-only\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            sources: [resultsFromCache(readCache()), resultsFromLink()]\n          };\n        }\n        return {\n          fromLink: true,\n          sources: [resultsFromLink()]\n        };\n      case \"no-cache\":\n        if (shouldNotify) {\n          return {\n            fromLink: true,\n            // Note that queryInfo.getDiff() for no-cache queries does not call\n            // cache.diff, but instead returns a { complete: false } stub result\n            // when there is no queryInfo.diff already defined.\n            sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()]\n          };\n        }\n        return {\n          fromLink: true,\n          sources: [resultsFromLink()]\n        };\n      case \"standby\":\n        return {\n          fromLink: false,\n          sources: []\n        };\n    }\n  };\n  QueryManager.prototype.getQuery = function (queryId) {\n    if (queryId && !this.queries.has(queryId)) {\n      this.queries.set(queryId, new QueryInfo(this, queryId));\n    }\n    return this.queries.get(queryId);\n  };\n  QueryManager.prototype.prepareContext = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    var newContext = this.localState.prepareContext(context);\n    return __assign(__assign(__assign({}, this.defaultContext), newContext), {\n      clientAwareness: this.clientAwareness\n    });\n  };\n  return QueryManager;\n}();\nexport { QueryManager };","map":{"version":3,"names":["__assign","__awaiter","__generator","invariant","newInvariantError","equal","execute","hasDirectives","isExecutionPatchIncrementalResult","isExecutionPatchResult","removeDirectivesFromDocument","canonicalStringify","getDefaultValues","getOperationDefinition","getOperationName","hasClientExports","graphQLResultHasError","getGraphQLErrorsFromResult","Observable","asyncMap","isNonEmptyArray","Concast","makeUniqueId","isDocumentNode","isNonNullObject","DocumentTransform","mergeIncrementalData","ApolloError","isApolloError","graphQLResultHasProtocolErrors","ObservableQuery","logMissingFieldErrors","NetworkStatus","isNetworkRequestInFlight","QueryInfo","shouldWriteResult","PROTOCOL_ERRORS_SYMBOL","print","hasOwnProperty","Object","prototype","IGNORE","create","Trie","AutoCleanedWeakCache","cacheSizes","QueryManager","options","_this","clientAwareness","queries","Map","fetchCancelFns","transformCache","queryIdCounter","requestIdCounter","mutationIdCounter","inFlightLinkObservables","defaultDocumentTransform","document","cache","transformDocument","link","defaultOptions","queryDeduplication","localState","ssrMode","assumeImmutableResults","documentTransform","concat","defaultContext","onBroadcast","mutationStore","stop","forEach","_info","queryId","stopQueryNoBroadcast","cancelPendingFetches","error","cancel","clear","mutate","_a","arguments","_b","mutationId","mutationStoreValue","isOptimistic","self","_c","_d","mutation","variables","optimisticResponse","updateQueries","_e","refetchQueries","_f","awaitRefetchQueries","updateWithProxyFn","update","onQueryUpdated","_g","fetchPolicy","_h","errorPolicy","keepRootFields","context","_j","label","generateMutationId","transformForLink","transform","getDocumentInfo","getVariables","addExportedVariables","sent","loading","markMutationOptimistic","broadcastQueries","Promise","resolve","reject","getObservableFromLink","result","graphQLErrors","storeResult","errors","markMutationResult","removeOptimistic","subscribe","next","hasNext","err","networkError","cacheWrites","skipCache","push","data","dataId","query","incremental","diff","id","asQuery","optimistic","returnPartialData","mergedData","updateQueries_1","observableQuery","queryName","call","updater","get","currentQueryResult","complete","nextQueryResult","mutationResult","queryVariables","length","results_1","updateCache","write","isFinalResult","modify","fields","value","fieldName","DELETE","include","all","then","recordOptimisticTransaction","globalThis","__DEV__","fetchQuery","networkStatus","fetchConcastWithInfo","concast","promise","getQueryStore","store","info","resetErrors","queryInfo","undefined","has","cacheEntry","hasForcedResolvers","shouldForceResolvers","hasNonreactiveDirective","clientQuery","serverQuery","name","remove","defaultVars","definitions","map","def","kind","operation","set","watchQuery","notifyOnNetworkStatusChange","observable","queryManager","init","generateQueryId","pollInterval","finally","stopQuery","String","generateRequestId","stopQueryInStore","stopQueryInStoreNoBroadcast","clearStore","discardWatches","reset","getObservableQueries","queryNamesAndDocs","legacyQueryOptions","Set","Array","isArray","desc","add","oq","hasObservers","size","getQuery","setObservableQuery","included","nameOrDoc","warn","reFetchObservableQueries","includeStandby","observableQueryPromises","resetLastResults","refetch","setDiff","startGraphQLSubscription","extensions","makeObservable","hasErrors","hasProtocolErrors","protocolErrors","observablePromise_1","observer","sub","unsubscribe","removeQuery","delete","notify","getLocalState","deduplication","inFlightLinkObservables_1","operationName","prepareContext","forceFetch","printedServerQuery_1","varJson_1","entry","lookup","beforeNext","of","runResolvers","remoteResult","getResultsFromLink","cacheWriteBehavior","requestId","lastRequestId","linkDocument","markError","markResult","markReady","aqr","ready","defaults","normalized","assign","fromVariables","sourcesWithInfo","fetchQueryByPolicy","sources","cleanupCancelFn","reason","setTimeout","containsDataFromLink","fromLink","includedQueriesById","lastDiff","getDiff","results","batch","onWatchUpdated","watch","watcher","indexOf","refetchWritePolicy","oldNetworkStatus","readCache","resultsFromCache","missing","fromData","partial","onlyRunForcedResolvers","resolved","resultsFromLink","shouldNotify","newContext"],"sources":["C:/laragon/www/php_projects/scandiweb_store/frontend/node_modules/@apollo/client/core/QueryManager.js"],"sourcesContent":["import { __assign, __awaiter, __generator } from \"tslib\";\nimport { invariant, newInvariantError } from \"../utilities/globals/index.js\";\nimport { equal } from \"@wry/equality\";\nimport { execute } from \"../link/core/index.js\";\nimport { hasDirectives, isExecutionPatchIncrementalResult, isExecutionPatchResult, removeDirectivesFromDocument, } from \"../utilities/index.js\";\nimport { canonicalStringify } from \"../cache/index.js\";\nimport { getDefaultValues, getOperationDefinition, getOperationName, hasClientExports, graphQLResultHasError, getGraphQLErrorsFromResult, Observable, asyncMap, isNonEmptyArray, Concast, makeUniqueId, isDocumentNode, isNonNullObject, DocumentTransform, } from \"../utilities/index.js\";\nimport { mergeIncrementalData } from \"../utilities/common/incrementalResult.js\";\nimport { ApolloError, isApolloError, graphQLResultHasProtocolErrors, } from \"../errors/index.js\";\nimport { ObservableQuery, logMissingFieldErrors } from \"./ObservableQuery.js\";\nimport { NetworkStatus, isNetworkRequestInFlight } from \"./networkStatus.js\";\nimport { QueryInfo, shouldWriteResult, } from \"./QueryInfo.js\";\nimport { PROTOCOL_ERRORS_SYMBOL } from \"../errors/index.js\";\nimport { print } from \"../utilities/index.js\";\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar IGNORE = Object.create(null);\nimport { Trie } from \"@wry/trie\";\nimport { AutoCleanedWeakCache, cacheSizes } from \"../utilities/index.js\";\nvar QueryManager = /** @class */ (function () {\n    function QueryManager(options) {\n        var _this = this;\n        this.clientAwareness = {};\n        // All the queries that the QueryManager is currently managing (not\n        // including mutations and subscriptions).\n        this.queries = new Map();\n        // Maps from queryId strings to Promise rejection functions for\n        // currently active queries and fetches.\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.fetchCancelFns = new Map();\n        this.transformCache = new AutoCleanedWeakCache(cacheSizes[\"queryManager.getDocumentInfo\"] ||\n            2000 /* defaultCacheSizes[\"queryManager.getDocumentInfo\"] */);\n        this.queryIdCounter = 1;\n        this.requestIdCounter = 1;\n        this.mutationIdCounter = 1;\n        // Use protected instead of private field so\n        // @apollo/experimental-nextjs-app-support can access type info.\n        this.inFlightLinkObservables = new Trie(false);\n        var defaultDocumentTransform = new DocumentTransform(function (document) { return _this.cache.transformDocument(document); }, \n        // Allow the apollo cache to manage its own transform caches\n        { cache: false });\n        this.cache = options.cache;\n        this.link = options.link;\n        this.defaultOptions = options.defaultOptions;\n        this.queryDeduplication = options.queryDeduplication;\n        this.clientAwareness = options.clientAwareness;\n        this.localState = options.localState;\n        this.ssrMode = options.ssrMode;\n        this.assumeImmutableResults = options.assumeImmutableResults;\n        var documentTransform = options.documentTransform;\n        this.documentTransform =\n            documentTransform ?\n                defaultDocumentTransform\n                    .concat(documentTransform)\n                    // The custom document transform may add new fragment spreads or new\n                    // field selections, so we want to give the cache a chance to run\n                    // again. For example, the InMemoryCache adds __typename to field\n                    // selections and fragments from the fragment registry.\n                    .concat(defaultDocumentTransform)\n                : defaultDocumentTransform;\n        this.defaultContext = options.defaultContext || Object.create(null);\n        if ((this.onBroadcast = options.onBroadcast)) {\n            this.mutationStore = Object.create(null);\n        }\n    }\n    /**\n     * Call this method to terminate any active query processes, making it safe\n     * to dispose of this QueryManager instance.\n     */\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.cancelPendingFetches(newInvariantError(26));\n    };\n    QueryManager.prototype.cancelPendingFetches = function (error) {\n        this.fetchCancelFns.forEach(function (cancel) { return cancel(error); });\n        this.fetchCancelFns.clear();\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        return __awaiter(this, arguments, void 0, function (_b) {\n            var mutationId, hasClientExports, mutationStoreValue, isOptimistic, self;\n            var _c, _d;\n            var mutation = _b.mutation, variables = _b.variables, optimisticResponse = _b.optimisticResponse, updateQueries = _b.updateQueries, _e = _b.refetchQueries, refetchQueries = _e === void 0 ? [] : _e, _f = _b.awaitRefetchQueries, awaitRefetchQueries = _f === void 0 ? false : _f, updateWithProxyFn = _b.update, onQueryUpdated = _b.onQueryUpdated, _g = _b.fetchPolicy, fetchPolicy = _g === void 0 ? ((_c = this.defaultOptions.mutate) === null || _c === void 0 ? void 0 : _c.fetchPolicy) || \"network-only\" : _g, _h = _b.errorPolicy, errorPolicy = _h === void 0 ? ((_d = this.defaultOptions.mutate) === null || _d === void 0 ? void 0 : _d.errorPolicy) || \"none\" : _h, keepRootFields = _b.keepRootFields, context = _b.context;\n            return __generator(this, function (_j) {\n                switch (_j.label) {\n                    case 0:\n                        invariant(mutation, 27);\n                        invariant(fetchPolicy === \"network-only\" || fetchPolicy === \"no-cache\", 28);\n                        mutationId = this.generateMutationId();\n                        mutation = this.cache.transformForLink(this.transform(mutation));\n                        hasClientExports = this.getDocumentInfo(mutation).hasClientExports;\n                        variables = this.getVariables(mutation, variables);\n                        if (!hasClientExports) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = (_j.sent());\n                        _j.label = 2;\n                    case 2:\n                        mutationStoreValue = this.mutationStore &&\n                            (this.mutationStore[mutationId] = {\n                                mutation: mutation,\n                                variables: variables,\n                                loading: true,\n                                error: null,\n                            });\n                        isOptimistic = optimisticResponse &&\n                            this.markMutationOptimistic(optimisticResponse, {\n                                mutationId: mutationId,\n                                document: mutation,\n                                variables: variables,\n                                fetchPolicy: fetchPolicy,\n                                errorPolicy: errorPolicy,\n                                context: context,\n                                updateQueries: updateQueries,\n                                update: updateWithProxyFn,\n                                keepRootFields: keepRootFields,\n                            });\n                        this.broadcastQueries();\n                        self = this;\n                        return [2 /*return*/, new Promise(function (resolve, reject) {\n                                return asyncMap(self.getObservableFromLink(mutation, __assign(__assign({}, context), { optimisticResponse: isOptimistic ? optimisticResponse : void 0 }), variables, {}, false), function (result) {\n                                    if (graphQLResultHasError(result) && errorPolicy === \"none\") {\n                                        throw new ApolloError({\n                                            graphQLErrors: getGraphQLErrorsFromResult(result),\n                                        });\n                                    }\n                                    if (mutationStoreValue) {\n                                        mutationStoreValue.loading = false;\n                                        mutationStoreValue.error = null;\n                                    }\n                                    var storeResult = __assign({}, result);\n                                    if (typeof refetchQueries === \"function\") {\n                                        refetchQueries = refetchQueries(storeResult);\n                                    }\n                                    if (errorPolicy === \"ignore\" && graphQLResultHasError(storeResult)) {\n                                        delete storeResult.errors;\n                                    }\n                                    return self.markMutationResult({\n                                        mutationId: mutationId,\n                                        result: storeResult,\n                                        document: mutation,\n                                        variables: variables,\n                                        fetchPolicy: fetchPolicy,\n                                        errorPolicy: errorPolicy,\n                                        context: context,\n                                        update: updateWithProxyFn,\n                                        updateQueries: updateQueries,\n                                        awaitRefetchQueries: awaitRefetchQueries,\n                                        refetchQueries: refetchQueries,\n                                        removeOptimistic: isOptimistic ? mutationId : void 0,\n                                        onQueryUpdated: onQueryUpdated,\n                                        keepRootFields: keepRootFields,\n                                    });\n                                }).subscribe({\n                                    next: function (storeResult) {\n                                        self.broadcastQueries();\n                                        // Since mutations might receive multiple payloads from the\n                                        // ApolloLink chain (e.g. when used with @defer),\n                                        // we resolve with a SingleExecutionResult or after the final\n                                        // ExecutionPatchResult has arrived and we have assembled the\n                                        // multipart response into a single result.\n                                        if (!(\"hasNext\" in storeResult) || storeResult.hasNext === false) {\n                                            resolve(storeResult);\n                                        }\n                                    },\n                                    error: function (err) {\n                                        if (mutationStoreValue) {\n                                            mutationStoreValue.loading = false;\n                                            mutationStoreValue.error = err;\n                                        }\n                                        if (isOptimistic) {\n                                            self.cache.removeOptimistic(mutationId);\n                                        }\n                                        self.broadcastQueries();\n                                        reject(err instanceof ApolloError ? err : (new ApolloError({\n                                            networkError: err,\n                                        })));\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markMutationResult = function (mutation, cache) {\n        var _this = this;\n        if (cache === void 0) { cache = this.cache; }\n        var result = mutation.result;\n        var cacheWrites = [];\n        var skipCache = mutation.fetchPolicy === \"no-cache\";\n        if (!skipCache && shouldWriteResult(result, mutation.errorPolicy)) {\n            if (!isExecutionPatchIncrementalResult(result)) {\n                cacheWrites.push({\n                    result: result.data,\n                    dataId: \"ROOT_MUTATION\",\n                    query: mutation.document,\n                    variables: mutation.variables,\n                });\n            }\n            if (isExecutionPatchIncrementalResult(result) &&\n                isNonEmptyArray(result.incremental)) {\n                var diff = cache.diff({\n                    id: \"ROOT_MUTATION\",\n                    // The cache complains if passed a mutation where it expects a\n                    // query, so we transform mutations and subscriptions to queries\n                    // (only once, thanks to this.transformCache).\n                    query: this.getDocumentInfo(mutation.document).asQuery,\n                    variables: mutation.variables,\n                    optimistic: false,\n                    returnPartialData: true,\n                });\n                var mergedData = void 0;\n                if (diff.result) {\n                    mergedData = mergeIncrementalData(diff.result, result);\n                }\n                if (typeof mergedData !== \"undefined\") {\n                    // cast the ExecutionPatchResult to FetchResult here since\n                    // ExecutionPatchResult never has `data` when returned from the server\n                    result.data = mergedData;\n                    cacheWrites.push({\n                        result: mergedData,\n                        dataId: \"ROOT_MUTATION\",\n                        query: mutation.document,\n                        variables: mutation.variables,\n                    });\n                }\n            }\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                this.queries.forEach(function (_a, queryId) {\n                    var observableQuery = _a.observableQuery;\n                    var queryName = observableQuery && observableQuery.queryName;\n                    if (!queryName || !hasOwnProperty.call(updateQueries_1, queryName)) {\n                        return;\n                    }\n                    var updater = updateQueries_1[queryName];\n                    var _b = _this.queries.get(queryId), document = _b.document, variables = _b.variables;\n                    // Read the current query result from the store.\n                    var _c = cache.diff({\n                        query: document,\n                        variables: variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _c.result, complete = _c.complete;\n                    if (complete && currentQueryResult) {\n                        // Run our reducer using the current query result and the mutation result.\n                        var nextQueryResult = updater(currentQueryResult, {\n                            mutationResult: result,\n                            queryName: (document && getOperationName(document)) || void 0,\n                            queryVariables: variables,\n                        });\n                        // Write the modified result back into the store if we got a new result.\n                        if (nextQueryResult) {\n                            cacheWrites.push({\n                                result: nextQueryResult,\n                                dataId: \"ROOT_QUERY\",\n                                query: document,\n                                variables: variables,\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        if (cacheWrites.length > 0 ||\n            (mutation.refetchQueries || \"\").length > 0 ||\n            mutation.update ||\n            mutation.onQueryUpdated ||\n            mutation.removeOptimistic) {\n            var results_1 = [];\n            this.refetchQueries({\n                updateCache: function (cache) {\n                    if (!skipCache) {\n                        cacheWrites.forEach(function (write) { return cache.write(write); });\n                    }\n                    // If the mutation has some writes associated with it then we need to\n                    // apply those writes to the store by running this reducer again with\n                    // a write action.\n                    var update = mutation.update;\n                    // Determine whether result is a SingleExecutionResult,\n                    // or the final ExecutionPatchResult.\n                    var isFinalResult = !isExecutionPatchResult(result) ||\n                        (isExecutionPatchIncrementalResult(result) && !result.hasNext);\n                    if (update) {\n                        if (!skipCache) {\n                            // Re-read the ROOT_MUTATION data we just wrote into the cache\n                            // (the first cache.write call in the cacheWrites.forEach loop\n                            // above), so field read functions have a chance to run for\n                            // fields within mutation result objects.\n                            var diff = cache.diff({\n                                id: \"ROOT_MUTATION\",\n                                // The cache complains if passed a mutation where it expects a\n                                // query, so we transform mutations and subscriptions to queries\n                                // (only once, thanks to this.transformCache).\n                                query: _this.getDocumentInfo(mutation.document).asQuery,\n                                variables: mutation.variables,\n                                optimistic: false,\n                                returnPartialData: true,\n                            });\n                            if (diff.complete) {\n                                result = __assign(__assign({}, result), { data: diff.result });\n                                if (\"incremental\" in result) {\n                                    delete result.incremental;\n                                }\n                                if (\"hasNext\" in result) {\n                                    delete result.hasNext;\n                                }\n                            }\n                        }\n                        // If we've received the whole response,\n                        // either a SingleExecutionResult or the final ExecutionPatchResult,\n                        // call the update function.\n                        if (isFinalResult) {\n                            update(cache, result, {\n                                context: mutation.context,\n                                variables: mutation.variables,\n                            });\n                        }\n                    }\n                    // TODO Do this with cache.evict({ id: 'ROOT_MUTATION' }) but make it\n                    // shallow to allow rolling back optimistic evictions.\n                    if (!skipCache && !mutation.keepRootFields && isFinalResult) {\n                        cache.modify({\n                            id: \"ROOT_MUTATION\",\n                            fields: function (value, _a) {\n                                var fieldName = _a.fieldName, DELETE = _a.DELETE;\n                                return fieldName === \"__typename\" ? value : DELETE;\n                            },\n                        });\n                    }\n                },\n                include: mutation.refetchQueries,\n                // Write the final mutation.result to the root layer of the cache.\n                optimistic: false,\n                // Remove the corresponding optimistic layer at the same time as we\n                // write the final non-optimistic result.\n                removeOptimistic: mutation.removeOptimistic,\n                // Let the caller of client.mutate optionally determine the refetching\n                // behavior for watched queries after the mutation.update function runs.\n                // If no onQueryUpdated function was provided for this mutation, pass\n                // null instead of undefined to disable the default refetching behavior.\n                onQueryUpdated: mutation.onQueryUpdated || null,\n            }).forEach(function (result) { return results_1.push(result); });\n            if (mutation.awaitRefetchQueries || mutation.onQueryUpdated) {\n                // Returning a promise here makes the mutation await that promise, so we\n                // include results in that promise's work if awaitRefetchQueries or an\n                // onQueryUpdated function was specified.\n                return Promise.all(results_1).then(function () { return result; });\n            }\n        }\n        return Promise.resolve(result);\n    };\n    QueryManager.prototype.markMutationOptimistic = function (optimisticResponse, mutation) {\n        var _this = this;\n        var data = typeof optimisticResponse === \"function\" ?\n            optimisticResponse(mutation.variables, { IGNORE: IGNORE })\n            : optimisticResponse;\n        if (data === IGNORE) {\n            return false;\n        }\n        this.cache.recordOptimisticTransaction(function (cache) {\n            try {\n                _this.markMutationResult(__assign(__assign({}, mutation), { result: { data: data } }), cache);\n            }\n            catch (error) {\n                globalThis.__DEV__ !== false && invariant.error(error);\n            }\n        }, mutation.mutationId);\n        return true;\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, networkStatus) {\n        return this.fetchConcastWithInfo(queryId, options, networkStatus).concast\n            .promise;\n    };\n    QueryManager.prototype.getQueryStore = function () {\n        var store = Object.create(null);\n        this.queries.forEach(function (info, queryId) {\n            store[queryId] = {\n                variables: info.variables,\n                networkStatus: info.networkStatus,\n                networkError: info.networkError,\n                graphQLErrors: info.graphQLErrors,\n            };\n        });\n        return store;\n    };\n    QueryManager.prototype.resetErrors = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo) {\n            queryInfo.networkError = undefined;\n            queryInfo.graphQLErrors = [];\n        }\n    };\n    QueryManager.prototype.transform = function (document) {\n        return this.documentTransform.transformDocument(document);\n    };\n    QueryManager.prototype.getDocumentInfo = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var cacheEntry = {\n                // TODO These three calls (hasClientExports, shouldForceResolvers, and\n                // usesNonreactiveDirective) are performing independent full traversals\n                // of the transformed document. We should consider merging these\n                // traversals into a single pass in the future, though the work is\n                // cached after the first time.\n                hasClientExports: hasClientExports(document),\n                hasForcedResolvers: this.localState.shouldForceResolvers(document),\n                hasNonreactiveDirective: hasDirectives([\"nonreactive\"], document),\n                clientQuery: this.localState.clientQuery(document),\n                serverQuery: removeDirectivesFromDocument([\n                    { name: \"client\", remove: true },\n                    { name: \"connection\" },\n                    { name: \"nonreactive\" },\n                ], document),\n                defaultVars: getDefaultValues(getOperationDefinition(document)),\n                // Transform any mutation or subscription operations to query operations\n                // so we can read/write them from/to the cache.\n                asQuery: __assign(__assign({}, document), { definitions: document.definitions.map(function (def) {\n                        if (def.kind === \"OperationDefinition\" &&\n                            def.operation !== \"query\") {\n                            return __assign(__assign({}, def), { operation: \"query\" });\n                        }\n                        return def;\n                    }) }),\n            };\n            transformCache.set(document, cacheEntry);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign(__assign({}, this.getDocumentInfo(document).defaultVars), variables);\n    };\n    QueryManager.prototype.watchQuery = function (options) {\n        var query = this.transform(options.query);\n        // assign variable default values if supplied\n        // NOTE: We don't modify options.query here with the transformed query to\n        // ensure observable.options.query is set to the raw untransformed query.\n        options = __assign(__assign({}, options), { variables: this.getVariables(query, options.variables) });\n        if (typeof options.notifyOnNetworkStatusChange === \"undefined\") {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var queryInfo = new QueryInfo(this);\n        var observable = new ObservableQuery({\n            queryManager: this,\n            queryInfo: queryInfo,\n            options: options,\n        });\n        observable[\"lastQuery\"] = query;\n        this.queries.set(observable.queryId, queryInfo);\n        // We give queryInfo the transformed query to ensure the first cache diff\n        // uses the transformed query instead of the raw query\n        queryInfo.init({\n            document: query,\n            observableQuery: observable,\n            variables: observable.variables,\n        });\n        return observable;\n    };\n    QueryManager.prototype.query = function (options, queryId) {\n        var _this = this;\n        if (queryId === void 0) { queryId = this.generateQueryId(); }\n        invariant(options.query, 29);\n        invariant(options.query.kind === \"Document\", 30);\n        invariant(!options.returnPartialData, 31);\n        invariant(!options.pollInterval, 32);\n        return this.fetchQuery(queryId, __assign(__assign({}, options), { query: this.transform(options.query) })).finally(function () { return _this.stopQuery(queryId); });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.queryIdCounter++);\n    };\n    QueryManager.prototype.generateRequestId = function () {\n        return this.requestIdCounter++;\n    };\n    QueryManager.prototype.generateMutationId = function () {\n        return String(this.mutationIdCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        var queryInfo = this.queries.get(queryId);\n        if (queryInfo)\n            queryInfo.stop();\n    };\n    QueryManager.prototype.clearStore = function (options) {\n        if (options === void 0) { options = {\n            discardWatches: true,\n        }; }\n        // Before we have sent the reset action to the store, we can no longer\n        // rely on the results returned by in-flight requests since these may\n        // depend on values that previously existed in the data portion of the\n        // store. So, we cancel the promises and observers that we have issued\n        // so far and not yet resolved (in the case of queries).\n        this.cancelPendingFetches(newInvariantError(33));\n        this.queries.forEach(function (queryInfo) {\n            if (queryInfo.observableQuery) {\n                // Set loading to true so listeners don't trigger unless they want\n                // results with partial data.\n                queryInfo.networkStatus = NetworkStatus.loading;\n            }\n            else {\n                queryInfo.stop();\n            }\n        });\n        if (this.mutationStore) {\n            this.mutationStore = Object.create(null);\n        }\n        // begin removing data from the store\n        return this.cache.reset(options);\n    };\n    QueryManager.prototype.getObservableQueries = function (include) {\n        var _this = this;\n        if (include === void 0) { include = \"active\"; }\n        var queries = new Map();\n        var queryNamesAndDocs = new Map();\n        var legacyQueryOptions = new Set();\n        if (Array.isArray(include)) {\n            include.forEach(function (desc) {\n                if (typeof desc === \"string\") {\n                    queryNamesAndDocs.set(desc, false);\n                }\n                else if (isDocumentNode(desc)) {\n                    queryNamesAndDocs.set(_this.transform(desc), false);\n                }\n                else if (isNonNullObject(desc) && desc.query) {\n                    legacyQueryOptions.add(desc);\n                }\n            });\n        }\n        this.queries.forEach(function (_a, queryId) {\n            var oq = _a.observableQuery, document = _a.document;\n            if (oq) {\n                if (include === \"all\") {\n                    queries.set(queryId, oq);\n                    return;\n                }\n                var queryName = oq.queryName, fetchPolicy = oq.options.fetchPolicy;\n                if (fetchPolicy === \"standby\" ||\n                    (include === \"active\" && !oq.hasObservers())) {\n                    return;\n                }\n                if (include === \"active\" ||\n                    (queryName && queryNamesAndDocs.has(queryName)) ||\n                    (document && queryNamesAndDocs.has(document))) {\n                    queries.set(queryId, oq);\n                    if (queryName)\n                        queryNamesAndDocs.set(queryName, true);\n                    if (document)\n                        queryNamesAndDocs.set(document, true);\n                }\n            }\n        });\n        if (legacyQueryOptions.size) {\n            legacyQueryOptions.forEach(function (options) {\n                // We will be issuing a fresh network request for this query, so we\n                // pre-allocate a new query ID here, using a special prefix to enable\n                // cleaning up these temporary queries later, after fetching.\n                var queryId = makeUniqueId(\"legacyOneTimeQuery\");\n                var queryInfo = _this.getQuery(queryId).init({\n                    document: options.query,\n                    variables: options.variables,\n                });\n                var oq = new ObservableQuery({\n                    queryManager: _this,\n                    queryInfo: queryInfo,\n                    options: __assign(__assign({}, options), { fetchPolicy: \"network-only\" }),\n                });\n                invariant(oq.queryId === queryId);\n                queryInfo.setObservableQuery(oq);\n                queries.set(queryId, oq);\n            });\n        }\n        if (globalThis.__DEV__ !== false && queryNamesAndDocs.size) {\n            queryNamesAndDocs.forEach(function (included, nameOrDoc) {\n                if (!included) {\n                    globalThis.__DEV__ !== false && invariant.warn(typeof nameOrDoc === \"string\" ? 34 : 35, nameOrDoc);\n                }\n            });\n        }\n        return queries;\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.getObservableQueries(includeStandby ? \"all\" : \"active\").forEach(function (observableQuery, queryId) {\n            var fetchPolicy = observableQuery.options.fetchPolicy;\n            observableQuery.resetLastResults();\n            if (includeStandby ||\n                (fetchPolicy !== \"standby\" && fetchPolicy !== \"cache-only\")) {\n                observableQueryPromises.push(observableQuery.refetch());\n            }\n            _this.getQuery(queryId).setDiff(null);\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.setObservableQuery = function (observableQuery) {\n        this.getQuery(observableQuery.queryId).setObservableQuery(observableQuery);\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, _b = _a.errorPolicy, errorPolicy = _b === void 0 ? \"none\" : _b, variables = _a.variables, _c = _a.context, context = _c === void 0 ? {} : _c, _d = _a.extensions, extensions = _d === void 0 ? {} : _d;\n        query = this.transform(query);\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, context, variables, extensions).map(function (result) {\n                if (fetchPolicy !== \"no-cache\") {\n                    // the subscription interface should handle not sending us results we no longer subscribe to.\n                    // XXX I don't think we ever send in an object with errors, but we might in the future...\n                    if (shouldWriteResult(result, errorPolicy)) {\n                        _this.cache.write({\n                            query: query,\n                            result: result.data,\n                            dataId: \"ROOT_SUBSCRIPTION\",\n                            variables: variables,\n                        });\n                    }\n                    _this.broadcastQueries();\n                }\n                var hasErrors = graphQLResultHasError(result);\n                var hasProtocolErrors = graphQLResultHasProtocolErrors(result);\n                if (hasErrors || hasProtocolErrors) {\n                    var errors = {};\n                    if (hasErrors) {\n                        errors.graphQLErrors = result.errors;\n                    }\n                    if (hasProtocolErrors) {\n                        errors.protocolErrors = result.extensions[PROTOCOL_ERRORS_SYMBOL];\n                    }\n                    // `errorPolicy` is a mechanism for handling GraphQL errors, according\n                    // to our documentation, so we throw protocol errors regardless of the\n                    // set error policy.\n                    if (errorPolicy === \"none\" || hasProtocolErrors) {\n                        throw new ApolloError(errors);\n                    }\n                }\n                if (errorPolicy === \"ignore\") {\n                    delete result.errors;\n                }\n                return result;\n            });\n        };\n        if (this.getDocumentInfo(query).hasClientExports) {\n            var observablePromise_1 = this.localState\n                .addExportedVariables(query, variables, context)\n                .then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return (sub = observable.subscribe(observer)); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        // teardown all links\n        // Both `QueryManager.fetchRequest` and `QueryManager.query` create separate promises\n        // that each add their reject functions to fetchCancelFns.\n        // A query created with `QueryManager.query()` could trigger a `QueryManager.fetchRequest`.\n        // The same queryId could have two rejection fns for two promises\n        this.fetchCancelFns.delete(queryId);\n        if (this.queries.has(queryId)) {\n            this.getQuery(queryId).stop();\n            this.queries.delete(queryId);\n        }\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        if (this.onBroadcast)\n            this.onBroadcast();\n        this.queries.forEach(function (info) { return info.notify(); });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, extensions, \n    // Prefer context.queryDeduplication if specified.\n    deduplication) {\n        var _this = this;\n        var _a;\n        if (deduplication === void 0) { deduplication = (_a = context === null || context === void 0 ? void 0 : context.queryDeduplication) !== null && _a !== void 0 ? _a : this.queryDeduplication; }\n        var observable;\n        var _b = this.getDocumentInfo(query), serverQuery = _b.serverQuery, clientQuery = _b.clientQuery;\n        if (serverQuery) {\n            var _c = this, inFlightLinkObservables_1 = _c.inFlightLinkObservables, link = _c.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign(__assign({}, context), { forceFetch: !deduplication })),\n                extensions: extensions,\n            };\n            context = operation.context;\n            if (deduplication) {\n                var printedServerQuery_1 = print(serverQuery);\n                var varJson_1 = canonicalStringify(variables);\n                var entry = inFlightLinkObservables_1.lookup(printedServerQuery_1, varJson_1);\n                observable = entry.observable;\n                if (!observable) {\n                    var concast = new Concast([\n                        execute(link, operation),\n                    ]);\n                    observable = entry.observable = concast;\n                    concast.beforeNext(function () {\n                        inFlightLinkObservables_1.remove(printedServerQuery_1, varJson_1);\n                    });\n                }\n            }\n            else {\n                observable = new Concast([\n                    execute(link, operation),\n                ]);\n            }\n        }\n        else {\n            observable = new Concast([Observable.of({ data: {} })]);\n            context = this.prepareContext(context);\n        }\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.getResultsFromLink = function (queryInfo, cacheWriteBehavior, options) {\n        var requestId = (queryInfo.lastRequestId = this.generateRequestId());\n        // Performing transformForLink here gives this.cache a chance to fill in\n        // missing fragment definitions (for example) before sending this document\n        // through the link chain.\n        var linkDocument = this.cache.transformForLink(options.query);\n        return asyncMap(this.getObservableFromLink(linkDocument, options.context, options.variables), function (result) {\n            var graphQLErrors = getGraphQLErrorsFromResult(result);\n            var hasErrors = graphQLErrors.length > 0;\n            var errorPolicy = options.errorPolicy;\n            // If we interrupted this request by calling getResultsFromLink again\n            // with the same QueryInfo object, we ignore the old results.\n            if (requestId >= queryInfo.lastRequestId) {\n                if (hasErrors && errorPolicy === \"none\") {\n                    // Throwing here effectively calls observer.error.\n                    throw queryInfo.markError(new ApolloError({\n                        graphQLErrors: graphQLErrors,\n                    }));\n                }\n                // Use linkDocument rather than queryInfo.document so the\n                // operation/fragments used to write the result are the same as the\n                // ones used to obtain it from the link.\n                queryInfo.markResult(result, linkDocument, options, cacheWriteBehavior);\n                queryInfo.markReady();\n            }\n            var aqr = {\n                data: result.data,\n                loading: false,\n                networkStatus: NetworkStatus.ready,\n            };\n            // In the case we start multiple network requests simulatenously, we\n            // want to ensure we properly set `data` if we're reporting on an old\n            // result which will not be caught by the conditional above that ends up\n            // throwing the markError result.\n            if (hasErrors && errorPolicy === \"none\") {\n                aqr.data = void 0;\n            }\n            if (hasErrors && errorPolicy !== \"ignore\") {\n                aqr.errors = graphQLErrors;\n                aqr.networkStatus = NetworkStatus.error;\n            }\n            return aqr;\n        }, function (networkError) {\n            var error = isApolloError(networkError) ? networkError : (new ApolloError({ networkError: networkError }));\n            // Avoid storing errors from older interrupted queries.\n            if (requestId >= queryInfo.lastRequestId) {\n                queryInfo.markError(error);\n            }\n            throw error;\n        });\n    };\n    QueryManager.prototype.fetchConcastWithInfo = function (queryId, options, \n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus, query) {\n        var _this = this;\n        if (networkStatus === void 0) { networkStatus = NetworkStatus.loading; }\n        if (query === void 0) { query = options.query; }\n        var variables = this.getVariables(query, options.variables);\n        var queryInfo = this.getQuery(queryId);\n        var defaults = this.defaultOptions.watchQuery;\n        var _a = options.fetchPolicy, fetchPolicy = _a === void 0 ? (defaults && defaults.fetchPolicy) || \"cache-first\" : _a, _b = options.errorPolicy, errorPolicy = _b === void 0 ? (defaults && defaults.errorPolicy) || \"none\" : _b, _c = options.returnPartialData, returnPartialData = _c === void 0 ? false : _c, _d = options.notifyOnNetworkStatusChange, notifyOnNetworkStatusChange = _d === void 0 ? false : _d, _e = options.context, context = _e === void 0 ? {} : _e;\n        var normalized = Object.assign({}, options, {\n            query: query,\n            variables: variables,\n            fetchPolicy: fetchPolicy,\n            errorPolicy: errorPolicy,\n            returnPartialData: returnPartialData,\n            notifyOnNetworkStatusChange: notifyOnNetworkStatusChange,\n            context: context,\n        });\n        var fromVariables = function (variables) {\n            // Since normalized is always a fresh copy of options, it's safe to\n            // modify its properties here, rather than creating yet another new\n            // WatchQueryOptions object.\n            normalized.variables = variables;\n            var sourcesWithInfo = _this.fetchQueryByPolicy(queryInfo, normalized, networkStatus);\n            if (\n            // If we're in standby, postpone advancing options.fetchPolicy using\n            // applyNextFetchPolicy.\n            normalized.fetchPolicy !== \"standby\" &&\n                // The \"standby\" policy currently returns [] from fetchQueryByPolicy, so\n                // this is another way to detect when nothing was done/fetched.\n                sourcesWithInfo.sources.length > 0 &&\n                queryInfo.observableQuery) {\n                queryInfo.observableQuery[\"applyNextFetchPolicy\"](\"after-fetch\", options);\n            }\n            return sourcesWithInfo;\n        };\n        // This cancel function needs to be set before the concast is created,\n        // in case concast creation synchronously cancels the request.\n        var cleanupCancelFn = function () { return _this.fetchCancelFns.delete(queryId); };\n        this.fetchCancelFns.set(queryId, function (reason) {\n            cleanupCancelFn();\n            // This delay ensures the concast variable has been initialized.\n            setTimeout(function () { return concast.cancel(reason); });\n        });\n        var concast, containsDataFromLink;\n        // If the query has @export(as: ...) directives, then we need to\n        // process those directives asynchronously. When there are no\n        // @export directives (the common case), we deliberately avoid\n        // wrapping the result of this.fetchQueryByPolicy in a Promise,\n        // since the timing of result delivery is (unfortunately) important\n        // for backwards compatibility. TODO This code could be simpler if\n        // we deprecated and removed LocalState.\n        if (this.getDocumentInfo(normalized.query).hasClientExports) {\n            concast = new Concast(this.localState\n                .addExportedVariables(normalized.query, normalized.variables, normalized.context)\n                .then(fromVariables)\n                .then(function (sourcesWithInfo) { return sourcesWithInfo.sources; }));\n            // there is just no way we can synchronously get the *right* value here,\n            // so we will assume `true`, which is the behaviour before the bug fix in\n            // #10597. This means that bug is not fixed in that case, and is probably\n            // un-fixable with reasonable effort for the edge case of @export as\n            // directives.\n            containsDataFromLink = true;\n        }\n        else {\n            var sourcesWithInfo = fromVariables(normalized.variables);\n            containsDataFromLink = sourcesWithInfo.fromLink;\n            concast = new Concast(sourcesWithInfo.sources);\n        }\n        concast.promise.then(cleanupCancelFn, cleanupCancelFn);\n        return {\n            concast: concast,\n            fromLink: containsDataFromLink,\n        };\n    };\n    QueryManager.prototype.refetchQueries = function (_a) {\n        var _this = this;\n        var updateCache = _a.updateCache, include = _a.include, _b = _a.optimistic, optimistic = _b === void 0 ? false : _b, _c = _a.removeOptimistic, removeOptimistic = _c === void 0 ? optimistic ? makeUniqueId(\"refetchQueries\") : void 0 : _c, onQueryUpdated = _a.onQueryUpdated;\n        var includedQueriesById = new Map();\n        if (include) {\n            this.getObservableQueries(include).forEach(function (oq, queryId) {\n                includedQueriesById.set(queryId, {\n                    oq: oq,\n                    lastDiff: _this.getQuery(queryId).getDiff(),\n                });\n            });\n        }\n        var results = new Map();\n        if (updateCache) {\n            this.cache.batch({\n                update: updateCache,\n                // Since you can perform any combination of cache reads and/or writes in\n                // the cache.batch update function, its optimistic option can be either\n                // a boolean or a string, representing three distinct modes of\n                // operation:\n                //\n                // * false: read/write only the root layer\n                // * true: read/write the topmost layer\n                // * string: read/write a fresh optimistic layer with that ID string\n                //\n                // When typeof optimistic === \"string\", a new optimistic layer will be\n                // temporarily created within cache.batch with that string as its ID. If\n                // we then pass that same string as the removeOptimistic option, we can\n                // make cache.batch immediately remove the optimistic layer after\n                // running the updateCache function, triggering only one broadcast.\n                //\n                // However, the refetchQueries method accepts only true or false for its\n                // optimistic option (not string). We interpret true to mean a temporary\n                // optimistic layer should be created, to allow efficiently rolling back\n                // the effect of the updateCache function, which involves passing a\n                // string instead of true as the optimistic option to cache.batch, when\n                // refetchQueries receives optimistic: true.\n                //\n                // In other words, we are deliberately not supporting the use case of\n                // writing to an *existing* optimistic layer (using the refetchQueries\n                // updateCache function), since that would potentially interfere with\n                // other optimistic updates in progress. Instead, you can read/write\n                // only the root layer by passing optimistic: false to refetchQueries,\n                // or you can read/write a brand new optimistic layer that will be\n                // automatically removed by passing optimistic: true.\n                optimistic: (optimistic && removeOptimistic) || false,\n                // The removeOptimistic option can also be provided by itself, even if\n                // optimistic === false, to remove some previously-added optimistic\n                // layer safely and efficiently, like we do in markMutationResult.\n                //\n                // If an explicit removeOptimistic string is provided with optimistic:\n                // true, the removeOptimistic string will determine the ID of the\n                // temporary optimistic layer, in case that ever matters.\n                removeOptimistic: removeOptimistic,\n                onWatchUpdated: function (watch, diff, lastDiff) {\n                    var oq = watch.watcher instanceof QueryInfo && watch.watcher.observableQuery;\n                    if (oq) {\n                        if (onQueryUpdated) {\n                            // Since we're about to handle this query now, remove it from\n                            // includedQueriesById, in case it was added earlier because of\n                            // options.include.\n                            includedQueriesById.delete(oq.queryId);\n                            var result = onQueryUpdated(oq, diff, lastDiff);\n                            if (result === true) {\n                                // The onQueryUpdated function requested the default refetching\n                                // behavior by returning true.\n                                result = oq.refetch();\n                            }\n                            // Record the result in the results Map, as long as onQueryUpdated\n                            // did not return false to skip/ignore this result.\n                            if (result !== false) {\n                                results.set(oq, result);\n                            }\n                            // Allow the default cache broadcast to happen, except when\n                            // onQueryUpdated returns false.\n                            return result;\n                        }\n                        if (onQueryUpdated !== null) {\n                            // If we don't have an onQueryUpdated function, and onQueryUpdated\n                            // was not disabled by passing null, make sure this query is\n                            // \"included\" like any other options.include-specified query.\n                            includedQueriesById.set(oq.queryId, { oq: oq, lastDiff: lastDiff, diff: diff });\n                        }\n                    }\n                },\n            });\n        }\n        if (includedQueriesById.size) {\n            includedQueriesById.forEach(function (_a, queryId) {\n                var oq = _a.oq, lastDiff = _a.lastDiff, diff = _a.diff;\n                var result;\n                // If onQueryUpdated is provided, we want to use it for all included\n                // queries, even the QueryOptions ones.\n                if (onQueryUpdated) {\n                    if (!diff) {\n                        var info = oq[\"queryInfo\"];\n                        info.reset(); // Force info.getDiff() to read from cache.\n                        diff = info.getDiff();\n                    }\n                    result = onQueryUpdated(oq, diff, lastDiff);\n                }\n                // Otherwise, we fall back to refetching.\n                if (!onQueryUpdated || result === true) {\n                    result = oq.refetch();\n                }\n                if (result !== false) {\n                    results.set(oq, result);\n                }\n                if (queryId.indexOf(\"legacyOneTimeQuery\") >= 0) {\n                    _this.stopQueryNoBroadcast(queryId);\n                }\n            });\n        }\n        if (removeOptimistic) {\n            // In case no updateCache callback was provided (so cache.batch was not\n            // called above, and thus did not already remove the optimistic layer),\n            // remove it here. Since this is a no-op when the layer has already been\n            // removed, we do it even if we called cache.batch above, since it's\n            // possible this.cache is an instance of some ApolloCache subclass other\n            // than InMemoryCache, and does not fully support the removeOptimistic\n            // option for cache.batch.\n            this.cache.removeOptimistic(removeOptimistic);\n        }\n        return results;\n    };\n    QueryManager.prototype.fetchQueryByPolicy = function (queryInfo, _a, \n    // The initial networkStatus for this fetch, most often\n    // NetworkStatus.loading, but also possibly fetchMore, poll, refetch,\n    // or setVariables.\n    networkStatus) {\n        var _this = this;\n        var query = _a.query, variables = _a.variables, fetchPolicy = _a.fetchPolicy, refetchWritePolicy = _a.refetchWritePolicy, errorPolicy = _a.errorPolicy, returnPartialData = _a.returnPartialData, context = _a.context, notifyOnNetworkStatusChange = _a.notifyOnNetworkStatusChange;\n        var oldNetworkStatus = queryInfo.networkStatus;\n        queryInfo.init({\n            document: query,\n            variables: variables,\n            networkStatus: networkStatus,\n        });\n        var readCache = function () { return queryInfo.getDiff(); };\n        var resultsFromCache = function (diff, networkStatus) {\n            if (networkStatus === void 0) { networkStatus = queryInfo.networkStatus || NetworkStatus.loading; }\n            var data = diff.result;\n            if (globalThis.__DEV__ !== false && !returnPartialData && !equal(data, {})) {\n                logMissingFieldErrors(diff.missing);\n            }\n            var fromData = function (data) {\n                return Observable.of(__assign({ data: data, loading: isNetworkRequestInFlight(networkStatus), networkStatus: networkStatus }, (diff.complete ? null : { partial: true })));\n            };\n            if (data && _this.getDocumentInfo(query).hasForcedResolvers) {\n                return _this.localState\n                    .runResolvers({\n                    document: query,\n                    remoteResult: { data: data },\n                    context: context,\n                    variables: variables,\n                    onlyRunForcedResolvers: true,\n                })\n                    .then(function (resolved) { return fromData(resolved.data || void 0); });\n            }\n            // Resolves https://github.com/apollographql/apollo-client/issues/10317.\n            // If errorPolicy is 'none' and notifyOnNetworkStatusChange is true,\n            // data was incorrectly returned from the cache on refetch:\n            // if diff.missing exists, we should not return cache data.\n            if (errorPolicy === \"none\" &&\n                networkStatus === NetworkStatus.refetch &&\n                Array.isArray(diff.missing)) {\n                return fromData(void 0);\n            }\n            return fromData(data);\n        };\n        var cacheWriteBehavior = fetchPolicy === \"no-cache\" ? 0 /* CacheWriteBehavior.FORBID */\n            // Watched queries must opt into overwriting existing data on refetch,\n            // by passing refetchWritePolicy: \"overwrite\" in their WatchQueryOptions.\n            : (networkStatus === NetworkStatus.refetch &&\n                refetchWritePolicy !== \"merge\") ?\n                1 /* CacheWriteBehavior.OVERWRITE */\n                : 2 /* CacheWriteBehavior.MERGE */;\n        var resultsFromLink = function () {\n            return _this.getResultsFromLink(queryInfo, cacheWriteBehavior, {\n                query: query,\n                variables: variables,\n                context: context,\n                fetchPolicy: fetchPolicy,\n                errorPolicy: errorPolicy,\n            });\n        };\n        var shouldNotify = notifyOnNetworkStatusChange &&\n            typeof oldNetworkStatus === \"number\" &&\n            oldNetworkStatus !== networkStatus &&\n            isNetworkRequestInFlight(networkStatus);\n        switch (fetchPolicy) {\n            default:\n            case \"cache-first\": {\n                var diff = readCache();\n                if (diff.complete) {\n                    return {\n                        fromLink: false,\n                        sources: [resultsFromCache(diff, queryInfo.markReady())],\n                    };\n                }\n                if (returnPartialData || shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [resultsFromCache(diff), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            }\n            case \"cache-and-network\": {\n                var diff = readCache();\n                if (diff.complete || returnPartialData || shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [resultsFromCache(diff), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            }\n            case \"cache-only\":\n                return {\n                    fromLink: false,\n                    sources: [resultsFromCache(readCache(), queryInfo.markReady())],\n                };\n            case \"network-only\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        sources: [resultsFromCache(readCache()), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            case \"no-cache\":\n                if (shouldNotify) {\n                    return {\n                        fromLink: true,\n                        // Note that queryInfo.getDiff() for no-cache queries does not call\n                        // cache.diff, but instead returns a { complete: false } stub result\n                        // when there is no queryInfo.diff already defined.\n                        sources: [resultsFromCache(queryInfo.getDiff()), resultsFromLink()],\n                    };\n                }\n                return { fromLink: true, sources: [resultsFromLink()] };\n            case \"standby\":\n                return { fromLink: false, sources: [] };\n        }\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        if (queryId && !this.queries.has(queryId)) {\n            this.queries.set(queryId, new QueryInfo(this, queryId));\n        }\n        return this.queries.get(queryId);\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign(__assign(__assign({}, this.defaultContext), newContext), { clientAwareness: this.clientAwareness });\n    };\n    return QueryManager;\n}());\nexport { QueryManager };\n//# sourceMappingURL=QueryManager.js.map"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACxD,SAASC,SAAS,EAAEC,iBAAiB,QAAQ,+BAA+B;AAC5E,SAASC,KAAK,QAAQ,eAAe;AACrC,SAASC,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,aAAa,EAAEC,iCAAiC,EAAEC,sBAAsB,EAAEC,4BAA4B,QAAS,uBAAuB;AAC/I,SAASC,kBAAkB,QAAQ,mBAAmB;AACtD,SAASC,gBAAgB,EAAEC,sBAAsB,EAAEC,gBAAgB,EAAEC,gBAAgB,EAAEC,qBAAqB,EAAEC,0BAA0B,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,eAAe,EAAEC,OAAO,EAAEC,YAAY,EAAEC,cAAc,EAAEC,eAAe,EAAEC,iBAAiB,QAAS,uBAAuB;AAC1R,SAASC,oBAAoB,QAAQ,0CAA0C;AAC/E,SAASC,WAAW,EAAEC,aAAa,EAAEC,8BAA8B,QAAS,oBAAoB;AAChG,SAASC,eAAe,EAAEC,qBAAqB,QAAQ,sBAAsB;AAC7E,SAASC,aAAa,EAAEC,wBAAwB,QAAQ,oBAAoB;AAC5E,SAASC,SAAS,EAAEC,iBAAiB,QAAS,gBAAgB;AAC9D,SAASC,sBAAsB,QAAQ,oBAAoB;AAC3D,SAASC,KAAK,QAAQ,uBAAuB;AAC7C,IAAIC,cAAc,GAAGC,MAAM,CAACC,SAAS,CAACF,cAAc;AACpD,IAAIG,MAAM,GAAGF,MAAM,CAACG,MAAM,CAAC,IAAI,CAAC;AAChC,SAASC,IAAI,QAAQ,WAAW;AAChC,SAASC,oBAAoB,EAAEC,UAAU,QAAQ,uBAAuB;AACxE,IAAIC,YAAY,GAAG,aAAe,YAAY;EAC1C,SAASA,YAAYA,CAACC,OAAO,EAAE;IAC3B,IAAIC,KAAK,GAAG,IAAI;IAChB,IAAI,CAACC,eAAe,GAAG,CAAC,CAAC;IACzB;IACA;IACA,IAAI,CAACC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;IACxB;IACA;IACA;IACA;IACA,IAAI,CAACC,cAAc,GAAG,IAAID,GAAG,CAAC,CAAC;IAC/B,IAAI,CAACE,cAAc,GAAG,IAAIT,oBAAoB,CAACC,UAAU,CAAC,8BAA8B,CAAC,IACrF,IAAI,CAAC,uDAAuD,CAAC;IACjE,IAAI,CAACS,cAAc,GAAG,CAAC;IACvB,IAAI,CAACC,gBAAgB,GAAG,CAAC;IACzB,IAAI,CAACC,iBAAiB,GAAG,CAAC;IAC1B;IACA;IACA,IAAI,CAACC,uBAAuB,GAAG,IAAId,IAAI,CAAC,KAAK,CAAC;IAC9C,IAAIe,wBAAwB,GAAG,IAAIjC,iBAAiB,CAAC,UAAUkC,QAAQ,EAAE;MAAE,OAAOX,KAAK,CAACY,KAAK,CAACC,iBAAiB,CAACF,QAAQ,CAAC;IAAE,CAAC;IAC5H;IACA;MAAEC,KAAK,EAAE;IAAM,CAAC,CAAC;IACjB,IAAI,CAACA,KAAK,GAAGb,OAAO,CAACa,KAAK;IAC1B,IAAI,CAACE,IAAI,GAAGf,OAAO,CAACe,IAAI;IACxB,IAAI,CAACC,cAAc,GAAGhB,OAAO,CAACgB,cAAc;IAC5C,IAAI,CAACC,kBAAkB,GAAGjB,OAAO,CAACiB,kBAAkB;IACpD,IAAI,CAACf,eAAe,GAAGF,OAAO,CAACE,eAAe;IAC9C,IAAI,CAACgB,UAAU,GAAGlB,OAAO,CAACkB,UAAU;IACpC,IAAI,CAACC,OAAO,GAAGnB,OAAO,CAACmB,OAAO;IAC9B,IAAI,CAACC,sBAAsB,GAAGpB,OAAO,CAACoB,sBAAsB;IAC5D,IAAIC,iBAAiB,GAAGrB,OAAO,CAACqB,iBAAiB;IACjD,IAAI,CAACA,iBAAiB,GAClBA,iBAAiB,GACbV,wBAAwB,CACnBW,MAAM,CAACD,iBAAiB;IACzB;IACA;IACA;IACA;IAAA,CACCC,MAAM,CAACX,wBAAwB,CAAC,GACnCA,wBAAwB;IAClC,IAAI,CAACY,cAAc,GAAGvB,OAAO,CAACuB,cAAc,IAAI/B,MAAM,CAACG,MAAM,CAAC,IAAI,CAAC;IACnE,IAAK,IAAI,CAAC6B,WAAW,GAAGxB,OAAO,CAACwB,WAAW,EAAG;MAC1C,IAAI,CAACC,aAAa,GAAGjC,MAAM,CAACG,MAAM,CAAC,IAAI,CAAC;IAC5C;EACJ;EACA;AACJ;AACA;AACA;EACII,YAAY,CAACN,SAAS,CAACiC,IAAI,GAAG,YAAY;IACtC,IAAIzB,KAAK,GAAG,IAAI;IAChB,IAAI,CAACE,OAAO,CAACwB,OAAO,CAAC,UAAUC,KAAK,EAAEC,OAAO,EAAE;MAC3C5B,KAAK,CAAC6B,oBAAoB,CAACD,OAAO,CAAC;IACvC,CAAC,CAAC;IACF,IAAI,CAACE,oBAAoB,CAAC1E,iBAAiB,CAAC,EAAE,CAAC,CAAC;EACpD,CAAC;EACD0C,YAAY,CAACN,SAAS,CAACsC,oBAAoB,GAAG,UAAUC,KAAK,EAAE;IAC3D,IAAI,CAAC3B,cAAc,CAACsB,OAAO,CAAC,UAAUM,MAAM,EAAE;MAAE,OAAOA,MAAM,CAACD,KAAK,CAAC;IAAE,CAAC,CAAC;IACxE,IAAI,CAAC3B,cAAc,CAAC6B,KAAK,CAAC,CAAC;EAC/B,CAAC;EACDnC,YAAY,CAACN,SAAS,CAAC0C,MAAM,GAAG,UAAUC,EAAE,EAAE;IAC1C,OAAOlF,SAAS,CAAC,IAAI,EAAEmF,SAAS,EAAE,KAAK,CAAC,EAAE,UAAUC,EAAE,EAAE;MACpD,IAAIC,UAAU,EAAEvE,gBAAgB,EAAEwE,kBAAkB,EAAEC,YAAY,EAAEC,IAAI;MACxE,IAAIC,EAAE,EAAEC,EAAE;MACV,IAAIC,QAAQ,GAAGP,EAAE,CAACO,QAAQ;QAAEC,SAAS,GAAGR,EAAE,CAACQ,SAAS;QAAEC,kBAAkB,GAAGT,EAAE,CAACS,kBAAkB;QAAEC,aAAa,GAAGV,EAAE,CAACU,aAAa;QAAEC,EAAE,GAAGX,EAAE,CAACY,cAAc;QAAEA,cAAc,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,EAAE,GAAGA,EAAE;QAAEE,EAAE,GAAGb,EAAE,CAACc,mBAAmB;QAAEA,mBAAmB,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,EAAE;QAAEE,iBAAiB,GAAGf,EAAE,CAACgB,MAAM;QAAEC,cAAc,GAAGjB,EAAE,CAACiB,cAAc;QAAEC,EAAE,GAAGlB,EAAE,CAACmB,WAAW;QAAEA,WAAW,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAACb,EAAE,GAAG,IAAI,CAAC3B,cAAc,CAACmB,MAAM,MAAM,IAAI,IAAIQ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACc,WAAW,KAAK,cAAc,GAAGD,EAAE;QAAEE,EAAE,GAAGpB,EAAE,CAACqB,WAAW;QAAEA,WAAW,GAAGD,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAACd,EAAE,GAAG,IAAI,CAAC5B,cAAc,CAACmB,MAAM,MAAM,IAAI,IAAIS,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACe,WAAW,KAAK,MAAM,GAAGD,EAAE;QAAEE,cAAc,GAAGtB,EAAE,CAACsB,cAAc;QAAEC,OAAO,GAAGvB,EAAE,CAACuB,OAAO;MAC9sB,OAAO1G,WAAW,CAAC,IAAI,EAAE,UAAU2G,EAAE,EAAE;QACnC,QAAQA,EAAE,CAACC,KAAK;UACZ,KAAK,CAAC;YACF3G,SAAS,CAACyF,QAAQ,EAAE,EAAE,CAAC;YACvBzF,SAAS,CAACqG,WAAW,KAAK,cAAc,IAAIA,WAAW,KAAK,UAAU,EAAE,EAAE,CAAC;YAC3ElB,UAAU,GAAG,IAAI,CAACyB,kBAAkB,CAAC,CAAC;YACtCnB,QAAQ,GAAG,IAAI,CAAChC,KAAK,CAACoD,gBAAgB,CAAC,IAAI,CAACC,SAAS,CAACrB,QAAQ,CAAC,CAAC;YAChE7E,gBAAgB,GAAG,IAAI,CAACmG,eAAe,CAACtB,QAAQ,CAAC,CAAC7E,gBAAgB;YAClE8E,SAAS,GAAG,IAAI,CAACsB,YAAY,CAACvB,QAAQ,EAAEC,SAAS,CAAC;YAClD,IAAI,CAAC9E,gBAAgB,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;YAC9C,OAAO,CAAC,CAAC,CAAC,WAAW,IAAI,CAACkD,UAAU,CAACmD,oBAAoB,CAACxB,QAAQ,EAAEC,SAAS,EAAEe,OAAO,CAAC,CAAC;UAC5F,KAAK,CAAC;YACFf,SAAS,GAAIgB,EAAE,CAACQ,IAAI,CAAC,CAAE;YACvBR,EAAE,CAACC,KAAK,GAAG,CAAC;UAChB,KAAK,CAAC;YACFvB,kBAAkB,GAAG,IAAI,CAACf,aAAa,KAClC,IAAI,CAACA,aAAa,CAACc,UAAU,CAAC,GAAG;cAC9BM,QAAQ,EAAEA,QAAQ;cAClBC,SAAS,EAAEA,SAAS;cACpByB,OAAO,EAAE,IAAI;cACbvC,KAAK,EAAE;YACX,CAAC,CAAC;YACNS,YAAY,GAAGM,kBAAkB,IAC7B,IAAI,CAACyB,sBAAsB,CAACzB,kBAAkB,EAAE;cAC5CR,UAAU,EAAEA,UAAU;cACtB3B,QAAQ,EAAEiC,QAAQ;cAClBC,SAAS,EAAEA,SAAS;cACpBW,WAAW,EAAEA,WAAW;cACxBE,WAAW,EAAEA,WAAW;cACxBE,OAAO,EAAEA,OAAO;cAChBb,aAAa,EAAEA,aAAa;cAC5BM,MAAM,EAAED,iBAAiB;cACzBO,cAAc,EAAEA;YACpB,CAAC,CAAC;YACN,IAAI,CAACa,gBAAgB,CAAC,CAAC;YACvB/B,IAAI,GAAG,IAAI;YACX,OAAO,CAAC,CAAC,CAAC,YAAY,IAAIgC,OAAO,CAAC,UAAUC,OAAO,EAAEC,MAAM,EAAE;cACrD,OAAOxG,QAAQ,CAACsE,IAAI,CAACmC,qBAAqB,CAAChC,QAAQ,EAAE5F,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE4G,OAAO,CAAC,EAAE;gBAAEd,kBAAkB,EAAEN,YAAY,GAAGM,kBAAkB,GAAG,KAAK;cAAE,CAAC,CAAC,EAAED,SAAS,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,UAAUgC,MAAM,EAAE;gBAC/L,IAAI7G,qBAAqB,CAAC6G,MAAM,CAAC,IAAInB,WAAW,KAAK,MAAM,EAAE;kBACzD,MAAM,IAAI/E,WAAW,CAAC;oBAClBmG,aAAa,EAAE7G,0BAA0B,CAAC4G,MAAM;kBACpD,CAAC,CAAC;gBACN;gBACA,IAAItC,kBAAkB,EAAE;kBACpBA,kBAAkB,CAAC+B,OAAO,GAAG,KAAK;kBAClC/B,kBAAkB,CAACR,KAAK,GAAG,IAAI;gBACnC;gBACA,IAAIgD,WAAW,GAAG/H,QAAQ,CAAC,CAAC,CAAC,EAAE6H,MAAM,CAAC;gBACtC,IAAI,OAAO5B,cAAc,KAAK,UAAU,EAAE;kBACtCA,cAAc,GAAGA,cAAc,CAAC8B,WAAW,CAAC;gBAChD;gBACA,IAAIrB,WAAW,KAAK,QAAQ,IAAI1F,qBAAqB,CAAC+G,WAAW,CAAC,EAAE;kBAChE,OAAOA,WAAW,CAACC,MAAM;gBAC7B;gBACA,OAAOvC,IAAI,CAACwC,kBAAkB,CAAC;kBAC3B3C,UAAU,EAAEA,UAAU;kBACtBuC,MAAM,EAAEE,WAAW;kBACnBpE,QAAQ,EAAEiC,QAAQ;kBAClBC,SAAS,EAAEA,SAAS;kBACpBW,WAAW,EAAEA,WAAW;kBACxBE,WAAW,EAAEA,WAAW;kBACxBE,OAAO,EAAEA,OAAO;kBAChBP,MAAM,EAAED,iBAAiB;kBACzBL,aAAa,EAAEA,aAAa;kBAC5BI,mBAAmB,EAAEA,mBAAmB;kBACxCF,cAAc,EAAEA,cAAc;kBAC9BiC,gBAAgB,EAAE1C,YAAY,GAAGF,UAAU,GAAG,KAAK,CAAC;kBACpDgB,cAAc,EAAEA,cAAc;kBAC9BK,cAAc,EAAEA;gBACpB,CAAC,CAAC;cACN,CAAC,CAAC,CAACwB,SAAS,CAAC;gBACTC,IAAI,EAAE,SAAAA,CAAUL,WAAW,EAAE;kBACzBtC,IAAI,CAAC+B,gBAAgB,CAAC,CAAC;kBACvB;kBACA;kBACA;kBACA;kBACA;kBACA,IAAI,EAAE,SAAS,IAAIO,WAAW,CAAC,IAAIA,WAAW,CAACM,OAAO,KAAK,KAAK,EAAE;oBAC9DX,OAAO,CAACK,WAAW,CAAC;kBACxB;gBACJ,CAAC;gBACDhD,KAAK,EAAE,SAAAA,CAAUuD,GAAG,EAAE;kBAClB,IAAI/C,kBAAkB,EAAE;oBACpBA,kBAAkB,CAAC+B,OAAO,GAAG,KAAK;oBAClC/B,kBAAkB,CAACR,KAAK,GAAGuD,GAAG;kBAClC;kBACA,IAAI9C,YAAY,EAAE;oBACdC,IAAI,CAAC7B,KAAK,CAACsE,gBAAgB,CAAC5C,UAAU,CAAC;kBAC3C;kBACAG,IAAI,CAAC+B,gBAAgB,CAAC,CAAC;kBACvBG,MAAM,CAACW,GAAG,YAAY3G,WAAW,GAAG2G,GAAG,GAAI,IAAI3G,WAAW,CAAC;oBACvD4G,YAAY,EAAED;kBAClB,CAAC,CAAE,CAAC;gBACR;cACJ,CAAC,CAAC;YACN,CAAC,CAAC,CAAC;QACf;MACJ,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACDxF,YAAY,CAACN,SAAS,CAACyF,kBAAkB,GAAG,UAAUrC,QAAQ,EAAEhC,KAAK,EAAE;IACnE,IAAIZ,KAAK,GAAG,IAAI;IAChB,IAAIY,KAAK,KAAK,KAAK,CAAC,EAAE;MAAEA,KAAK,GAAG,IAAI,CAACA,KAAK;IAAE;IAC5C,IAAIiE,MAAM,GAAGjC,QAAQ,CAACiC,MAAM;IAC5B,IAAIW,WAAW,GAAG,EAAE;IACpB,IAAIC,SAAS,GAAG7C,QAAQ,CAACY,WAAW,KAAK,UAAU;IACnD,IAAI,CAACiC,SAAS,IAAItG,iBAAiB,CAAC0F,MAAM,EAAEjC,QAAQ,CAACc,WAAW,CAAC,EAAE;MAC/D,IAAI,CAAClG,iCAAiC,CAACqH,MAAM,CAAC,EAAE;QAC5CW,WAAW,CAACE,IAAI,CAAC;UACbb,MAAM,EAAEA,MAAM,CAACc,IAAI;UACnBC,MAAM,EAAE,eAAe;UACvBC,KAAK,EAAEjD,QAAQ,CAACjC,QAAQ;UACxBkC,SAAS,EAAED,QAAQ,CAACC;QACxB,CAAC,CAAC;MACN;MACA,IAAIrF,iCAAiC,CAACqH,MAAM,CAAC,IACzCzG,eAAe,CAACyG,MAAM,CAACiB,WAAW,CAAC,EAAE;QACrC,IAAIC,IAAI,GAAGnF,KAAK,CAACmF,IAAI,CAAC;UAClBC,EAAE,EAAE,eAAe;UACnB;UACA;UACA;UACAH,KAAK,EAAE,IAAI,CAAC3B,eAAe,CAACtB,QAAQ,CAACjC,QAAQ,CAAC,CAACsF,OAAO;UACtDpD,SAAS,EAAED,QAAQ,CAACC,SAAS;UAC7BqD,UAAU,EAAE,KAAK;UACjBC,iBAAiB,EAAE;QACvB,CAAC,CAAC;QACF,IAAIC,UAAU,GAAG,KAAK,CAAC;QACvB,IAAIL,IAAI,CAAClB,MAAM,EAAE;UACbuB,UAAU,GAAG1H,oBAAoB,CAACqH,IAAI,CAAClB,MAAM,EAAEA,MAAM,CAAC;QAC1D;QACA,IAAI,OAAOuB,UAAU,KAAK,WAAW,EAAE;UACnC;UACA;UACAvB,MAAM,CAACc,IAAI,GAAGS,UAAU;UACxBZ,WAAW,CAACE,IAAI,CAAC;YACbb,MAAM,EAAEuB,UAAU;YAClBR,MAAM,EAAE,eAAe;YACvBC,KAAK,EAAEjD,QAAQ,CAACjC,QAAQ;YACxBkC,SAAS,EAAED,QAAQ,CAACC;UACxB,CAAC,CAAC;QACN;MACJ;MACA,IAAIwD,eAAe,GAAGzD,QAAQ,CAACG,aAAa;MAC5C,IAAIsD,eAAe,EAAE;QACjB,IAAI,CAACnG,OAAO,CAACwB,OAAO,CAAC,UAAUS,EAAE,EAAEP,OAAO,EAAE;UACxC,IAAI0E,eAAe,GAAGnE,EAAE,CAACmE,eAAe;UACxC,IAAIC,SAAS,GAAGD,eAAe,IAAIA,eAAe,CAACC,SAAS;UAC5D,IAAI,CAACA,SAAS,IAAI,CAACjH,cAAc,CAACkH,IAAI,CAACH,eAAe,EAAEE,SAAS,CAAC,EAAE;YAChE;UACJ;UACA,IAAIE,OAAO,GAAGJ,eAAe,CAACE,SAAS,CAAC;UACxC,IAAIlE,EAAE,GAAGrC,KAAK,CAACE,OAAO,CAACwG,GAAG,CAAC9E,OAAO,CAAC;YAAEjB,QAAQ,GAAG0B,EAAE,CAAC1B,QAAQ;YAAEkC,SAAS,GAAGR,EAAE,CAACQ,SAAS;UACrF;UACA,IAAIH,EAAE,GAAG9B,KAAK,CAACmF,IAAI,CAAC;cAChBF,KAAK,EAAElF,QAAQ;cACfkC,SAAS,EAAEA,SAAS;cACpBsD,iBAAiB,EAAE,IAAI;cACvBD,UAAU,EAAE;YAChB,CAAC,CAAC;YAAES,kBAAkB,GAAGjE,EAAE,CAACmC,MAAM;YAAE+B,QAAQ,GAAGlE,EAAE,CAACkE,QAAQ;UAC1D,IAAIA,QAAQ,IAAID,kBAAkB,EAAE;YAChC;YACA,IAAIE,eAAe,GAAGJ,OAAO,CAACE,kBAAkB,EAAE;cAC9CG,cAAc,EAAEjC,MAAM;cACtB0B,SAAS,EAAG5F,QAAQ,IAAI7C,gBAAgB,CAAC6C,QAAQ,CAAC,IAAK,KAAK,CAAC;cAC7DoG,cAAc,EAAElE;YACpB,CAAC,CAAC;YACF;YACA,IAAIgE,eAAe,EAAE;cACjBrB,WAAW,CAACE,IAAI,CAAC;gBACbb,MAAM,EAAEgC,eAAe;gBACvBjB,MAAM,EAAE,YAAY;gBACpBC,KAAK,EAAElF,QAAQ;gBACfkC,SAAS,EAAEA;cACf,CAAC,CAAC;YACN;UACJ;QACJ,CAAC,CAAC;MACN;IACJ;IACA,IAAI2C,WAAW,CAACwB,MAAM,GAAG,CAAC,IACtB,CAACpE,QAAQ,CAACK,cAAc,IAAI,EAAE,EAAE+D,MAAM,GAAG,CAAC,IAC1CpE,QAAQ,CAACS,MAAM,IACfT,QAAQ,CAACU,cAAc,IACvBV,QAAQ,CAACsC,gBAAgB,EAAE;MAC3B,IAAI+B,SAAS,GAAG,EAAE;MAClB,IAAI,CAAChE,cAAc,CAAC;QAChBiE,WAAW,EAAE,SAAAA,CAAUtG,KAAK,EAAE;UAC1B,IAAI,CAAC6E,SAAS,EAAE;YACZD,WAAW,CAAC9D,OAAO,CAAC,UAAUyF,KAAK,EAAE;cAAE,OAAOvG,KAAK,CAACuG,KAAK,CAACA,KAAK,CAAC;YAAE,CAAC,CAAC;UACxE;UACA;UACA;UACA;UACA,IAAI9D,MAAM,GAAGT,QAAQ,CAACS,MAAM;UAC5B;UACA;UACA,IAAI+D,aAAa,GAAG,CAAC3J,sBAAsB,CAACoH,MAAM,CAAC,IAC9CrH,iCAAiC,CAACqH,MAAM,CAAC,IAAI,CAACA,MAAM,CAACQ,OAAQ;UAClE,IAAIhC,MAAM,EAAE;YACR,IAAI,CAACoC,SAAS,EAAE;cACZ;cACA;cACA;cACA;cACA,IAAIM,IAAI,GAAGnF,KAAK,CAACmF,IAAI,CAAC;gBAClBC,EAAE,EAAE,eAAe;gBACnB;gBACA;gBACA;gBACAH,KAAK,EAAE7F,KAAK,CAACkE,eAAe,CAACtB,QAAQ,CAACjC,QAAQ,CAAC,CAACsF,OAAO;gBACvDpD,SAAS,EAAED,QAAQ,CAACC,SAAS;gBAC7BqD,UAAU,EAAE,KAAK;gBACjBC,iBAAiB,EAAE;cACvB,CAAC,CAAC;cACF,IAAIJ,IAAI,CAACa,QAAQ,EAAE;gBACf/B,MAAM,GAAG7H,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE6H,MAAM,CAAC,EAAE;kBAAEc,IAAI,EAAEI,IAAI,CAAClB;gBAAO,CAAC,CAAC;gBAC9D,IAAI,aAAa,IAAIA,MAAM,EAAE;kBACzB,OAAOA,MAAM,CAACiB,WAAW;gBAC7B;gBACA,IAAI,SAAS,IAAIjB,MAAM,EAAE;kBACrB,OAAOA,MAAM,CAACQ,OAAO;gBACzB;cACJ;YACJ;YACA;YACA;YACA;YACA,IAAI+B,aAAa,EAAE;cACf/D,MAAM,CAACzC,KAAK,EAAEiE,MAAM,EAAE;gBAClBjB,OAAO,EAAEhB,QAAQ,CAACgB,OAAO;gBACzBf,SAAS,EAAED,QAAQ,CAACC;cACxB,CAAC,CAAC;YACN;UACJ;UACA;UACA;UACA,IAAI,CAAC4C,SAAS,IAAI,CAAC7C,QAAQ,CAACe,cAAc,IAAIyD,aAAa,EAAE;YACzDxG,KAAK,CAACyG,MAAM,CAAC;cACTrB,EAAE,EAAE,eAAe;cACnBsB,MAAM,EAAE,SAAAA,CAAUC,KAAK,EAAEpF,EAAE,EAAE;gBACzB,IAAIqF,SAAS,GAAGrF,EAAE,CAACqF,SAAS;kBAAEC,MAAM,GAAGtF,EAAE,CAACsF,MAAM;gBAChD,OAAOD,SAAS,KAAK,YAAY,GAAGD,KAAK,GAAGE,MAAM;cACtD;YACJ,CAAC,CAAC;UACN;QACJ,CAAC;QACDC,OAAO,EAAE9E,QAAQ,CAACK,cAAc;QAChC;QACAiD,UAAU,EAAE,KAAK;QACjB;QACA;QACAhB,gBAAgB,EAAEtC,QAAQ,CAACsC,gBAAgB;QAC3C;QACA;QACA;QACA;QACA5B,cAAc,EAAEV,QAAQ,CAACU,cAAc,IAAI;MAC/C,CAAC,CAAC,CAAC5B,OAAO,CAAC,UAAUmD,MAAM,EAAE;QAAE,OAAOoC,SAAS,CAACvB,IAAI,CAACb,MAAM,CAAC;MAAE,CAAC,CAAC;MAChE,IAAIjC,QAAQ,CAACO,mBAAmB,IAAIP,QAAQ,CAACU,cAAc,EAAE;QACzD;QACA;QACA;QACA,OAAOmB,OAAO,CAACkD,GAAG,CAACV,SAAS,CAAC,CAACW,IAAI,CAAC,YAAY;UAAE,OAAO/C,MAAM;QAAE,CAAC,CAAC;MACtE;IACJ;IACA,OAAOJ,OAAO,CAACC,OAAO,CAACG,MAAM,CAAC;EAClC,CAAC;EACD/E,YAAY,CAACN,SAAS,CAAC+E,sBAAsB,GAAG,UAAUzB,kBAAkB,EAAEF,QAAQ,EAAE;IACpF,IAAI5C,KAAK,GAAG,IAAI;IAChB,IAAI2F,IAAI,GAAG,OAAO7C,kBAAkB,KAAK,UAAU,GAC/CA,kBAAkB,CAACF,QAAQ,CAACC,SAAS,EAAE;MAAEpD,MAAM,EAAEA;IAAO,CAAC,CAAC,GACxDqD,kBAAkB;IACxB,IAAI6C,IAAI,KAAKlG,MAAM,EAAE;MACjB,OAAO,KAAK;IAChB;IACA,IAAI,CAACmB,KAAK,CAACiH,2BAA2B,CAAC,UAAUjH,KAAK,EAAE;MACpD,IAAI;QACAZ,KAAK,CAACiF,kBAAkB,CAACjI,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE4F,QAAQ,CAAC,EAAE;UAAEiC,MAAM,EAAE;YAAEc,IAAI,EAAEA;UAAK;QAAE,CAAC,CAAC,EAAE/E,KAAK,CAAC;MACjG,CAAC,CACD,OAAOmB,KAAK,EAAE;QACV+F,UAAU,CAACC,OAAO,KAAK,KAAK,IAAI5K,SAAS,CAAC4E,KAAK,CAACA,KAAK,CAAC;MAC1D;IACJ,CAAC,EAAEa,QAAQ,CAACN,UAAU,CAAC;IACvB,OAAO,IAAI;EACf,CAAC;EACDxC,YAAY,CAACN,SAAS,CAACwI,UAAU,GAAG,UAAUpG,OAAO,EAAE7B,OAAO,EAAEkI,aAAa,EAAE;IAC3E,OAAO,IAAI,CAACC,oBAAoB,CAACtG,OAAO,EAAE7B,OAAO,EAAEkI,aAAa,CAAC,CAACE,OAAO,CACpEC,OAAO;EAChB,CAAC;EACDtI,YAAY,CAACN,SAAS,CAAC6I,aAAa,GAAG,YAAY;IAC/C,IAAIC,KAAK,GAAG/I,MAAM,CAACG,MAAM,CAAC,IAAI,CAAC;IAC/B,IAAI,CAACQ,OAAO,CAACwB,OAAO,CAAC,UAAU6G,IAAI,EAAE3G,OAAO,EAAE;MAC1C0G,KAAK,CAAC1G,OAAO,CAAC,GAAG;QACbiB,SAAS,EAAE0F,IAAI,CAAC1F,SAAS;QACzBoF,aAAa,EAAEM,IAAI,CAACN,aAAa;QACjC1C,YAAY,EAAEgD,IAAI,CAAChD,YAAY;QAC/BT,aAAa,EAAEyD,IAAI,CAACzD;MACxB,CAAC;IACL,CAAC,CAAC;IACF,OAAOwD,KAAK;EAChB,CAAC;EACDxI,YAAY,CAACN,SAAS,CAACgJ,WAAW,GAAG,UAAU5G,OAAO,EAAE;IACpD,IAAI6G,SAAS,GAAG,IAAI,CAACvI,OAAO,CAACwG,GAAG,CAAC9E,OAAO,CAAC;IACzC,IAAI6G,SAAS,EAAE;MACXA,SAAS,CAAClD,YAAY,GAAGmD,SAAS;MAClCD,SAAS,CAAC3D,aAAa,GAAG,EAAE;IAChC;EACJ,CAAC;EACDhF,YAAY,CAACN,SAAS,CAACyE,SAAS,GAAG,UAAUtD,QAAQ,EAAE;IACnD,OAAO,IAAI,CAACS,iBAAiB,CAACP,iBAAiB,CAACF,QAAQ,CAAC;EAC7D,CAAC;EACDb,YAAY,CAACN,SAAS,CAAC0E,eAAe,GAAG,UAAUvD,QAAQ,EAAE;IACzD,IAAIN,cAAc,GAAG,IAAI,CAACA,cAAc;IACxC,IAAI,CAACA,cAAc,CAACsI,GAAG,CAAChI,QAAQ,CAAC,EAAE;MAC/B,IAAIiI,UAAU,GAAG;QACb;QACA;QACA;QACA;QACA;QACA7K,gBAAgB,EAAEA,gBAAgB,CAAC4C,QAAQ,CAAC;QAC5CkI,kBAAkB,EAAE,IAAI,CAAC5H,UAAU,CAAC6H,oBAAoB,CAACnI,QAAQ,CAAC;QAClEoI,uBAAuB,EAAExL,aAAa,CAAC,CAAC,aAAa,CAAC,EAAEoD,QAAQ,CAAC;QACjEqI,WAAW,EAAE,IAAI,CAAC/H,UAAU,CAAC+H,WAAW,CAACrI,QAAQ,CAAC;QAClDsI,WAAW,EAAEvL,4BAA4B,CAAC,CACtC;UAAEwL,IAAI,EAAE,QAAQ;UAAEC,MAAM,EAAE;QAAK,CAAC,EAChC;UAAED,IAAI,EAAE;QAAa,CAAC,EACtB;UAAEA,IAAI,EAAE;QAAc,CAAC,CAC1B,EAAEvI,QAAQ,CAAC;QACZyI,WAAW,EAAExL,gBAAgB,CAACC,sBAAsB,CAAC8C,QAAQ,CAAC,CAAC;QAC/D;QACA;QACAsF,OAAO,EAAEjJ,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE2D,QAAQ,CAAC,EAAE;UAAE0I,WAAW,EAAE1I,QAAQ,CAAC0I,WAAW,CAACC,GAAG,CAAC,UAAUC,GAAG,EAAE;YACzF,IAAIA,GAAG,CAACC,IAAI,KAAK,qBAAqB,IAClCD,GAAG,CAACE,SAAS,KAAK,OAAO,EAAE;cAC3B,OAAOzM,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEuM,GAAG,CAAC,EAAE;gBAAEE,SAAS,EAAE;cAAQ,CAAC,CAAC;YAC9D;YACA,OAAOF,GAAG;UACd,CAAC;QAAE,CAAC;MACZ,CAAC;MACDlJ,cAAc,CAACqJ,GAAG,CAAC/I,QAAQ,EAAEiI,UAAU,CAAC;IAC5C;IACA,OAAOvI,cAAc,CAACqG,GAAG,CAAC/F,QAAQ,CAAC;EACvC,CAAC;EACDb,YAAY,CAACN,SAAS,CAAC2E,YAAY,GAAG,UAAUxD,QAAQ,EAAEkC,SAAS,EAAE;IACjE,OAAO7F,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAACkH,eAAe,CAACvD,QAAQ,CAAC,CAACyI,WAAW,CAAC,EAAEvG,SAAS,CAAC;EACxF,CAAC;EACD/C,YAAY,CAACN,SAAS,CAACmK,UAAU,GAAG,UAAU5J,OAAO,EAAE;IACnD,IAAI8F,KAAK,GAAG,IAAI,CAAC5B,SAAS,CAAClE,OAAO,CAAC8F,KAAK,CAAC;IACzC;IACA;IACA;IACA9F,OAAO,GAAG/C,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE+C,OAAO,CAAC,EAAE;MAAE8C,SAAS,EAAE,IAAI,CAACsB,YAAY,CAAC0B,KAAK,EAAE9F,OAAO,CAAC8C,SAAS;IAAE,CAAC,CAAC;IACrG,IAAI,OAAO9C,OAAO,CAAC6J,2BAA2B,KAAK,WAAW,EAAE;MAC5D7J,OAAO,CAAC6J,2BAA2B,GAAG,KAAK;IAC/C;IACA,IAAInB,SAAS,GAAG,IAAIvJ,SAAS,CAAC,IAAI,CAAC;IACnC,IAAI2K,UAAU,GAAG,IAAI/K,eAAe,CAAC;MACjCgL,YAAY,EAAE,IAAI;MAClBrB,SAAS,EAAEA,SAAS;MACpB1I,OAAO,EAAEA;IACb,CAAC,CAAC;IACF8J,UAAU,CAAC,WAAW,CAAC,GAAGhE,KAAK;IAC/B,IAAI,CAAC3F,OAAO,CAACwJ,GAAG,CAACG,UAAU,CAACjI,OAAO,EAAE6G,SAAS,CAAC;IAC/C;IACA;IACAA,SAAS,CAACsB,IAAI,CAAC;MACXpJ,QAAQ,EAAEkF,KAAK;MACfS,eAAe,EAAEuD,UAAU;MAC3BhH,SAAS,EAAEgH,UAAU,CAAChH;IAC1B,CAAC,CAAC;IACF,OAAOgH,UAAU;EACrB,CAAC;EACD/J,YAAY,CAACN,SAAS,CAACqG,KAAK,GAAG,UAAU9F,OAAO,EAAE6B,OAAO,EAAE;IACvD,IAAI5B,KAAK,GAAG,IAAI;IAChB,IAAI4B,OAAO,KAAK,KAAK,CAAC,EAAE;MAAEA,OAAO,GAAG,IAAI,CAACoI,eAAe,CAAC,CAAC;IAAE;IAC5D7M,SAAS,CAAC4C,OAAO,CAAC8F,KAAK,EAAE,EAAE,CAAC;IAC5B1I,SAAS,CAAC4C,OAAO,CAAC8F,KAAK,CAAC2D,IAAI,KAAK,UAAU,EAAE,EAAE,CAAC;IAChDrM,SAAS,CAAC,CAAC4C,OAAO,CAACoG,iBAAiB,EAAE,EAAE,CAAC;IACzChJ,SAAS,CAAC,CAAC4C,OAAO,CAACkK,YAAY,EAAE,EAAE,CAAC;IACpC,OAAO,IAAI,CAACjC,UAAU,CAACpG,OAAO,EAAE5E,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE+C,OAAO,CAAC,EAAE;MAAE8F,KAAK,EAAE,IAAI,CAAC5B,SAAS,CAAClE,OAAO,CAAC8F,KAAK;IAAE,CAAC,CAAC,CAAC,CAACqE,OAAO,CAAC,YAAY;MAAE,OAAOlK,KAAK,CAACmK,SAAS,CAACvI,OAAO,CAAC;IAAE,CAAC,CAAC;EACxK,CAAC;EACD9B,YAAY,CAACN,SAAS,CAACwK,eAAe,GAAG,YAAY;IACjD,OAAOI,MAAM,CAAC,IAAI,CAAC9J,cAAc,EAAE,CAAC;EACxC,CAAC;EACDR,YAAY,CAACN,SAAS,CAAC6K,iBAAiB,GAAG,YAAY;IACnD,OAAO,IAAI,CAAC9J,gBAAgB,EAAE;EAClC,CAAC;EACDT,YAAY,CAACN,SAAS,CAACuE,kBAAkB,GAAG,YAAY;IACpD,OAAOqG,MAAM,CAAC,IAAI,CAAC5J,iBAAiB,EAAE,CAAC;EAC3C,CAAC;EACDV,YAAY,CAACN,SAAS,CAAC8K,gBAAgB,GAAG,UAAU1I,OAAO,EAAE;IACzD,IAAI,CAAC2I,2BAA2B,CAAC3I,OAAO,CAAC;IACzC,IAAI,CAAC4C,gBAAgB,CAAC,CAAC;EAC3B,CAAC;EACD1E,YAAY,CAACN,SAAS,CAAC+K,2BAA2B,GAAG,UAAU3I,OAAO,EAAE;IACpE,IAAI6G,SAAS,GAAG,IAAI,CAACvI,OAAO,CAACwG,GAAG,CAAC9E,OAAO,CAAC;IACzC,IAAI6G,SAAS,EACTA,SAAS,CAAChH,IAAI,CAAC,CAAC;EACxB,CAAC;EACD3B,YAAY,CAACN,SAAS,CAACgL,UAAU,GAAG,UAAUzK,OAAO,EAAE;IACnD,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;MAAEA,OAAO,GAAG;QAChC0K,cAAc,EAAE;MACpB,CAAC;IAAE;IACH;IACA;IACA;IACA;IACA;IACA,IAAI,CAAC3I,oBAAoB,CAAC1E,iBAAiB,CAAC,EAAE,CAAC,CAAC;IAChD,IAAI,CAAC8C,OAAO,CAACwB,OAAO,CAAC,UAAU+G,SAAS,EAAE;MACtC,IAAIA,SAAS,CAACnC,eAAe,EAAE;QAC3B;QACA;QACAmC,SAAS,CAACR,aAAa,GAAGjJ,aAAa,CAACsF,OAAO;MACnD,CAAC,MACI;QACDmE,SAAS,CAAChH,IAAI,CAAC,CAAC;MACpB;IACJ,CAAC,CAAC;IACF,IAAI,IAAI,CAACD,aAAa,EAAE;MACpB,IAAI,CAACA,aAAa,GAAGjC,MAAM,CAACG,MAAM,CAAC,IAAI,CAAC;IAC5C;IACA;IACA,OAAO,IAAI,CAACkB,KAAK,CAAC8J,KAAK,CAAC3K,OAAO,CAAC;EACpC,CAAC;EACDD,YAAY,CAACN,SAAS,CAACmL,oBAAoB,GAAG,UAAUjD,OAAO,EAAE;IAC7D,IAAI1H,KAAK,GAAG,IAAI;IAChB,IAAI0H,OAAO,KAAK,KAAK,CAAC,EAAE;MAAEA,OAAO,GAAG,QAAQ;IAAE;IAC9C,IAAIxH,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;IACvB,IAAIyK,iBAAiB,GAAG,IAAIzK,GAAG,CAAC,CAAC;IACjC,IAAI0K,kBAAkB,GAAG,IAAIC,GAAG,CAAC,CAAC;IAClC,IAAIC,KAAK,CAACC,OAAO,CAACtD,OAAO,CAAC,EAAE;MACxBA,OAAO,CAAChG,OAAO,CAAC,UAAUuJ,IAAI,EAAE;QAC5B,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;UAC1BL,iBAAiB,CAAClB,GAAG,CAACuB,IAAI,EAAE,KAAK,CAAC;QACtC,CAAC,MACI,IAAI1M,cAAc,CAAC0M,IAAI,CAAC,EAAE;UAC3BL,iBAAiB,CAAClB,GAAG,CAAC1J,KAAK,CAACiE,SAAS,CAACgH,IAAI,CAAC,EAAE,KAAK,CAAC;QACvD,CAAC,MACI,IAAIzM,eAAe,CAACyM,IAAI,CAAC,IAAIA,IAAI,CAACpF,KAAK,EAAE;UAC1CgF,kBAAkB,CAACK,GAAG,CAACD,IAAI,CAAC;QAChC;MACJ,CAAC,CAAC;IACN;IACA,IAAI,CAAC/K,OAAO,CAACwB,OAAO,CAAC,UAAUS,EAAE,EAAEP,OAAO,EAAE;MACxC,IAAIuJ,EAAE,GAAGhJ,EAAE,CAACmE,eAAe;QAAE3F,QAAQ,GAAGwB,EAAE,CAACxB,QAAQ;MACnD,IAAIwK,EAAE,EAAE;QACJ,IAAIzD,OAAO,KAAK,KAAK,EAAE;UACnBxH,OAAO,CAACwJ,GAAG,CAAC9H,OAAO,EAAEuJ,EAAE,CAAC;UACxB;QACJ;QACA,IAAI5E,SAAS,GAAG4E,EAAE,CAAC5E,SAAS;UAAE/C,WAAW,GAAG2H,EAAE,CAACpL,OAAO,CAACyD,WAAW;QAClE,IAAIA,WAAW,KAAK,SAAS,IACxBkE,OAAO,KAAK,QAAQ,IAAI,CAACyD,EAAE,CAACC,YAAY,CAAC,CAAE,EAAE;UAC9C;QACJ;QACA,IAAI1D,OAAO,KAAK,QAAQ,IACnBnB,SAAS,IAAIqE,iBAAiB,CAACjC,GAAG,CAACpC,SAAS,CAAE,IAC9C5F,QAAQ,IAAIiK,iBAAiB,CAACjC,GAAG,CAAChI,QAAQ,CAAE,EAAE;UAC/CT,OAAO,CAACwJ,GAAG,CAAC9H,OAAO,EAAEuJ,EAAE,CAAC;UACxB,IAAI5E,SAAS,EACTqE,iBAAiB,CAAClB,GAAG,CAACnD,SAAS,EAAE,IAAI,CAAC;UAC1C,IAAI5F,QAAQ,EACRiK,iBAAiB,CAAClB,GAAG,CAAC/I,QAAQ,EAAE,IAAI,CAAC;QAC7C;MACJ;IACJ,CAAC,CAAC;IACF,IAAIkK,kBAAkB,CAACQ,IAAI,EAAE;MACzBR,kBAAkB,CAACnJ,OAAO,CAAC,UAAU3B,OAAO,EAAE;QAC1C;QACA;QACA;QACA,IAAI6B,OAAO,GAAGtD,YAAY,CAAC,oBAAoB,CAAC;QAChD,IAAImK,SAAS,GAAGzI,KAAK,CAACsL,QAAQ,CAAC1J,OAAO,CAAC,CAACmI,IAAI,CAAC;UACzCpJ,QAAQ,EAAEZ,OAAO,CAAC8F,KAAK;UACvBhD,SAAS,EAAE9C,OAAO,CAAC8C;QACvB,CAAC,CAAC;QACF,IAAIsI,EAAE,GAAG,IAAIrM,eAAe,CAAC;UACzBgL,YAAY,EAAE9J,KAAK;UACnByI,SAAS,EAAEA,SAAS;UACpB1I,OAAO,EAAE/C,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE+C,OAAO,CAAC,EAAE;YAAEyD,WAAW,EAAE;UAAe,CAAC;QAC5E,CAAC,CAAC;QACFrG,SAAS,CAACgO,EAAE,CAACvJ,OAAO,KAAKA,OAAO,CAAC;QACjC6G,SAAS,CAAC8C,kBAAkB,CAACJ,EAAE,CAAC;QAChCjL,OAAO,CAACwJ,GAAG,CAAC9H,OAAO,EAAEuJ,EAAE,CAAC;MAC5B,CAAC,CAAC;IACN;IACA,IAAIrD,UAAU,CAACC,OAAO,KAAK,KAAK,IAAI6C,iBAAiB,CAACS,IAAI,EAAE;MACxDT,iBAAiB,CAAClJ,OAAO,CAAC,UAAU8J,QAAQ,EAAEC,SAAS,EAAE;QACrD,IAAI,CAACD,QAAQ,EAAE;UACX1D,UAAU,CAACC,OAAO,KAAK,KAAK,IAAI5K,SAAS,CAACuO,IAAI,CAAC,OAAOD,SAAS,KAAK,QAAQ,GAAG,EAAE,GAAG,EAAE,EAAEA,SAAS,CAAC;QACtG;MACJ,CAAC,CAAC;IACN;IACA,OAAOvL,OAAO;EAClB,CAAC;EACDJ,YAAY,CAACN,SAAS,CAACmM,wBAAwB,GAAG,UAAUC,cAAc,EAAE;IACxE,IAAI5L,KAAK,GAAG,IAAI;IAChB,IAAI4L,cAAc,KAAK,KAAK,CAAC,EAAE;MAAEA,cAAc,GAAG,KAAK;IAAE;IACzD,IAAIC,uBAAuB,GAAG,EAAE;IAChC,IAAI,CAAClB,oBAAoB,CAACiB,cAAc,GAAG,KAAK,GAAG,QAAQ,CAAC,CAAClK,OAAO,CAAC,UAAU4E,eAAe,EAAE1E,OAAO,EAAE;MACrG,IAAI4B,WAAW,GAAG8C,eAAe,CAACvG,OAAO,CAACyD,WAAW;MACrD8C,eAAe,CAACwF,gBAAgB,CAAC,CAAC;MAClC,IAAIF,cAAc,IACbpI,WAAW,KAAK,SAAS,IAAIA,WAAW,KAAK,YAAa,EAAE;QAC7DqI,uBAAuB,CAACnG,IAAI,CAACY,eAAe,CAACyF,OAAO,CAAC,CAAC,CAAC;MAC3D;MACA/L,KAAK,CAACsL,QAAQ,CAAC1J,OAAO,CAAC,CAACoK,OAAO,CAAC,IAAI,CAAC;IACzC,CAAC,CAAC;IACF,IAAI,CAACxH,gBAAgB,CAAC,CAAC;IACvB,OAAOC,OAAO,CAACkD,GAAG,CAACkE,uBAAuB,CAAC;EAC/C,CAAC;EACD/L,YAAY,CAACN,SAAS,CAAC+L,kBAAkB,GAAG,UAAUjF,eAAe,EAAE;IACnE,IAAI,CAACgF,QAAQ,CAAChF,eAAe,CAAC1E,OAAO,CAAC,CAAC2J,kBAAkB,CAACjF,eAAe,CAAC;EAC9E,CAAC;EACDxG,YAAY,CAACN,SAAS,CAACyM,wBAAwB,GAAG,UAAU9J,EAAE,EAAE;IAC5D,IAAInC,KAAK,GAAG,IAAI;IAChB,IAAI6F,KAAK,GAAG1D,EAAE,CAAC0D,KAAK;MAAErC,WAAW,GAAGrB,EAAE,CAACqB,WAAW;MAAEnB,EAAE,GAAGF,EAAE,CAACuB,WAAW;MAAEA,WAAW,GAAGrB,EAAE,KAAK,KAAK,CAAC,GAAG,MAAM,GAAGA,EAAE;MAAEQ,SAAS,GAAGV,EAAE,CAACU,SAAS;MAAEH,EAAE,GAAGP,EAAE,CAACyB,OAAO;MAAEA,OAAO,GAAGlB,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;MAAEC,EAAE,GAAGR,EAAE,CAAC+J,UAAU;MAAEA,UAAU,GAAGvJ,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;IAC1PkD,KAAK,GAAG,IAAI,CAAC5B,SAAS,CAAC4B,KAAK,CAAC;IAC7BhD,SAAS,GAAG,IAAI,CAACsB,YAAY,CAAC0B,KAAK,EAAEhD,SAAS,CAAC;IAC/C,IAAIsJ,cAAc,GAAG,SAAAA,CAAUtJ,SAAS,EAAE;MACtC,OAAO7C,KAAK,CAAC4E,qBAAqB,CAACiB,KAAK,EAAEjC,OAAO,EAAEf,SAAS,EAAEqJ,UAAU,CAAC,CAAC5C,GAAG,CAAC,UAAUzE,MAAM,EAAE;QAC5F,IAAIrB,WAAW,KAAK,UAAU,EAAE;UAC5B;UACA;UACA,IAAIrE,iBAAiB,CAAC0F,MAAM,EAAEnB,WAAW,CAAC,EAAE;YACxC1D,KAAK,CAACY,KAAK,CAACuG,KAAK,CAAC;cACdtB,KAAK,EAAEA,KAAK;cACZhB,MAAM,EAAEA,MAAM,CAACc,IAAI;cACnBC,MAAM,EAAE,mBAAmB;cAC3B/C,SAAS,EAAEA;YACf,CAAC,CAAC;UACN;UACA7C,KAAK,CAACwE,gBAAgB,CAAC,CAAC;QAC5B;QACA,IAAI4H,SAAS,GAAGpO,qBAAqB,CAAC6G,MAAM,CAAC;QAC7C,IAAIwH,iBAAiB,GAAGxN,8BAA8B,CAACgG,MAAM,CAAC;QAC9D,IAAIuH,SAAS,IAAIC,iBAAiB,EAAE;UAChC,IAAIrH,MAAM,GAAG,CAAC,CAAC;UACf,IAAIoH,SAAS,EAAE;YACXpH,MAAM,CAACF,aAAa,GAAGD,MAAM,CAACG,MAAM;UACxC;UACA,IAAIqH,iBAAiB,EAAE;YACnBrH,MAAM,CAACsH,cAAc,GAAGzH,MAAM,CAACqH,UAAU,CAAC9M,sBAAsB,CAAC;UACrE;UACA;UACA;UACA;UACA,IAAIsE,WAAW,KAAK,MAAM,IAAI2I,iBAAiB,EAAE;YAC7C,MAAM,IAAI1N,WAAW,CAACqG,MAAM,CAAC;UACjC;QACJ;QACA,IAAItB,WAAW,KAAK,QAAQ,EAAE;UAC1B,OAAOmB,MAAM,CAACG,MAAM;QACxB;QACA,OAAOH,MAAM;MACjB,CAAC,CAAC;IACN,CAAC;IACD,IAAI,IAAI,CAACX,eAAe,CAAC2B,KAAK,CAAC,CAAC9H,gBAAgB,EAAE;MAC9C,IAAIwO,mBAAmB,GAAG,IAAI,CAACtL,UAAU,CACpCmD,oBAAoB,CAACyB,KAAK,EAAEhD,SAAS,EAAEe,OAAO,CAAC,CAC/CgE,IAAI,CAACuE,cAAc,CAAC;MACzB,OAAO,IAAIjO,UAAU,CAAC,UAAUsO,QAAQ,EAAE;QACtC,IAAIC,GAAG,GAAG,IAAI;QACdF,mBAAmB,CAAC3E,IAAI,CAAC,UAAUiC,UAAU,EAAE;UAAE,OAAQ4C,GAAG,GAAG5C,UAAU,CAAC1E,SAAS,CAACqH,QAAQ,CAAC;QAAG,CAAC,EAAEA,QAAQ,CAACzK,KAAK,CAAC;QAClH,OAAO,YAAY;UAAE,OAAO0K,GAAG,IAAIA,GAAG,CAACC,WAAW,CAAC,CAAC;QAAE,CAAC;MAC3D,CAAC,CAAC;IACN;IACA,OAAOP,cAAc,CAACtJ,SAAS,CAAC;EACpC,CAAC;EACD/C,YAAY,CAACN,SAAS,CAAC2K,SAAS,GAAG,UAAUvI,OAAO,EAAE;IAClD,IAAI,CAACC,oBAAoB,CAACD,OAAO,CAAC;IAClC,IAAI,CAAC4C,gBAAgB,CAAC,CAAC;EAC3B,CAAC;EACD1E,YAAY,CAACN,SAAS,CAACqC,oBAAoB,GAAG,UAAUD,OAAO,EAAE;IAC7D,IAAI,CAAC2I,2BAA2B,CAAC3I,OAAO,CAAC;IACzC,IAAI,CAAC+K,WAAW,CAAC/K,OAAO,CAAC;EAC7B,CAAC;EACD9B,YAAY,CAACN,SAAS,CAACmN,WAAW,GAAG,UAAU/K,OAAO,EAAE;IACpD;IACA;IACA;IACA;IACA;IACA,IAAI,CAACxB,cAAc,CAACwM,MAAM,CAAChL,OAAO,CAAC;IACnC,IAAI,IAAI,CAAC1B,OAAO,CAACyI,GAAG,CAAC/G,OAAO,CAAC,EAAE;MAC3B,IAAI,CAAC0J,QAAQ,CAAC1J,OAAO,CAAC,CAACH,IAAI,CAAC,CAAC;MAC7B,IAAI,CAACvB,OAAO,CAAC0M,MAAM,CAAChL,OAAO,CAAC;IAChC;EACJ,CAAC;EACD9B,YAAY,CAACN,SAAS,CAACgF,gBAAgB,GAAG,YAAY;IAClD,IAAI,IAAI,CAACjD,WAAW,EAChB,IAAI,CAACA,WAAW,CAAC,CAAC;IACtB,IAAI,CAACrB,OAAO,CAACwB,OAAO,CAAC,UAAU6G,IAAI,EAAE;MAAE,OAAOA,IAAI,CAACsE,MAAM,CAAC,CAAC;IAAE,CAAC,CAAC;EACnE,CAAC;EACD/M,YAAY,CAACN,SAAS,CAACsN,aAAa,GAAG,YAAY;IAC/C,OAAO,IAAI,CAAC7L,UAAU;EAC1B,CAAC;EACDnB,YAAY,CAACN,SAAS,CAACoF,qBAAqB,GAAG,UAAUiB,KAAK,EAAEjC,OAAO,EAAEf,SAAS,EAAEqJ,UAAU;EAC9F;EACAa,aAAa,EAAE;IACX,IAAI/M,KAAK,GAAG,IAAI;IAChB,IAAImC,EAAE;IACN,IAAI4K,aAAa,KAAK,KAAK,CAAC,EAAE;MAAEA,aAAa,GAAG,CAAC5K,EAAE,GAAGyB,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,OAAO,CAAC5C,kBAAkB,MAAM,IAAI,IAAImB,EAAE,KAAK,KAAK,CAAC,GAAGA,EAAE,GAAG,IAAI,CAACnB,kBAAkB;IAAE;IAC9L,IAAI6I,UAAU;IACd,IAAIxH,EAAE,GAAG,IAAI,CAAC6B,eAAe,CAAC2B,KAAK,CAAC;MAAEoD,WAAW,GAAG5G,EAAE,CAAC4G,WAAW;MAAED,WAAW,GAAG3G,EAAE,CAAC2G,WAAW;IAChG,IAAIC,WAAW,EAAE;MACb,IAAIvG,EAAE,GAAG,IAAI;QAAEsK,yBAAyB,GAAGtK,EAAE,CAACjC,uBAAuB;QAAEK,IAAI,GAAG4B,EAAE,CAAC5B,IAAI;MACrF,IAAI2I,SAAS,GAAG;QACZ5D,KAAK,EAAEoD,WAAW;QAClBpG,SAAS,EAAEA,SAAS;QACpBoK,aAAa,EAAEnP,gBAAgB,CAACmL,WAAW,CAAC,IAAI,KAAK,CAAC;QACtDrF,OAAO,EAAE,IAAI,CAACsJ,cAAc,CAAClQ,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE4G,OAAO,CAAC,EAAE;UAAEuJ,UAAU,EAAE,CAACJ;QAAc,CAAC,CAAC,CAAC;QAC7Fb,UAAU,EAAEA;MAChB,CAAC;MACDtI,OAAO,GAAG6F,SAAS,CAAC7F,OAAO;MAC3B,IAAImJ,aAAa,EAAE;QACf,IAAIK,oBAAoB,GAAG/N,KAAK,CAAC4J,WAAW,CAAC;QAC7C,IAAIoE,SAAS,GAAG1P,kBAAkB,CAACkF,SAAS,CAAC;QAC7C,IAAIyK,KAAK,GAAGN,yBAAyB,CAACO,MAAM,CAACH,oBAAoB,EAAEC,SAAS,CAAC;QAC7ExD,UAAU,GAAGyD,KAAK,CAACzD,UAAU;QAC7B,IAAI,CAACA,UAAU,EAAE;UACb,IAAI1B,OAAO,GAAG,IAAI9J,OAAO,CAAC,CACtBf,OAAO,CAACwD,IAAI,EAAE2I,SAAS,CAAC,CAC3B,CAAC;UACFI,UAAU,GAAGyD,KAAK,CAACzD,UAAU,GAAG1B,OAAO;UACvCA,OAAO,CAACqF,UAAU,CAAC,YAAY;YAC3BR,yBAAyB,CAAC7D,MAAM,CAACiE,oBAAoB,EAAEC,SAAS,CAAC;UACrE,CAAC,CAAC;QACN;MACJ,CAAC,MACI;QACDxD,UAAU,GAAG,IAAIxL,OAAO,CAAC,CACrBf,OAAO,CAACwD,IAAI,EAAE2I,SAAS,CAAC,CAC3B,CAAC;MACN;IACJ,CAAC,MACI;MACDI,UAAU,GAAG,IAAIxL,OAAO,CAAC,CAACH,UAAU,CAACuP,EAAE,CAAC;QAAE9H,IAAI,EAAE,CAAC;MAAE,CAAC,CAAC,CAAC,CAAC;MACvD/B,OAAO,GAAG,IAAI,CAACsJ,cAAc,CAACtJ,OAAO,CAAC;IAC1C;IACA,IAAIoF,WAAW,EAAE;MACba,UAAU,GAAG1L,QAAQ,CAAC0L,UAAU,EAAE,UAAUhF,MAAM,EAAE;QAChD,OAAO7E,KAAK,CAACiB,UAAU,CAACyM,YAAY,CAAC;UACjC/M,QAAQ,EAAEqI,WAAW;UACrB2E,YAAY,EAAE9I,MAAM;UACpBjB,OAAO,EAAEA,OAAO;UAChBf,SAAS,EAAEA;QACf,CAAC,CAAC;MACN,CAAC,CAAC;IACN;IACA,OAAOgH,UAAU;EACrB,CAAC;EACD/J,YAAY,CAACN,SAAS,CAACoO,kBAAkB,GAAG,UAAUnF,SAAS,EAAEoF,kBAAkB,EAAE9N,OAAO,EAAE;IAC1F,IAAI+N,SAAS,GAAIrF,SAAS,CAACsF,aAAa,GAAG,IAAI,CAAC1D,iBAAiB,CAAC,CAAE;IACpE;IACA;IACA;IACA,IAAI2D,YAAY,GAAG,IAAI,CAACpN,KAAK,CAACoD,gBAAgB,CAACjE,OAAO,CAAC8F,KAAK,CAAC;IAC7D,OAAO1H,QAAQ,CAAC,IAAI,CAACyG,qBAAqB,CAACoJ,YAAY,EAAEjO,OAAO,CAAC6D,OAAO,EAAE7D,OAAO,CAAC8C,SAAS,CAAC,EAAE,UAAUgC,MAAM,EAAE;MAC5G,IAAIC,aAAa,GAAG7G,0BAA0B,CAAC4G,MAAM,CAAC;MACtD,IAAIuH,SAAS,GAAGtH,aAAa,CAACkC,MAAM,GAAG,CAAC;MACxC,IAAItD,WAAW,GAAG3D,OAAO,CAAC2D,WAAW;MACrC;MACA;MACA,IAAIoK,SAAS,IAAIrF,SAAS,CAACsF,aAAa,EAAE;QACtC,IAAI3B,SAAS,IAAI1I,WAAW,KAAK,MAAM,EAAE;UACrC;UACA,MAAM+E,SAAS,CAACwF,SAAS,CAAC,IAAItP,WAAW,CAAC;YACtCmG,aAAa,EAAEA;UACnB,CAAC,CAAC,CAAC;QACP;QACA;QACA;QACA;QACA2D,SAAS,CAACyF,UAAU,CAACrJ,MAAM,EAAEmJ,YAAY,EAAEjO,OAAO,EAAE8N,kBAAkB,CAAC;QACvEpF,SAAS,CAAC0F,SAAS,CAAC,CAAC;MACzB;MACA,IAAIC,GAAG,GAAG;QACNzI,IAAI,EAAEd,MAAM,CAACc,IAAI;QACjBrB,OAAO,EAAE,KAAK;QACd2D,aAAa,EAAEjJ,aAAa,CAACqP;MACjC,CAAC;MACD;MACA;MACA;MACA;MACA,IAAIjC,SAAS,IAAI1I,WAAW,KAAK,MAAM,EAAE;QACrC0K,GAAG,CAACzI,IAAI,GAAG,KAAK,CAAC;MACrB;MACA,IAAIyG,SAAS,IAAI1I,WAAW,KAAK,QAAQ,EAAE;QACvC0K,GAAG,CAACpJ,MAAM,GAAGF,aAAa;QAC1BsJ,GAAG,CAACnG,aAAa,GAAGjJ,aAAa,CAAC+C,KAAK;MAC3C;MACA,OAAOqM,GAAG;IACd,CAAC,EAAE,UAAU7I,YAAY,EAAE;MACvB,IAAIxD,KAAK,GAAGnD,aAAa,CAAC2G,YAAY,CAAC,GAAGA,YAAY,GAAI,IAAI5G,WAAW,CAAC;QAAE4G,YAAY,EAAEA;MAAa,CAAC,CAAE;MAC1G;MACA,IAAIuI,SAAS,IAAIrF,SAAS,CAACsF,aAAa,EAAE;QACtCtF,SAAS,CAACwF,SAAS,CAAClM,KAAK,CAAC;MAC9B;MACA,MAAMA,KAAK;IACf,CAAC,CAAC;EACN,CAAC;EACDjC,YAAY,CAACN,SAAS,CAAC0I,oBAAoB,GAAG,UAAUtG,OAAO,EAAE7B,OAAO;EACxE;EACA;EACA;EACAkI,aAAa,EAAEpC,KAAK,EAAE;IAClB,IAAI7F,KAAK,GAAG,IAAI;IAChB,IAAIiI,aAAa,KAAK,KAAK,CAAC,EAAE;MAAEA,aAAa,GAAGjJ,aAAa,CAACsF,OAAO;IAAE;IACvE,IAAIuB,KAAK,KAAK,KAAK,CAAC,EAAE;MAAEA,KAAK,GAAG9F,OAAO,CAAC8F,KAAK;IAAE;IAC/C,IAAIhD,SAAS,GAAG,IAAI,CAACsB,YAAY,CAAC0B,KAAK,EAAE9F,OAAO,CAAC8C,SAAS,CAAC;IAC3D,IAAI4F,SAAS,GAAG,IAAI,CAAC6C,QAAQ,CAAC1J,OAAO,CAAC;IACtC,IAAI0M,QAAQ,GAAG,IAAI,CAACvN,cAAc,CAAC4I,UAAU;IAC7C,IAAIxH,EAAE,GAAGpC,OAAO,CAACyD,WAAW;MAAEA,WAAW,GAAGrB,EAAE,KAAK,KAAK,CAAC,GAAImM,QAAQ,IAAIA,QAAQ,CAAC9K,WAAW,IAAK,aAAa,GAAGrB,EAAE;MAAEE,EAAE,GAAGtC,OAAO,CAAC2D,WAAW;MAAEA,WAAW,GAAGrB,EAAE,KAAK,KAAK,CAAC,GAAIiM,QAAQ,IAAIA,QAAQ,CAAC5K,WAAW,IAAK,MAAM,GAAGrB,EAAE;MAAEK,EAAE,GAAG3C,OAAO,CAACoG,iBAAiB;MAAEA,iBAAiB,GAAGzD,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,EAAE;MAAEC,EAAE,GAAG5C,OAAO,CAAC6J,2BAA2B;MAAEA,2BAA2B,GAAGjH,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,EAAE;MAAEK,EAAE,GAAGjD,OAAO,CAAC6D,OAAO;MAAEA,OAAO,GAAGZ,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;IAC5c,IAAIuL,UAAU,GAAGhP,MAAM,CAACiP,MAAM,CAAC,CAAC,CAAC,EAAEzO,OAAO,EAAE;MACxC8F,KAAK,EAAEA,KAAK;MACZhD,SAAS,EAAEA,SAAS;MACpBW,WAAW,EAAEA,WAAW;MACxBE,WAAW,EAAEA,WAAW;MACxByC,iBAAiB,EAAEA,iBAAiB;MACpCyD,2BAA2B,EAAEA,2BAA2B;MACxDhG,OAAO,EAAEA;IACb,CAAC,CAAC;IACF,IAAI6K,aAAa,GAAG,SAAAA,CAAU5L,SAAS,EAAE;MACrC;MACA;MACA;MACA0L,UAAU,CAAC1L,SAAS,GAAGA,SAAS;MAChC,IAAI6L,eAAe,GAAG1O,KAAK,CAAC2O,kBAAkB,CAAClG,SAAS,EAAE8F,UAAU,EAAEtG,aAAa,CAAC;MACpF;MACA;MACA;MACAsG,UAAU,CAAC/K,WAAW,KAAK,SAAS;MAChC;MACA;MACAkL,eAAe,CAACE,OAAO,CAAC5H,MAAM,GAAG,CAAC,IAClCyB,SAAS,CAACnC,eAAe,EAAE;QAC3BmC,SAAS,CAACnC,eAAe,CAAC,sBAAsB,CAAC,CAAC,aAAa,EAAEvG,OAAO,CAAC;MAC7E;MACA,OAAO2O,eAAe;IAC1B,CAAC;IACD;IACA;IACA,IAAIG,eAAe,GAAG,SAAAA,CAAA,EAAY;MAAE,OAAO7O,KAAK,CAACI,cAAc,CAACwM,MAAM,CAAChL,OAAO,CAAC;IAAE,CAAC;IAClF,IAAI,CAACxB,cAAc,CAACsJ,GAAG,CAAC9H,OAAO,EAAE,UAAUkN,MAAM,EAAE;MAC/CD,eAAe,CAAC,CAAC;MACjB;MACAE,UAAU,CAAC,YAAY;QAAE,OAAO5G,OAAO,CAACnG,MAAM,CAAC8M,MAAM,CAAC;MAAE,CAAC,CAAC;IAC9D,CAAC,CAAC;IACF,IAAI3G,OAAO,EAAE6G,oBAAoB;IACjC;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,IAAI,CAAC9K,eAAe,CAACqK,UAAU,CAAC1I,KAAK,CAAC,CAAC9H,gBAAgB,EAAE;MACzDoK,OAAO,GAAG,IAAI9J,OAAO,CAAC,IAAI,CAAC4C,UAAU,CAChCmD,oBAAoB,CAACmK,UAAU,CAAC1I,KAAK,EAAE0I,UAAU,CAAC1L,SAAS,EAAE0L,UAAU,CAAC3K,OAAO,CAAC,CAChFgE,IAAI,CAAC6G,aAAa,CAAC,CACnB7G,IAAI,CAAC,UAAU8G,eAAe,EAAE;QAAE,OAAOA,eAAe,CAACE,OAAO;MAAE,CAAC,CAAC,CAAC;MAC1E;MACA;MACA;MACA;MACA;MACAI,oBAAoB,GAAG,IAAI;IAC/B,CAAC,MACI;MACD,IAAIN,eAAe,GAAGD,aAAa,CAACF,UAAU,CAAC1L,SAAS,CAAC;MACzDmM,oBAAoB,GAAGN,eAAe,CAACO,QAAQ;MAC/C9G,OAAO,GAAG,IAAI9J,OAAO,CAACqQ,eAAe,CAACE,OAAO,CAAC;IAClD;IACAzG,OAAO,CAACC,OAAO,CAACR,IAAI,CAACiH,eAAe,EAAEA,eAAe,CAAC;IACtD,OAAO;MACH1G,OAAO,EAAEA,OAAO;MAChB8G,QAAQ,EAAED;IACd,CAAC;EACL,CAAC;EACDlP,YAAY,CAACN,SAAS,CAACyD,cAAc,GAAG,UAAUd,EAAE,EAAE;IAClD,IAAInC,KAAK,GAAG,IAAI;IAChB,IAAIkH,WAAW,GAAG/E,EAAE,CAAC+E,WAAW;MAAEQ,OAAO,GAAGvF,EAAE,CAACuF,OAAO;MAAErF,EAAE,GAAGF,EAAE,CAAC+D,UAAU;MAAEA,UAAU,GAAG7D,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,GAAGA,EAAE;MAAEK,EAAE,GAAGP,EAAE,CAAC+C,gBAAgB;MAAEA,gBAAgB,GAAGxC,EAAE,KAAK,KAAK,CAAC,GAAGwD,UAAU,GAAG5H,YAAY,CAAC,gBAAgB,CAAC,GAAG,KAAK,CAAC,GAAGoE,EAAE;MAAEY,cAAc,GAAGnB,EAAE,CAACmB,cAAc;IAC/Q,IAAI4L,mBAAmB,GAAG,IAAI/O,GAAG,CAAC,CAAC;IACnC,IAAIuH,OAAO,EAAE;MACT,IAAI,CAACiD,oBAAoB,CAACjD,OAAO,CAAC,CAAChG,OAAO,CAAC,UAAUyJ,EAAE,EAAEvJ,OAAO,EAAE;QAC9DsN,mBAAmB,CAACxF,GAAG,CAAC9H,OAAO,EAAE;UAC7BuJ,EAAE,EAAEA,EAAE;UACNgE,QAAQ,EAAEnP,KAAK,CAACsL,QAAQ,CAAC1J,OAAO,CAAC,CAACwN,OAAO,CAAC;QAC9C,CAAC,CAAC;MACN,CAAC,CAAC;IACN;IACA,IAAIC,OAAO,GAAG,IAAIlP,GAAG,CAAC,CAAC;IACvB,IAAI+G,WAAW,EAAE;MACb,IAAI,CAACtG,KAAK,CAAC0O,KAAK,CAAC;QACbjM,MAAM,EAAE6D,WAAW;QACnB;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACAhB,UAAU,EAAGA,UAAU,IAAIhB,gBAAgB,IAAK,KAAK;QACrD;QACA;QACA;QACA;QACA;QACA;QACA;QACAA,gBAAgB,EAAEA,gBAAgB;QAClCqK,cAAc,EAAE,SAAAA,CAAUC,KAAK,EAAEzJ,IAAI,EAAEoJ,QAAQ,EAAE;UAC7C,IAAIhE,EAAE,GAAGqE,KAAK,CAACC,OAAO,YAAYvQ,SAAS,IAAIsQ,KAAK,CAACC,OAAO,CAACnJ,eAAe;UAC5E,IAAI6E,EAAE,EAAE;YACJ,IAAI7H,cAAc,EAAE;cAChB;cACA;cACA;cACA4L,mBAAmB,CAACtC,MAAM,CAACzB,EAAE,CAACvJ,OAAO,CAAC;cACtC,IAAIiD,MAAM,GAAGvB,cAAc,CAAC6H,EAAE,EAAEpF,IAAI,EAAEoJ,QAAQ,CAAC;cAC/C,IAAItK,MAAM,KAAK,IAAI,EAAE;gBACjB;gBACA;gBACAA,MAAM,GAAGsG,EAAE,CAACY,OAAO,CAAC,CAAC;cACzB;cACA;cACA;cACA,IAAIlH,MAAM,KAAK,KAAK,EAAE;gBAClBwK,OAAO,CAAC3F,GAAG,CAACyB,EAAE,EAAEtG,MAAM,CAAC;cAC3B;cACA;cACA;cACA,OAAOA,MAAM;YACjB;YACA,IAAIvB,cAAc,KAAK,IAAI,EAAE;cACzB;cACA;cACA;cACA4L,mBAAmB,CAACxF,GAAG,CAACyB,EAAE,CAACvJ,OAAO,EAAE;gBAAEuJ,EAAE,EAAEA,EAAE;gBAAEgE,QAAQ,EAAEA,QAAQ;gBAAEpJ,IAAI,EAAEA;cAAK,CAAC,CAAC;YACnF;UACJ;QACJ;MACJ,CAAC,CAAC;IACN;IACA,IAAImJ,mBAAmB,CAAC7D,IAAI,EAAE;MAC1B6D,mBAAmB,CAACxN,OAAO,CAAC,UAAUS,EAAE,EAAEP,OAAO,EAAE;QAC/C,IAAIuJ,EAAE,GAAGhJ,EAAE,CAACgJ,EAAE;UAAEgE,QAAQ,GAAGhN,EAAE,CAACgN,QAAQ;UAAEpJ,IAAI,GAAG5D,EAAE,CAAC4D,IAAI;QACtD,IAAIlB,MAAM;QACV;QACA;QACA,IAAIvB,cAAc,EAAE;UAChB,IAAI,CAACyC,IAAI,EAAE;YACP,IAAIwC,IAAI,GAAG4C,EAAE,CAAC,WAAW,CAAC;YAC1B5C,IAAI,CAACmC,KAAK,CAAC,CAAC,CAAC,CAAC;YACd3E,IAAI,GAAGwC,IAAI,CAAC6G,OAAO,CAAC,CAAC;UACzB;UACAvK,MAAM,GAAGvB,cAAc,CAAC6H,EAAE,EAAEpF,IAAI,EAAEoJ,QAAQ,CAAC;QAC/C;QACA;QACA,IAAI,CAAC7L,cAAc,IAAIuB,MAAM,KAAK,IAAI,EAAE;UACpCA,MAAM,GAAGsG,EAAE,CAACY,OAAO,CAAC,CAAC;QACzB;QACA,IAAIlH,MAAM,KAAK,KAAK,EAAE;UAClBwK,OAAO,CAAC3F,GAAG,CAACyB,EAAE,EAAEtG,MAAM,CAAC;QAC3B;QACA,IAAIjD,OAAO,CAAC8N,OAAO,CAAC,oBAAoB,CAAC,IAAI,CAAC,EAAE;UAC5C1P,KAAK,CAAC6B,oBAAoB,CAACD,OAAO,CAAC;QACvC;MACJ,CAAC,CAAC;IACN;IACA,IAAIsD,gBAAgB,EAAE;MAClB;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAI,CAACtE,KAAK,CAACsE,gBAAgB,CAACA,gBAAgB,CAAC;IACjD;IACA,OAAOmK,OAAO;EAClB,CAAC;EACDvP,YAAY,CAACN,SAAS,CAACmP,kBAAkB,GAAG,UAAUlG,SAAS,EAAEtG,EAAE;EACnE;EACA;EACA;EACA8F,aAAa,EAAE;IACX,IAAIjI,KAAK,GAAG,IAAI;IAChB,IAAI6F,KAAK,GAAG1D,EAAE,CAAC0D,KAAK;MAAEhD,SAAS,GAAGV,EAAE,CAACU,SAAS;MAAEW,WAAW,GAAGrB,EAAE,CAACqB,WAAW;MAAEmM,kBAAkB,GAAGxN,EAAE,CAACwN,kBAAkB;MAAEjM,WAAW,GAAGvB,EAAE,CAACuB,WAAW;MAAEyC,iBAAiB,GAAGhE,EAAE,CAACgE,iBAAiB;MAAEvC,OAAO,GAAGzB,EAAE,CAACyB,OAAO;MAAEgG,2BAA2B,GAAGzH,EAAE,CAACyH,2BAA2B;IACpR,IAAIgG,gBAAgB,GAAGnH,SAAS,CAACR,aAAa;IAC9CQ,SAAS,CAACsB,IAAI,CAAC;MACXpJ,QAAQ,EAAEkF,KAAK;MACfhD,SAAS,EAAEA,SAAS;MACpBoF,aAAa,EAAEA;IACnB,CAAC,CAAC;IACF,IAAI4H,SAAS,GAAG,SAAAA,CAAA,EAAY;MAAE,OAAOpH,SAAS,CAAC2G,OAAO,CAAC,CAAC;IAAE,CAAC;IAC3D,IAAIU,gBAAgB,GAAG,SAAAA,CAAU/J,IAAI,EAAEkC,aAAa,EAAE;MAClD,IAAIA,aAAa,KAAK,KAAK,CAAC,EAAE;QAAEA,aAAa,GAAGQ,SAAS,CAACR,aAAa,IAAIjJ,aAAa,CAACsF,OAAO;MAAE;MAClG,IAAIqB,IAAI,GAAGI,IAAI,CAAClB,MAAM;MACtB,IAAIiD,UAAU,CAACC,OAAO,KAAK,KAAK,IAAI,CAAC5B,iBAAiB,IAAI,CAAC9I,KAAK,CAACsI,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE;QACxE5G,qBAAqB,CAACgH,IAAI,CAACgK,OAAO,CAAC;MACvC;MACA,IAAIC,QAAQ,GAAG,SAAAA,CAAUrK,IAAI,EAAE;QAC3B,OAAOzH,UAAU,CAACuP,EAAE,CAACzQ,QAAQ,CAAC;UAAE2I,IAAI,EAAEA,IAAI;UAAErB,OAAO,EAAErF,wBAAwB,CAACgJ,aAAa,CAAC;UAAEA,aAAa,EAAEA;QAAc,CAAC,EAAGlC,IAAI,CAACa,QAAQ,GAAG,IAAI,GAAG;UAAEqJ,OAAO,EAAE;QAAK,CAAE,CAAC,CAAC;MAC9K,CAAC;MACD,IAAItK,IAAI,IAAI3F,KAAK,CAACkE,eAAe,CAAC2B,KAAK,CAAC,CAACgD,kBAAkB,EAAE;QACzD,OAAO7I,KAAK,CAACiB,UAAU,CAClByM,YAAY,CAAC;UACd/M,QAAQ,EAAEkF,KAAK;UACf8H,YAAY,EAAE;YAAEhI,IAAI,EAAEA;UAAK,CAAC;UAC5B/B,OAAO,EAAEA,OAAO;UAChBf,SAAS,EAAEA,SAAS;UACpBqN,sBAAsB,EAAE;QAC5B,CAAC,CAAC,CACGtI,IAAI,CAAC,UAAUuI,QAAQ,EAAE;UAAE,OAAOH,QAAQ,CAACG,QAAQ,CAACxK,IAAI,IAAI,KAAK,CAAC,CAAC;QAAE,CAAC,CAAC;MAChF;MACA;MACA;MACA;MACA;MACA,IAAIjC,WAAW,KAAK,MAAM,IACtBuE,aAAa,KAAKjJ,aAAa,CAAC+M,OAAO,IACvChB,KAAK,CAACC,OAAO,CAACjF,IAAI,CAACgK,OAAO,CAAC,EAAE;QAC7B,OAAOC,QAAQ,CAAC,KAAK,CAAC,CAAC;MAC3B;MACA,OAAOA,QAAQ,CAACrK,IAAI,CAAC;IACzB,CAAC;IACD,IAAIkI,kBAAkB,GAAGrK,WAAW,KAAK,UAAU,GAAG,CAAC,CAAC;IACpD;IACA;IAAA,EACGyE,aAAa,KAAKjJ,aAAa,CAAC+M,OAAO,IACtC4D,kBAAkB,KAAK,OAAO,GAC9B,CAAC,CAAC,qCACA,CAAC,CAAC;IACZ,IAAIS,eAAe,GAAG,SAAAA,CAAA,EAAY;MAC9B,OAAOpQ,KAAK,CAAC4N,kBAAkB,CAACnF,SAAS,EAAEoF,kBAAkB,EAAE;QAC3DhI,KAAK,EAAEA,KAAK;QACZhD,SAAS,EAAEA,SAAS;QACpBe,OAAO,EAAEA,OAAO;QAChBJ,WAAW,EAAEA,WAAW;QACxBE,WAAW,EAAEA;MACjB,CAAC,CAAC;IACN,CAAC;IACD,IAAI2M,YAAY,GAAGzG,2BAA2B,IAC1C,OAAOgG,gBAAgB,KAAK,QAAQ,IACpCA,gBAAgB,KAAK3H,aAAa,IAClChJ,wBAAwB,CAACgJ,aAAa,CAAC;IAC3C,QAAQzE,WAAW;MACf;MACA,KAAK,aAAa;QAAE;UAChB,IAAIuC,IAAI,GAAG8J,SAAS,CAAC,CAAC;UACtB,IAAI9J,IAAI,CAACa,QAAQ,EAAE;YACf,OAAO;cACHqI,QAAQ,EAAE,KAAK;cACfL,OAAO,EAAE,CAACkB,gBAAgB,CAAC/J,IAAI,EAAE0C,SAAS,CAAC0F,SAAS,CAAC,CAAC,CAAC;YAC3D,CAAC;UACL;UACA,IAAIhI,iBAAiB,IAAIkK,YAAY,EAAE;YACnC,OAAO;cACHpB,QAAQ,EAAE,IAAI;cACdL,OAAO,EAAE,CAACkB,gBAAgB,CAAC/J,IAAI,CAAC,EAAEqK,eAAe,CAAC,CAAC;YACvD,CAAC;UACL;UACA,OAAO;YAAEnB,QAAQ,EAAE,IAAI;YAAEL,OAAO,EAAE,CAACwB,eAAe,CAAC,CAAC;UAAE,CAAC;QAC3D;MACA,KAAK,mBAAmB;QAAE;UACtB,IAAIrK,IAAI,GAAG8J,SAAS,CAAC,CAAC;UACtB,IAAI9J,IAAI,CAACa,QAAQ,IAAIT,iBAAiB,IAAIkK,YAAY,EAAE;YACpD,OAAO;cACHpB,QAAQ,EAAE,IAAI;cACdL,OAAO,EAAE,CAACkB,gBAAgB,CAAC/J,IAAI,CAAC,EAAEqK,eAAe,CAAC,CAAC;YACvD,CAAC;UACL;UACA,OAAO;YAAEnB,QAAQ,EAAE,IAAI;YAAEL,OAAO,EAAE,CAACwB,eAAe,CAAC,CAAC;UAAE,CAAC;QAC3D;MACA,KAAK,YAAY;QACb,OAAO;UACHnB,QAAQ,EAAE,KAAK;UACfL,OAAO,EAAE,CAACkB,gBAAgB,CAACD,SAAS,CAAC,CAAC,EAAEpH,SAAS,CAAC0F,SAAS,CAAC,CAAC,CAAC;QAClE,CAAC;MACL,KAAK,cAAc;QACf,IAAIkC,YAAY,EAAE;UACd,OAAO;YACHpB,QAAQ,EAAE,IAAI;YACdL,OAAO,EAAE,CAACkB,gBAAgB,CAACD,SAAS,CAAC,CAAC,CAAC,EAAEO,eAAe,CAAC,CAAC;UAC9D,CAAC;QACL;QACA,OAAO;UAAEnB,QAAQ,EAAE,IAAI;UAAEL,OAAO,EAAE,CAACwB,eAAe,CAAC,CAAC;QAAE,CAAC;MAC3D,KAAK,UAAU;QACX,IAAIC,YAAY,EAAE;UACd,OAAO;YACHpB,QAAQ,EAAE,IAAI;YACd;YACA;YACA;YACAL,OAAO,EAAE,CAACkB,gBAAgB,CAACrH,SAAS,CAAC2G,OAAO,CAAC,CAAC,CAAC,EAAEgB,eAAe,CAAC,CAAC;UACtE,CAAC;QACL;QACA,OAAO;UAAEnB,QAAQ,EAAE,IAAI;UAAEL,OAAO,EAAE,CAACwB,eAAe,CAAC,CAAC;QAAE,CAAC;MAC3D,KAAK,SAAS;QACV,OAAO;UAAEnB,QAAQ,EAAE,KAAK;UAAEL,OAAO,EAAE;QAAG,CAAC;IAC/C;EACJ,CAAC;EACD9O,YAAY,CAACN,SAAS,CAAC8L,QAAQ,GAAG,UAAU1J,OAAO,EAAE;IACjD,IAAIA,OAAO,IAAI,CAAC,IAAI,CAAC1B,OAAO,CAACyI,GAAG,CAAC/G,OAAO,CAAC,EAAE;MACvC,IAAI,CAAC1B,OAAO,CAACwJ,GAAG,CAAC9H,OAAO,EAAE,IAAI1C,SAAS,CAAC,IAAI,EAAE0C,OAAO,CAAC,CAAC;IAC3D;IACA,OAAO,IAAI,CAAC1B,OAAO,CAACwG,GAAG,CAAC9E,OAAO,CAAC;EACpC,CAAC;EACD9B,YAAY,CAACN,SAAS,CAAC0N,cAAc,GAAG,UAAUtJ,OAAO,EAAE;IACvD,IAAIA,OAAO,KAAK,KAAK,CAAC,EAAE;MAAEA,OAAO,GAAG,CAAC,CAAC;IAAE;IACxC,IAAI0M,UAAU,GAAG,IAAI,CAACrP,UAAU,CAACiM,cAAc,CAACtJ,OAAO,CAAC;IACxD,OAAO5G,QAAQ,CAACA,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,CAACsE,cAAc,CAAC,EAAEgP,UAAU,CAAC,EAAE;MAAErQ,eAAe,EAAE,IAAI,CAACA;IAAgB,CAAC,CAAC;EACvH,CAAC;EACD,OAAOH,YAAY;AACvB,CAAC,CAAC,CAAE;AACJ,SAASA,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}