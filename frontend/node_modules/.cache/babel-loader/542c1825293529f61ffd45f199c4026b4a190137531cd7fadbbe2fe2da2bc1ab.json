{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nexport var defaultMapPropsToOptions = function () {\n  return {};\n};\nexport var defaultMapResultToProps = function (props) {\n  return props;\n};\nexport var defaultMapPropsToSkip = function () {\n  return false;\n};\nexport function getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n}\nexport function calculateVariablesFromProps(operation, props) {\n  var variables = {};\n  for (var _i = 0, _a = operation.variables; _i < _a.length; _i++) {\n    var _b = _a[_i],\n      variable = _b.variable,\n      type = _b.type;\n    if (!variable.name || !variable.name.value) continue;\n    var variableName = variable.name.value;\n    var variableProp = props[variableName];\n    if (typeof variableProp !== \"undefined\") {\n      variables[variableName] = variableProp;\n      continue;\n    }\n    // Allow optional props\n    if (type.kind !== \"NonNullType\") {\n      variables[variableName] = undefined;\n    }\n  }\n  return variables;\n}\n// base class for hocs to easily manage refs\nvar GraphQLBase = /** @class */function (_super) {\n  __extends(GraphQLBase, _super);\n  function GraphQLBase(props) {\n    var _this = _super.call(this, props) || this;\n    _this.withRef = false;\n    _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);\n    return _this;\n  }\n  GraphQLBase.prototype.getWrappedInstance = function () {\n    invariant(this.withRef, 48);\n    return this.wrappedInstance;\n  };\n  GraphQLBase.prototype.setWrappedInstance = function (ref) {\n    this.wrappedInstance = ref;\n  };\n  return GraphQLBase;\n}(React.Component);\nexport { GraphQLBase };","map":{"version":3,"names":["invariant","React","defaultMapPropsToOptions","defaultMapResultToProps","props","defaultMapPropsToSkip","getDisplayName","WrappedComponent","displayName","name","calculateVariablesFromProps","operation","variables","_i","_a","length","_b","variable","type","value","variableName","variableProp","kind","undefined","GraphQLBase","_super","__extends","_this","call","withRef","setWrappedInstance","bind","prototype","getWrappedInstance","wrappedInstance","ref","Component"],"sources":["C:\\laragon\\www\\php_projects\\scandiweb_store\\frontend\\node_modules\\@apollo\\src\\react\\hoc\\hoc-utils.tsx"],"sourcesContent":["import { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport type { OperationVariables } from \"../../core/index.js\";\nimport type { IDocumentDefinition } from \"../parser/index.js\";\n\nexport const defaultMapPropsToOptions = () => ({});\nexport const defaultMapResultToProps: <P>(props: P) => P = (props) => props;\nexport const defaultMapPropsToSkip = () => false;\n\nexport function getDisplayName<P>(WrappedComponent: React.ComponentType<P>) {\n  return WrappedComponent.displayName || WrappedComponent.name || \"Component\";\n}\n\nexport function calculateVariablesFromProps<TProps>(\n  operation: IDocumentDefinition,\n  props: TProps\n) {\n  let variables: OperationVariables = {};\n  for (let { variable, type } of operation.variables) {\n    if (!variable.name || !variable.name.value) continue;\n\n    const variableName = variable.name.value;\n    const variableProp = (props as any)[variableName];\n\n    if (typeof variableProp !== \"undefined\") {\n      variables[variableName] = variableProp;\n      continue;\n    }\n\n    // Allow optional props\n    if (type.kind !== \"NonNullType\") {\n      variables[variableName] = undefined;\n    }\n  }\n  return variables;\n}\n\nexport type RefSetter<TChildProps> = (\n  ref: React.ComponentClass<TChildProps>\n) => void | void;\n\n// base class for hocs to easily manage refs\nexport class GraphQLBase<\n  TProps,\n  TChildProps,\n  TState = any,\n> extends React.Component<TProps, TState> {\n  public withRef: boolean = false;\n  // wrapped instance\n  private wrappedInstance?: React.ComponentClass<TChildProps>;\n\n  constructor(props: TProps) {\n    super(props);\n    this.setWrappedInstance = this.setWrappedInstance.bind(this);\n  }\n\n  getWrappedInstance() {\n    invariant(\n      this.withRef,\n      `To access the wrapped instance, you need to specify ` +\n        `{ withRef: true } in the options`\n    );\n\n    return this.wrappedInstance;\n  }\n\n  setWrappedInstance(ref: React.ComponentClass<TChildProps>) {\n    this.wrappedInstance = ref;\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,kCAAkC;AAC5D,OAAO,KAAKC,KAAK,MAAM,SAAS;AAIhC,OAAO,IAAMC,wBAAwB,GAAG,SAAAA,CAAA;EAAM,OAAC,EAAE;AAAH,CAAI;AAClD,OAAO,IAAMC,uBAAuB,GAAuB,SAAAA,CAACC,KAAK;EAAK,OAAAA,KAAK;AAAL,CAAK;AAC3E,OAAO,IAAMC,qBAAqB,GAAG,SAAAA,CAAA;EAAM,YAAK;AAAL,CAAK;AAEhD,OAAM,SAAUC,cAAcA,CAAIC,gBAAwC;EACxE,OAAOA,gBAAgB,CAACC,WAAW,IAAID,gBAAgB,CAACE,IAAI,IAAI,WAAW;AAC7E;AAEA,OAAM,SAAUC,2BAA2BA,CACzCC,SAA8B,EAC9BP,KAAa;EAEb,IAAIQ,SAAS,GAAuB,EAAE;EACtC,KAA+B,IAAAC,EAAA,IAAmB,EAAnBC,EAAA,GAAAH,SAAS,CAACC,SAAS,EAAnBC,EAAA,GAAAC,EAAA,CAAAC,MAAmB,EAAnBF,EAAA,EAAmB,EAAE;IAA3C,IAAAG,EAAA,GAAAF,EAAA,CAAAD,EAAA,CAAkB;MAAhBI,QAAQ,GAAAD,EAAA,CAAAC,QAAA;MAAEC,IAAI,GAAAF,EAAA,CAAAE,IAAA;IACvB,IAAI,CAACD,QAAQ,CAACR,IAAI,IAAI,CAACQ,QAAQ,CAACR,IAAI,CAACU,KAAK,EAAE;IAE5C,IAAMC,YAAY,GAAGH,QAAQ,CAACR,IAAI,CAACU,KAAK;IACxC,IAAME,YAAY,GAAIjB,KAAa,CAACgB,YAAY,CAAC;IAEjD,IAAI,OAAOC,YAAY,KAAK,WAAW,EAAE;MACvCT,SAAS,CAACQ,YAAY,CAAC,GAAGC,YAAY;MACtC;IACF;IAEA;IACA,IAAIH,IAAI,CAACI,IAAI,KAAK,aAAa,EAAE;MAC/BV,SAAS,CAACQ,YAAY,CAAC,GAAGG,SAAS;IACrC;EACF;EACA,OAAOX,SAAS;AAClB;AAMA;AACA,IAAAY,WAAA,0BAAAC,MAAA;EAIUC,SAAA,CAAAF,WAAA,EAAAC,MAAA;EAKR,SAAAD,YAAYpB,KAAa;IACvB,IAAAuB,KAAA,GAAAF,MAAK,CAAAG,IAAA,OAACxB,KAAK,CAAC;IALPuB,KAAA,CAAAE,OAAO,GAAY,KAAK;IAM7BF,KAAI,CAACG,kBAAkB,GAAGH,KAAI,CAACG,kBAAkB,CAACC,IAAI,CAACJ,KAAI,CAAC;;EAC9D;EAEAH,WAAA,CAAAQ,SAAA,CAAAC,kBAAkB,GAAlB;IACEjC,SAAS,CACP,IAAI,CAAC6B,OAAO,EACZ;WACE,KAAAK,eAAA;;EAINV,WAAC,CAAAQ,SAAA,CAAAF,kBAAA,aAAAK,GAAA;IAED,KAAAD,eAAA,GAAAC,GAAA;;EAEA,OAACX,WAAA;OACH,CAAAY,SAAA;AAAA,SAvBgBZ,WAuBf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}