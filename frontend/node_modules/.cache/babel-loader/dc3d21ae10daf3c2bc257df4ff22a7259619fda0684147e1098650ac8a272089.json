{"ast":null,"code":"var _jsxFileName = \"C:\\\\laragon\\\\www\\\\php_projects\\\\scandiweb_store\\\\frontend\\\\src\\\\pages\\\\category\\\\CategoryPage.jsx\";\nimport React, { Component } from 'react';\nimport ProductBox from '../../components/product/ProductBox';\nimport { gql } from '@apollo/client';\nimport { Query } from '@apollo/client/react/components';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GET_ALL_PRODUCTS_WITH_CATEGORIES = gql`\n    query GetAllProductsWithCategories {\n     \n  products {\n    id\n    name\n    in_stock\n    galleries {\n      image_url\n    }\n    description\n    category {\n      id\n      name\n    }\n    sku_id\n    attributes {\n      name\n      value\n    }\n        prices {\n      amount\n      currency_label\n      currency_symbol\n    }\n  }\n\n\n    }\n`;\nclass CategoryPage extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      categoryName: null\n    };\n  }\n  componentDidMount() {\n    // Extract the category name from the URL (assuming it's the third segment)\n    const categoryName = window.location.pathname.split(\"/\")[2];\n    this.setState({\n      categoryName\n    });\n  }\n  render() {\n    const {\n      categoryName\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"categoryPage\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container py-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: categoryName ? `${categoryName}` : 'Loading...'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Query, {\n          query: GET_ALL_PRODUCTS_WITH_CATEGORIES,\n          children: ({\n            loading,\n            error,\n            data\n          }) => {\n            if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Loading...\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 49\n            }, this);\n            if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Error: \", error.message]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 47\n            }, this);\n\n            // Get all products\n            const allProducts = data.products;\n\n            // Check if categoryName is 'all' or filter by category\n            let filteredProducts;\n            if (categoryName === 'all') {\n              filteredProducts = allProducts; // Show all products\n            } else {\n              filteredProducts = allProducts.filter(product => product.category.name === categoryName); // Filter products by category name\n            }\n\n            // Render the products\n            if (filteredProducts.length > 0) {\n              console.log(filteredProducts[0].prices[0][\"amount\"]);\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"row\",\n                children: filteredProducts.map(product => {\n                  var _product$galleries$;\n                  return /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"col-12 col-lg-4\",\n                    children: /*#__PURE__*/_jsxDEV(ProductBox, {\n                      name: product.name,\n                      image: ((_product$galleries$ = product.galleries[0]) === null || _product$galleries$ === void 0 ? void 0 : _product$galleries$.image_url) || 'default-image-url',\n                      price: product.prices[0][\"amount\"],\n                      id: product.id\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 81,\n                      columnNumber: 49\n                    }, this)\n                  }, product.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 80,\n                    columnNumber: 45\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 37\n              }, this);\n            } else {\n              return /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"No products found in this category.\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 40\n              }, this);\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }\n}\nexport default CategoryPage;\n{/*\r\n    \r\n    \r\n {\r\n    categoryName && (\r\n        <Query query={GET_ALL_PRODUCTS_WITH_CATEGORIES}>\r\n            {({ loading, error, data }) => {\r\n                if (loading) return <p>Loading...</p>;\r\n                if (error) return <p>Error: {error.message}</p>;\r\n \n                // If categoryName is 'all', show products from all categories\r\n                if (categoryName.toLowerCase() === 'all') {\r\n                    const allProducts = data.products;\r\n                    console.log(allProducts)\r\n \n                    if (allProducts.length > 0) {\r\n                        return (\r\n                            <div className='row'>\r\n                                {allProducts.map((product) => (\r\n                                    <div className='col-12 col-lg-4' key={product.id}>\r\n                                        <ProductBox\r\n                                            name={product.name}\r\n                                            image={product.galleries[0]?.image_url || 'default-image-url'}\r\n                                            price={product.price}\r\n                                            id={product.id}\r\n                                        />\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        );\r\n                    } else {\r\n                        return <p>No products found in all categories.</p>;\r\n                    }\r\n                }\r\n \n                // Find products that belong to the specific category that matches the categoryName from the URL\r\n                const filteredProducts = data.products.filter(product => product.category?.name.toLowerCase() === categoryName.toLowerCase());\r\n \n                if (filteredProducts.length > 0) {\r\n                    return (\r\n                        <div className='row'>\r\n                            {filteredProducts.map((product) => (\r\n                                <div className='col-12 col-lg-4' key={product.id}>\r\n                                    <ProductBox\r\n                                        name={product.name}\r\n                                        image={product.galleries[0]?.image_url || 'default-image-url'}\r\n                                        price={product.price}\r\n                                        id={product.id}\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    return <p>No products found in this category.</p>;\r\n                }\r\n            }}\r\n        </Query>\r\n    )\r\n }\r\n    \r\n    */}","map":{"version":3,"names":["React","Component","ProductBox","gql","Query","jsxDEV","_jsxDEV","GET_ALL_PRODUCTS_WITH_CATEGORIES","CategoryPage","constructor","args","state","categoryName","componentDidMount","window","location","pathname","split","setState","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber","query","loading","error","data","message","allProducts","products","filteredProducts","filter","product","category","name","length","console","log","prices","map","_product$galleries$","image","galleries","image_url","price","id"],"sources":["C:/laragon/www/php_projects/scandiweb_store/frontend/src/pages/category/CategoryPage.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport ProductBox from '../../components/product/ProductBox';\r\nimport { gql } from '@apollo/client';\r\nimport { Query } from '@apollo/client/react/components';\r\n\r\nconst GET_ALL_PRODUCTS_WITH_CATEGORIES = gql`\r\n    query GetAllProductsWithCategories {\r\n     \r\n  products {\r\n    id\r\n    name\r\n    in_stock\r\n    galleries {\r\n      image_url\r\n    }\r\n    description\r\n    category {\r\n      id\r\n      name\r\n    }\r\n    sku_id\r\n    attributes {\r\n      name\r\n      value\r\n    }\r\n        prices {\r\n      amount\r\n      currency_label\r\n      currency_symbol\r\n    }\r\n  }\r\n\r\n\r\n    }\r\n`;\r\n\r\nclass CategoryPage extends Component {\r\n    state = {\r\n        categoryName: null,\r\n    };\r\n\r\n    componentDidMount() {\r\n        // Extract the category name from the URL (assuming it's the third segment)\r\n        const categoryName = window.location.pathname.split(\"/\")[2];\r\n        this.setState({ categoryName });\r\n    }\r\n\r\n    render() {\r\n        const { categoryName } = this.state;\r\n\r\n        return (\r\n            <div className='categoryPage'>\r\n                <div className='container py-5'>\r\n                    <h2>{categoryName ? `${categoryName}` : 'Loading...'}</h2>\r\n\r\n                    <Query query={GET_ALL_PRODUCTS_WITH_CATEGORIES}>\r\n                        {({ loading, error, data }) => {\r\n                            if (loading) return <p>Loading...</p>;\r\n                            if (error) return <p>Error: {error.message}</p>;\r\n\r\n                            // Get all products\r\n                            const allProducts = data.products;\r\n\r\n                            // Check if categoryName is 'all' or filter by category\r\n                            let filteredProducts;\r\n                            if (categoryName === 'all') {\r\n                                filteredProducts = allProducts; // Show all products\r\n                            } else {\r\n                                filteredProducts = allProducts.filter(product =>\r\n                                    product.category.name === categoryName\r\n                                ); // Filter products by category name\r\n                            }\r\n\r\n                            // Render the products\r\n                            if (filteredProducts.length > 0) {\r\n                                console.log(filteredProducts[0].prices[0][\"amount\"])\r\n                                return (\r\n                                    <div className='row'>\r\n                                        {filteredProducts.map((product) => (\r\n                                            <div className='col-12 col-lg-4' key={product.id}>\r\n                                                <ProductBox\r\n                                                    name={product.name}\r\n                                                    image={product.galleries[0]?.image_url || 'default-image-url'}\r\n                                                    price={product.prices[0][\"amount\"]}\r\n                                                    id={product.id}\r\n                                                />\r\n                                            </div>\r\n                                        ))}\r\n                                    </div>\r\n                                );\r\n                            } else {\r\n                                return <p>No products found in this category.</p>;\r\n                            }\r\n                        }}\r\n                    </Query>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CategoryPage;\r\n\r\n{/*\r\n    \r\n    \r\n{\r\n    categoryName && (\r\n        <Query query={GET_ALL_PRODUCTS_WITH_CATEGORIES}>\r\n            {({ loading, error, data }) => {\r\n                if (loading) return <p>Loading...</p>;\r\n                if (error) return <p>Error: {error.message}</p>;\r\n\r\n                // If categoryName is 'all', show products from all categories\r\n                if (categoryName.toLowerCase() === 'all') {\r\n                    const allProducts = data.products;\r\n                    console.log(allProducts)\r\n\r\n                    if (allProducts.length > 0) {\r\n                        return (\r\n                            <div className='row'>\r\n                                {allProducts.map((product) => (\r\n                                    <div className='col-12 col-lg-4' key={product.id}>\r\n                                        <ProductBox\r\n                                            name={product.name}\r\n                                            image={product.galleries[0]?.image_url || 'default-image-url'}\r\n                                            price={product.price}\r\n                                            id={product.id}\r\n                                        />\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        );\r\n                    } else {\r\n                        return <p>No products found in all categories.</p>;\r\n                    }\r\n                }\r\n\r\n                // Find products that belong to the specific category that matches the categoryName from the URL\r\n                const filteredProducts = data.products.filter(product => product.category?.name.toLowerCase() === categoryName.toLowerCase());\r\n\r\n                if (filteredProducts.length > 0) {\r\n                    return (\r\n                        <div className='row'>\r\n                            {filteredProducts.map((product) => (\r\n                                <div className='col-12 col-lg-4' key={product.id}>\r\n                                    <ProductBox\r\n                                        name={product.name}\r\n                                        image={product.galleries[0]?.image_url || 'default-image-url'}\r\n                                        price={product.price}\r\n                                        id={product.id}\r\n                                    />\r\n                                </div>\r\n                            ))}\r\n                        </div>\r\n                    );\r\n                } else {\r\n                    return <p>No products found in this category.</p>;\r\n                }\r\n            }}\r\n        </Query>\r\n    )\r\n}\r\n    \r\n    */}\r\n\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,UAAU,MAAM,qCAAqC;AAC5D,SAASC,GAAG,QAAQ,gBAAgB;AACpC,SAASC,KAAK,QAAQ,iCAAiC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,MAAMC,gCAAgC,GAAGJ,GAAG;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMK,YAAY,SAASP,SAAS,CAAC;EAAAQ,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KACjCC,KAAK,GAAG;MACJC,YAAY,EAAE;IAClB,CAAC;EAAA;EAEDC,iBAAiBA,CAAA,EAAG;IAChB;IACA,MAAMD,YAAY,GAAGE,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3D,IAAI,CAACC,QAAQ,CAAC;MAAEN;IAAa,CAAC,CAAC;EACnC;EAEAO,MAAMA,CAAA,EAAG;IACL,MAAM;MAAEP;IAAa,CAAC,GAAG,IAAI,CAACD,KAAK;IAEnC,oBACIL,OAAA;MAAKc,SAAS,EAAC,cAAc;MAAAC,QAAA,eACzBf,OAAA;QAAKc,SAAS,EAAC,gBAAgB;QAAAC,QAAA,gBAC3Bf,OAAA;UAAAe,QAAA,EAAKT,YAAY,GAAG,GAAGA,YAAY,EAAE,GAAG;QAAY;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAE1DnB,OAAA,CAACF,KAAK;UAACsB,KAAK,EAAEnB,gCAAiC;UAAAc,QAAA,EAC1CA,CAAC;YAAEM,OAAO;YAAEC,KAAK;YAAEC;UAAK,CAAC,KAAK;YAC3B,IAAIF,OAAO,EAAE,oBAAOrB,OAAA;cAAAe,QAAA,EAAG;YAAU;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAG,CAAC;YACrC,IAAIG,KAAK,EAAE,oBAAOtB,OAAA;cAAAe,QAAA,GAAG,SAAO,EAACO,KAAK,CAACE,OAAO;YAAA;cAAAR,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAI,CAAC;;YAE/C;YACA,MAAMM,WAAW,GAAGF,IAAI,CAACG,QAAQ;;YAEjC;YACA,IAAIC,gBAAgB;YACpB,IAAIrB,YAAY,KAAK,KAAK,EAAE;cACxBqB,gBAAgB,GAAGF,WAAW,CAAC,CAAC;YACpC,CAAC,MAAM;cACHE,gBAAgB,GAAGF,WAAW,CAACG,MAAM,CAACC,OAAO,IACzCA,OAAO,CAACC,QAAQ,CAACC,IAAI,KAAKzB,YAC9B,CAAC,CAAC,CAAC;YACP;;YAEA;YACA,IAAIqB,gBAAgB,CAACK,MAAM,GAAG,CAAC,EAAE;cAC7BC,OAAO,CAACC,GAAG,CAACP,gBAAgB,CAAC,CAAC,CAAC,CAACQ,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC;cACpD,oBACInC,OAAA;gBAAKc,SAAS,EAAC,KAAK;gBAAAC,QAAA,EACfY,gBAAgB,CAACS,GAAG,CAAEP,OAAO;kBAAA,IAAAQ,mBAAA;kBAAA,oBAC1BrC,OAAA;oBAAKc,SAAS,EAAC,iBAAiB;oBAAAC,QAAA,eAC5Bf,OAAA,CAACJ,UAAU;sBACPmC,IAAI,EAAEF,OAAO,CAACE,IAAK;sBACnBO,KAAK,EAAE,EAAAD,mBAAA,GAAAR,OAAO,CAACU,SAAS,CAAC,CAAC,CAAC,cAAAF,mBAAA,uBAApBA,mBAAA,CAAsBG,SAAS,KAAI,mBAAoB;sBAC9DC,KAAK,EAAEZ,OAAO,CAACM,MAAM,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAE;sBACnCO,EAAE,EAAEb,OAAO,CAACa;oBAAG;sBAAA1B,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAClB;kBAAC,GANgCU,OAAO,CAACa,EAAE;oBAAA1B,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAO3C,CAAC;gBAAA,CACT;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACD,CAAC;YAEd,CAAC,MAAM;cACH,oBAAOnB,OAAA;gBAAAe,QAAA,EAAG;cAAmC;gBAAAC,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC;YACrD;UACJ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAEd;AACJ;AAEA,eAAejB,YAAY;AAE3B,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MA7DC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}