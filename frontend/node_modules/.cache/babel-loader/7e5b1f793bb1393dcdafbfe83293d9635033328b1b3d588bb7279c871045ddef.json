{"ast":null,"code":"var _jsxFileName = \"C:\\\\laragon\\\\www\\\\php_projects\\\\scandiweb_store\\\\frontend\\\\src\\\\context\\\\CartContext.js\";\nimport React, { createContext, Component } from 'react';\nimport { GET_CART, CLEAR_CART_MUTATION } from \"../graphql/queries\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CartContext = /*#__PURE__*/createContext();\nexport class CartProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      cart: [],\n      loading: true,\n      error: null\n    };\n    this.fetchCart = async () => {\n      try {\n        const response = await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query: GET_CART\n          })\n        });\n        const result = await response.json();\n        if (result.errors) {\n          this.setState({\n            error: result.errors[0].message,\n            loading: false\n          });\n        } else {\n          this.setState({\n            cart: result.data.cart.cartItems,\n            loading: false\n          });\n        }\n      } catch (err) {\n        this.setState({\n          error: 'Failed to fetch cart',\n          loading: false\n        });\n      }\n    };\n    this.addToCart = async (skuId, color, size, capacity) => {\n      const ADD_TO_CART_MUTATION = `\n      mutation add {\n        addToCart(sku_id: ${skuId}, color: ${color}, size: ${size}, capacity: ${capacity}) {\n          id\n        }\n      }\n    `;\n      try {\n        const response = await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Accept': 'application/json'\n          },\n          body: JSON.stringify({\n            query: ADD_TO_CART_MUTATION,\n            variables: {\n              skuId: skuId,\n              size: size || \"\",\n              color: color || \"\",\n              capacity: capacity || \"\"\n            }\n          })\n        });\n        const result = await response.json();\n        if (result.errors) {\n          console.error('Error adding item to cart:', result.errors);\n        } else {\n          this.fetchCart();\n        }\n      } catch (err) {\n        console.error('Failed to add item to cart:', err);\n      }\n    };\n    this.clearCart = async () => {\n      try {\n        const response = await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            query: CLEAR_CART_MUTATION\n          })\n        });\n        const result = await response.json();\n        if (result.errors) {\n          console.error('Error clearing cart:', result.errors);\n        } else {\n          this.setState({\n            cart: []\n          }, () => {\n            console.log('Cart cleared:', this.state.cart);\n          });\n        }\n      } catch (err) {\n        console.error('Failed to clear cart:', err);\n      }\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n      value: {\n        cart: this.state.cart,\n        loading: this.state.loading,\n        error: this.state.error,\n        fetchCart: this.fetchCart,\n        addToCart: this.addToCart,\n        clearCart: this.clearCart\n      },\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","createContext","Component","GET_CART","CLEAR_CART_MUTATION","jsxDEV","_jsxDEV","CartContext","CartProvider","constructor","args","state","cart","loading","error","fetchCart","response","fetch","method","headers","body","JSON","stringify","query","result","json","errors","setState","message","data","cartItems","err","addToCart","skuId","color","size","capacity","ADD_TO_CART_MUTATION","variables","console","clearCart","log","render","Provider","value","children","props","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/laragon/www/php_projects/scandiweb_store/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, Component } from 'react';\r\nimport { GET_CART, CLEAR_CART_MUTATION } from \"../graphql/queries\";\r\nexport const CartContext = createContext();\r\n\r\nexport class CartProvider extends Component {\r\n    state = {\r\n        cart: [],\r\n        loading: true,\r\n        error: null,\r\n    };\r\n\r\n\r\n    fetchCart = async () => {\r\n\r\n        try {\r\n            const response = await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ query: GET_CART }),\r\n            });\r\n            const result = await response.json();\r\n            if (result.errors) {\r\n                this.setState({ error: result.errors[0].message, loading: false });\r\n            } else {\r\n                this.setState({ cart: result.data.cart.cartItems, loading: false });\r\n            }\r\n        } catch (err) {\r\n            this.setState({ error: 'Failed to fetch cart', loading: false });\r\n        }\r\n    };\r\n\r\n    addToCart = async (skuId, color, size, capacity) => {\r\n        const ADD_TO_CART_MUTATION = `\r\n      mutation add {\r\n        addToCart(sku_id: ${skuId}, color: ${color}, size: ${size}, capacity: ${capacity}) {\r\n          id\r\n        }\r\n      }\r\n    `;\r\n        try {\r\n\r\n            const response = await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    query: ADD_TO_CART_MUTATION,\r\n                    variables: {\r\n                        skuId: skuId,\r\n                        size: size || \"\",\r\n                        color: color || \"\",\r\n                        capacity: capacity || \"\"\r\n                    },\r\n                }),\r\n            });\r\n            const result = await response.json();\r\n            if (result.errors) {\r\n                console.error('Error adding item to cart:', result.errors);\r\n            } else {\r\n                this.fetchCart();\r\n            }\r\n        } catch (err) {\r\n            console.error('Failed to add item to cart:', err);\r\n        }\r\n    };\r\n    clearCart = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ query: CLEAR_CART_MUTATION }),\r\n            });\r\n            const result = await response.json();\r\n\r\n            if (result.errors) {\r\n                console.error('Error clearing cart:', result.errors);\r\n            } else {\r\n\r\n                this.setState({ cart: [] }, () => {\r\n                    console.log('Cart cleared:', this.state.cart);\r\n                });\r\n            }\r\n        } catch (err) {\r\n            console.error('Failed to clear cart:', err);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <CartContext.Provider\r\n                value={{\r\n                    cart: this.state.cart,\r\n                    loading: this.state.loading,\r\n                    error: this.state.error,\r\n                    fetchCart: this.fetchCart,\r\n                    addToCart: this.addToCart,\r\n                    clearCart: this.clearCart\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </CartContext.Provider>\r\n        );\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}