{"ast":null,"code":"// src/slugify.ts\nimport { remove as stripAccents } from \"diacritics\";\nfunction getSafeRegexpString(input) {\n  return input.split(\"\").map(char => `\\\\${char}`).join(\"\");\n}\nfunction format(input, delimiter, ignoreInvalid = false) {\n  const harmonized = stripAccents(input).trim().toLowerCase();\n  const safeDelimiter = getSafeRegexpString(delimiter);\n  if (ignoreInvalid) {\n    return harmonized.replace(/\\s+/g, delimiter);\n  }\n  return harmonized.replace(new RegExp(`[^a-z0-9${safeDelimiter}]+`, \"g\"), delimiter).replace(new RegExp(`${safeDelimiter}+`, \"g\"), delimiter).replace(new RegExp(`^${safeDelimiter}`, \"g\"), \"\").replace(new RegExp(`${safeDelimiter}$`, \"g\"), \"\");\n}\nfunction slugify(node, options = {\n  delimiter: \"-\",\n  prefix: \"\"\n}) {\n  if (!options.delimiter) options.delimiter = \"-\";\n  if (!options.prefix) options.prefix = \"\";\n  if (!node || typeof node === \"boolean\") {\n    return \"\";\n  }\n  const {\n    delimiter,\n    prefix\n  } = options;\n  if (typeof node === \"boolean\") {\n    return \"\";\n  }\n  if (typeof node === \"string\" || typeof node === \"number\") {\n    const harmonizedPrefix = format(prefix, delimiter, true);\n    const harmonizedNode = format(String(node), delimiter);\n    if (harmonizedPrefix) {\n      return `${harmonizedPrefix}${delimiter}${harmonizedNode}`;\n    }\n    return harmonizedNode;\n  }\n  if (\"children\" in node) {\n    return slugify(node.children);\n  }\n  if (\"type\" in node) return slugify(node.props.children, options);\n  if (Symbol.iterator in node) {\n    return slugify(Array.from(node).map(subNode => slugify(subNode, {\n      delimiter\n    })).join(delimiter), options);\n  }\n  return \"\";\n}\nexport { slugify as default };","map":{"version":3,"names":["remove","stripAccents","getSafeRegexpString","input","split","map","char","join","format","delimiter","ignoreInvalid","harmonized","trim","toLowerCase","safeDelimiter","replace","RegExp","slugify","node","options","prefix","harmonizedPrefix","harmonizedNode","String","children","props","Symbol","iterator","Array","from","subNode"],"sources":["C:\\laragon\\www\\php_projects\\scandiweb_store\\frontend\\node_modules\\react-slugify\\src\\slugify.ts"],"sourcesContent":["import type { ReactNode } from \"react\";\nimport { remove as stripAccents} from 'diacritics';\n\nfunction getSafeRegexpString(input: string): string {\n  return input\n    .split(\"\")\n    .map((char) => `\\\\${char}`)\n    .join(\"\");\n}\n\n/**\n * Format a string by removing spaces, non-alphabetical caracters and by\n * adding delimiter\n */\nfunction format(\n  input: string,\n  delimiter: string,\n  ignoreInvalid = false\n): string {\n  const harmonized = stripAccents(input).trim().toLowerCase();\n  const safeDelimiter = getSafeRegexpString(delimiter);\n\n  if (ignoreInvalid) {\n    return harmonized.replace(/\\s+/g, delimiter);\n  }\n\n  return harmonized\n    .replace(new RegExp(`[^a-z0-9${safeDelimiter}]+`, \"g\"), delimiter) // Replace all non-valid caracters by delimiter\n    .replace(new RegExp(`${safeDelimiter}+`, \"g\"), delimiter) // Remove multiple delimiters repetition\n    .replace(new RegExp(`^${safeDelimiter}`, \"g\"), \"\") // remove delimiter at the beginning\n    .replace(new RegExp(`${safeDelimiter}$`, \"g\"), \"\"); // remove delimiter at the end\n};\n\ninterface SlugifyOptions {\n  delimiter?: string;\n  prefix?: string;\n}\n\n/**\n * Slugify a React node\n */\nexport default function slugify(\n  node: ReactNode,\n  options: SlugifyOptions = { delimiter: \"-\", prefix: \"\" }\n): string {\n  if (!options.delimiter) options.delimiter = \"-\";\n  if (!options.prefix) options.prefix = \"\";\n\n  if (!node || typeof node === \"boolean\") {\n    return \"\";\n  }\n\n  const { delimiter, prefix } = options;\n\n  // boolean\n  if (typeof node === \"boolean\") {\n    return \"\"; // not much we can do here\n  }\n\n  // string, number\n  if (typeof node === \"string\" || typeof node === \"number\") {\n    const harmonizedPrefix = format(prefix, delimiter, true);\n    const harmonizedNode = format(String(node), delimiter);\n\n    if (harmonizedPrefix) {\n      return `${harmonizedPrefix}${delimiter}${harmonizedNode}`;\n    }\n\n    return harmonizedNode;\n  }\n\n  // ReactPortal\n  if (\"children\" in node) {\n    return slugify(node.children);\n  }\n\n  // ReactElement\n  if (\"type\" in node) return slugify(node.props.children, options);\n\n  // ReactFragment (including array of nodes)\n  if (Symbol.iterator in node) {\n    return slugify(\n      Array.from(node)\n        .map((subNode) => slugify(subNode, { delimiter }))\n        .join(delimiter),\n      options\n    );\n  }\n\n  // unhandled case\n  return \"\";\n};\n"],"mappings":";AACA,SAASA,MAAA,IAAUC,YAAA,QAAmB;AAEtC,SAASC,oBAAoBC,KAAA,EAAuB;EAClD,OAAOA,KAAA,CACJC,KAAA,CAAM,EAAE,EACRC,GAAA,CAAKC,IAAA,IAAS,KAAKA,IAAI,EAAE,EACzBC,IAAA,CAAK,EAAE;AACZ;AAMA,SAASC,OACPL,KAAA,EACAM,SAAA,EACAC,aAAA,GAAgB,OACR;EACR,MAAMC,UAAA,GAAaV,YAAA,CAAaE,KAAK,EAAES,IAAA,CAAK,EAAEC,WAAA,CAAY;EAC1D,MAAMC,aAAA,GAAgBZ,mBAAA,CAAoBO,SAAS;EAEnD,IAAIC,aAAA,EAAe;IACjB,OAAOC,UAAA,CAAWI,OAAA,CAAQ,QAAQN,SAAS;EAC7C;EAEA,OAAOE,UAAA,CACJI,OAAA,CAAQ,IAAIC,MAAA,CAAO,WAAWF,aAAa,MAAM,GAAG,GAAGL,SAAS,EAChEM,OAAA,CAAQ,IAAIC,MAAA,CAAO,GAAGF,aAAa,KAAK,GAAG,GAAGL,SAAS,EACvDM,OAAA,CAAQ,IAAIC,MAAA,CAAO,IAAIF,aAAa,IAAI,GAAG,GAAG,EAAE,EAChDC,OAAA,CAAQ,IAAIC,MAAA,CAAO,GAAGF,aAAa,KAAK,GAAG,GAAG,EAAE;AACrD;AAUe,SAARG,QACLC,IAAA,EACAC,OAAA,GAA0B;EAAEV,SAAA,EAAW;EAAKW,MAAA,EAAQ;AAAG,GAC/C;EACR,IAAI,CAACD,OAAA,CAAQV,SAAA,EAAWU,OAAA,CAAQV,SAAA,GAAY;EAC5C,IAAI,CAACU,OAAA,CAAQC,MAAA,EAAQD,OAAA,CAAQC,MAAA,GAAS;EAEtC,IAAI,CAACF,IAAA,IAAQ,OAAOA,IAAA,KAAS,WAAW;IACtC,OAAO;EACT;EAEA,MAAM;IAAET,SAAA;IAAWW;EAAO,IAAID,OAAA;EAG9B,IAAI,OAAOD,IAAA,KAAS,WAAW;IAC7B,OAAO;EACT;EAGA,IAAI,OAAOA,IAAA,KAAS,YAAY,OAAOA,IAAA,KAAS,UAAU;IACxD,MAAMG,gBAAA,GAAmBb,MAAA,CAAOY,MAAA,EAAQX,SAAA,EAAW,IAAI;IACvD,MAAMa,cAAA,GAAiBd,MAAA,CAAOe,MAAA,CAAOL,IAAI,GAAGT,SAAS;IAErD,IAAIY,gBAAA,EAAkB;MACpB,OAAO,GAAGA,gBAAgB,GAAGZ,SAAS,GAAGa,cAAc;IACzD;IAEA,OAAOA,cAAA;EACT;EAGA,IAAI,cAAcJ,IAAA,EAAM;IACtB,OAAOD,OAAA,CAAQC,IAAA,CAAKM,QAAQ;EAC9B;EAGA,IAAI,UAAUN,IAAA,EAAM,OAAOD,OAAA,CAAQC,IAAA,CAAKO,KAAA,CAAMD,QAAA,EAAUL,OAAO;EAG/D,IAAIO,MAAA,CAAOC,QAAA,IAAYT,IAAA,EAAM;IAC3B,OAAOD,OAAA,CACLW,KAAA,CAAMC,IAAA,CAAKX,IAAI,EACZb,GAAA,CAAKyB,OAAA,IAAYb,OAAA,CAAQa,OAAA,EAAS;MAAErB;IAAU,CAAC,CAAC,EAChDF,IAAA,CAAKE,SAAS,GACjBU,OACF;EACF;EAGA,OAAO;AACT","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}