{"ast":null,"code":"import { isTag, hasChildren } from \"domhandler\";\n/**\n * Search a node and its children for nodes passing a test function. If `node` is not an array, it will be wrapped in one.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param node Node to search. Will be included in the result set if it matches.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nexport function filter(test, node) {\n  let recurse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let limit = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n  return find(test, Array.isArray(node) ? node : [node], recurse, limit);\n}\n/**\n * Search an array of nodes and their children for nodes passing a test function.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @param recurse Also consider child nodes.\n * @param limit Maximum number of nodes to return.\n * @returns All nodes passing `test`.\n */\nexport function find(test, nodes, recurse, limit) {\n  const result = [];\n  /** Stack of the arrays we are looking at. */\n  const nodeStack = [nodes];\n  /** Stack of the indices within the arrays. */\n  const indexStack = [0];\n  for (;;) {\n    // First, check if the current array has any more elements to look at.\n    if (indexStack[0] >= nodeStack[0].length) {\n      // If we have no more arrays to look at, we are done.\n      if (indexStack.length === 1) {\n        return result;\n      }\n      // Otherwise, remove the current array from the stack.\n      nodeStack.shift();\n      indexStack.shift();\n      // Loop back to the start to continue with the next array.\n      continue;\n    }\n    const elem = nodeStack[0][indexStack[0]++];\n    if (test(elem)) {\n      result.push(elem);\n      if (--limit <= 0) return result;\n    }\n    if (recurse && hasChildren(elem) && elem.children.length > 0) {\n      /*\n       * Add the children to the stack. We are depth-first, so this is\n       * the next array we look at.\n       */\n      indexStack.unshift(0);\n      nodeStack.unshift(elem.children);\n    }\n  }\n}\n/**\n * Finds the first element inside of an array that matches a test function. This is an alias for `Array.prototype.find`.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns The first node in the array that passes `test`.\n * @deprecated Use `Array.prototype.find` directly.\n */\nexport function findOneChild(test, nodes) {\n  return nodes.find(test);\n}\n/**\n * Finds one element in a tree that passes a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Node or array of nodes to search.\n * @param recurse Also consider child nodes.\n * @returns The first node that passes `test`.\n */\nexport function findOne(test, nodes) {\n  let recurse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  let elem = null;\n  for (let i = 0; i < nodes.length && !elem; i++) {\n    const node = nodes[i];\n    if (!isTag(node)) {\n      continue;\n    } else if (test(node)) {\n      elem = node;\n    } else if (recurse && node.children.length > 0) {\n      elem = findOne(test, node.children, true);\n    }\n  }\n  return elem;\n}\n/**\n * Checks if a tree of nodes contains at least one node passing a test.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns Whether a tree of nodes contains at least one node passing the test.\n */\nexport function existsOne(test, nodes) {\n  return nodes.some(checked => isTag(checked) && (test(checked) || existsOne(test, checked.children)));\n}\n/**\n * Search an array of nodes and their children for elements passing a test function.\n *\n * Same as `find`, but limited to elements and with less options, leading to reduced complexity.\n *\n * @category Querying\n * @param test Function to test nodes on.\n * @param nodes Array of nodes to search.\n * @returns All nodes passing `test`.\n */\nexport function findAll(test, nodes) {\n  const result = [];\n  const nodeStack = [nodes];\n  const indexStack = [0];\n  for (;;) {\n    if (indexStack[0] >= nodeStack[0].length) {\n      if (nodeStack.length === 1) {\n        return result;\n      }\n      // Otherwise, remove the current array from the stack.\n      nodeStack.shift();\n      indexStack.shift();\n      // Loop back to the start to continue with the next array.\n      continue;\n    }\n    const elem = nodeStack[0][indexStack[0]++];\n    if (!isTag(elem)) continue;\n    if (test(elem)) result.push(elem);\n    if (elem.children.length > 0) {\n      indexStack.unshift(0);\n      nodeStack.unshift(elem.children);\n    }\n  }\n}","map":{"version":3,"names":["isTag","hasChildren","filter","test","node","recurse","arguments","length","undefined","limit","Infinity","find","Array","isArray","nodes","result","nodeStack","indexStack","shift","elem","push","children","unshift","findOneChild","findOne","i","existsOne","some","checked","findAll"],"sources":["https://raw.githubusercontent.com/fb55/domutils/96c989e159c98218958f375ea04210f2d1b43c0c/src/querying.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}