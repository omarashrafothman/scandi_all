{"ast":null,"code":"import * as React from \"rehackt\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\n/**\n * Reads the value of a [reactive variable](https://www.apollographql.com/docs/react/local-state/reactive-variables/) and re-renders the containing component whenever that variable's value changes. This enables a reactive variable to trigger changes _without_ relying on the `useQuery` hook.\n *\n * @example\n * ```jsx\n * import { makeVar, useReactiveVar } from \"@apollo/client\";\n * export const cartItemsVar = makeVar([]);\n *\n * export function Cart() {\n *   const cartItems = useReactiveVar(cartItemsVar);\n *   // ...\n * }\n * ```\n * @since 3.2.0\n * @param rv - A reactive variable.\n * @returns The current value of the reactive variable.\n */\nexport function useReactiveVar(rv) {\n  return useSyncExternalStore(React.useCallback(function (update) {\n    // By reusing the same onNext function in the nested call to\n    // rv.onNextChange(onNext), we can keep using the initial clean-up function\n    // returned by rv.onNextChange(function onNext(v){...}), without having to\n    // register the new clean-up function (returned by the nested\n    // rv.onNextChange(onNext)) with yet another callback.\n    return rv.onNextChange(function onNext() {\n      update();\n      rv.onNextChange(onNext);\n    });\n  }, [rv]), rv, rv);\n}","map":{"version":3,"names":["React","useSyncExternalStore","useReactiveVar","rv","useCallback","update","onNextChange","onNext"],"sources":["C:/laragon/www/php_projects/scandiweb_store/frontend/node_modules/@apollo/client/react/hooks/useReactiveVar.js"],"sourcesContent":["import * as React from \"rehackt\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\n/**\n * Reads the value of a [reactive variable](https://www.apollographql.com/docs/react/local-state/reactive-variables/) and re-renders the containing component whenever that variable's value changes. This enables a reactive variable to trigger changes _without_ relying on the `useQuery` hook.\n *\n * @example\n * ```jsx\n * import { makeVar, useReactiveVar } from \"@apollo/client\";\n * export const cartItemsVar = makeVar([]);\n *\n * export function Cart() {\n *   const cartItems = useReactiveVar(cartItemsVar);\n *   // ...\n * }\n * ```\n * @since 3.2.0\n * @param rv - A reactive variable.\n * @returns The current value of the reactive variable.\n */\nexport function useReactiveVar(rv) {\n    return useSyncExternalStore(React.useCallback(function (update) {\n        // By reusing the same onNext function in the nested call to\n        // rv.onNextChange(onNext), we can keep using the initial clean-up function\n        // returned by rv.onNextChange(function onNext(v){...}), without having to\n        // register the new clean-up function (returned by the nested\n        // rv.onNextChange(onNext)) with yet another callback.\n        return rv.onNextChange(function onNext() {\n            update();\n            rv.onNextChange(onNext);\n        });\n    }, [rv]), rv, rv);\n}\n//# sourceMappingURL=useReactiveVar.js.map"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,SAAS;AAChC,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,EAAE,EAAE;EAC/B,OAAOF,oBAAoB,CAACD,KAAK,CAACI,WAAW,CAAC,UAAUC,MAAM,EAAE;IAC5D;IACA;IACA;IACA;IACA;IACA,OAAOF,EAAE,CAACG,YAAY,CAAC,SAASC,MAAMA,CAAA,EAAG;MACrCF,MAAM,CAAC,CAAC;MACRF,EAAE,CAACG,YAAY,CAACC,MAAM,CAAC;IAC3B,CAAC,CAAC;EACN,CAAC,EAAE,CAACJ,EAAE,CAAC,CAAC,EAAEA,EAAE,EAAEA,EAAE,CAAC;AACrB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}