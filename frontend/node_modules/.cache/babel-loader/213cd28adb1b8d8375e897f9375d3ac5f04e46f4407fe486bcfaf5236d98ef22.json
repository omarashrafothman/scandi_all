{"ast":null,"code":"import { __assign, __spreadArray } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { ApolloError, NetworkStatus } from \"../../core/index.js\";\nimport { isNonEmptyArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { __use, useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport { getSuspenseCache } from \"../internal/index.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { skipToken } from \"./constants.js\";\nexport function useSuspenseQuery(query, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n  return wrapHook(\"useSuspenseQuery\", _useSuspenseQuery, useApolloClient(typeof options === \"object\" ? options.client : undefined))(query, options);\n}\nfunction _useSuspenseQuery(query, options) {\n  var client = useApolloClient(options.client);\n  var suspenseCache = getSuspenseCache(client);\n  var watchQueryOptions = useWatchQueryOptions({\n    client: client,\n    query: query,\n    options: options\n  });\n  var fetchPolicy = watchQueryOptions.fetchPolicy,\n    variables = watchQueryOptions.variables;\n  var _a = options.queryKey,\n    queryKey = _a === void 0 ? [] : _a;\n  var cacheKey = __spreadArray([query, canonicalStringify(variables)], [].concat(queryKey), true);\n  var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\n    return client.watchQuery(watchQueryOptions);\n  });\n  var _b = React.useState([queryRef.key, queryRef.promise]),\n    current = _b[0],\n    setPromise = _b[1];\n  // This saves us a re-execution of the render function when a variable changed.\n  if (current[0] !== queryRef.key) {\n    current[0] = queryRef.key;\n    current[1] = queryRef.promise;\n  }\n  var promise = current[1];\n  if (queryRef.didChangeOptions(watchQueryOptions)) {\n    current[1] = promise = queryRef.applyOptions(watchQueryOptions);\n  }\n  React.useEffect(function () {\n    var dispose = queryRef.retain();\n    var removeListener = queryRef.listen(function (promise) {\n      setPromise([queryRef.key, promise]);\n    });\n    return function () {\n      removeListener();\n      dispose();\n    };\n  }, [queryRef]);\n  var skipResult = React.useMemo(function () {\n    var error = toApolloError(queryRef.result);\n    return {\n      loading: false,\n      data: queryRef.result.data,\n      networkStatus: error ? NetworkStatus.error : NetworkStatus.ready,\n      error: error\n    };\n  }, [queryRef.result]);\n  var result = fetchPolicy === \"standby\" ? skipResult : __use(promise);\n  var fetchMore = React.useCallback(function (options) {\n    var promise = queryRef.fetchMore(options);\n    setPromise([queryRef.key, queryRef.promise]);\n    return promise;\n  }, [queryRef]);\n  var refetch = React.useCallback(function (variables) {\n    var promise = queryRef.refetch(variables);\n    setPromise([queryRef.key, queryRef.promise]);\n    return promise;\n  }, [queryRef]);\n  var subscribeToMore = queryRef.observable.subscribeToMore;\n  return React.useMemo(function () {\n    return {\n      client: client,\n      data: result.data,\n      error: toApolloError(result),\n      networkStatus: result.networkStatus,\n      fetchMore: fetchMore,\n      refetch: refetch,\n      subscribeToMore: subscribeToMore\n    };\n  }, [client, fetchMore, refetch, result, subscribeToMore]);\n}\nfunction validateOptions(options) {\n  var query = options.query,\n    fetchPolicy = options.fetchPolicy,\n    returnPartialData = options.returnPartialData;\n  verifyDocumentType(query, DocumentType.Query);\n  validateFetchPolicy(fetchPolicy);\n  validatePartialDataReturn(fetchPolicy, returnPartialData);\n}\nfunction validateFetchPolicy(fetchPolicy) {\n  if (fetchPolicy === void 0) {\n    fetchPolicy = \"cache-first\";\n  }\n  var supportedFetchPolicies = [\"cache-first\", \"network-only\", \"no-cache\", \"cache-and-network\"];\n  invariant(supportedFetchPolicies.includes(fetchPolicy), 58, fetchPolicy);\n}\nfunction validatePartialDataReturn(fetchPolicy, returnPartialData) {\n  if (fetchPolicy === \"no-cache\" && returnPartialData) {\n    globalThis.__DEV__ !== false && invariant.warn(59);\n  }\n}\nexport function toApolloError(result) {\n  return isNonEmptyArray(result.errors) ? new ApolloError({\n    graphQLErrors: result.errors\n  }) : result.error;\n}\nexport function useWatchQueryOptions(_a) {\n  var client = _a.client,\n    query = _a.query,\n    options = _a.options;\n  return useDeepMemo(function () {\n    var _a;\n    if (options === skipToken) {\n      return {\n        query: query,\n        fetchPolicy: \"standby\"\n      };\n    }\n    var fetchPolicy = options.fetchPolicy || ((_a = client.defaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) || \"cache-first\";\n    var watchQueryOptions = __assign(__assign({}, options), {\n      fetchPolicy: fetchPolicy,\n      query: query,\n      notifyOnNetworkStatusChange: false,\n      nextFetchPolicy: void 0\n    });\n    if (globalThis.__DEV__ !== false) {\n      validateOptions(watchQueryOptions);\n    }\n    // Assign the updated fetch policy after our validation since `standby` is\n    // not a supported fetch policy on its own without the use of `skip`.\n    if (options.skip) {\n      watchQueryOptions.fetchPolicy = \"standby\";\n    }\n    return watchQueryOptions;\n  }, [client, options, query]);\n}","map":{"version":3,"names":["__assign","__spreadArray","React","invariant","ApolloError","NetworkStatus","isNonEmptyArray","useApolloClient","DocumentType","verifyDocumentType","__use","useDeepMemo","wrapHook","getSuspenseCache","canonicalStringify","skipToken","useSuspenseQuery","query","options","Object","create","_useSuspenseQuery","client","undefined","suspenseCache","watchQueryOptions","useWatchQueryOptions","fetchPolicy","variables","_a","queryKey","cacheKey","concat","queryRef","getQueryRef","watchQuery","_b","useState","key","promise","current","setPromise","didChangeOptions","applyOptions","useEffect","dispose","retain","removeListener","listen","skipResult","useMemo","error","toApolloError","result","loading","data","networkStatus","ready","fetchMore","useCallback","refetch","subscribeToMore","observable","validateOptions","returnPartialData","Query","validateFetchPolicy","validatePartialDataReturn","supportedFetchPolicies","includes","globalThis","__DEV__","warn","errors","graphQLErrors","defaultOptions","notifyOnNetworkStatusChange","nextFetchPolicy","skip"],"sources":["C:/laragon/www/php_projects/scandiweb_store/frontend/node_modules/@apollo/client/react/hooks/useSuspenseQuery.js"],"sourcesContent":["import { __assign, __spreadArray } from \"tslib\";\nimport * as React from \"rehackt\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport { ApolloError, NetworkStatus } from \"../../core/index.js\";\nimport { isNonEmptyArray } from \"../../utilities/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { __use, useDeepMemo, wrapHook } from \"./internal/index.js\";\nimport { getSuspenseCache } from \"../internal/index.js\";\nimport { canonicalStringify } from \"../../cache/index.js\";\nimport { skipToken } from \"./constants.js\";\nexport function useSuspenseQuery(query, options) {\n    if (options === void 0) { options = Object.create(null); }\n    return wrapHook(\"useSuspenseQuery\", _useSuspenseQuery, useApolloClient(typeof options === \"object\" ? options.client : undefined))(query, options);\n}\nfunction _useSuspenseQuery(query, options) {\n    var client = useApolloClient(options.client);\n    var suspenseCache = getSuspenseCache(client);\n    var watchQueryOptions = useWatchQueryOptions({\n        client: client,\n        query: query,\n        options: options,\n    });\n    var fetchPolicy = watchQueryOptions.fetchPolicy, variables = watchQueryOptions.variables;\n    var _a = options.queryKey, queryKey = _a === void 0 ? [] : _a;\n    var cacheKey = __spreadArray([\n        query,\n        canonicalStringify(variables)\n    ], [].concat(queryKey), true);\n    var queryRef = suspenseCache.getQueryRef(cacheKey, function () {\n        return client.watchQuery(watchQueryOptions);\n    });\n    var _b = React.useState([queryRef.key, queryRef.promise]), current = _b[0], setPromise = _b[1];\n    // This saves us a re-execution of the render function when a variable changed.\n    if (current[0] !== queryRef.key) {\n        current[0] = queryRef.key;\n        current[1] = queryRef.promise;\n    }\n    var promise = current[1];\n    if (queryRef.didChangeOptions(watchQueryOptions)) {\n        current[1] = promise = queryRef.applyOptions(watchQueryOptions);\n    }\n    React.useEffect(function () {\n        var dispose = queryRef.retain();\n        var removeListener = queryRef.listen(function (promise) {\n            setPromise([queryRef.key, promise]);\n        });\n        return function () {\n            removeListener();\n            dispose();\n        };\n    }, [queryRef]);\n    var skipResult = React.useMemo(function () {\n        var error = toApolloError(queryRef.result);\n        return {\n            loading: false,\n            data: queryRef.result.data,\n            networkStatus: error ? NetworkStatus.error : NetworkStatus.ready,\n            error: error,\n        };\n    }, [queryRef.result]);\n    var result = fetchPolicy === \"standby\" ? skipResult : __use(promise);\n    var fetchMore = React.useCallback(function (options) {\n        var promise = queryRef.fetchMore(options);\n        setPromise([queryRef.key, queryRef.promise]);\n        return promise;\n    }, [queryRef]);\n    var refetch = React.useCallback(function (variables) {\n        var promise = queryRef.refetch(variables);\n        setPromise([queryRef.key, queryRef.promise]);\n        return promise;\n    }, [queryRef]);\n    var subscribeToMore = queryRef.observable.subscribeToMore;\n    return React.useMemo(function () {\n        return {\n            client: client,\n            data: result.data,\n            error: toApolloError(result),\n            networkStatus: result.networkStatus,\n            fetchMore: fetchMore,\n            refetch: refetch,\n            subscribeToMore: subscribeToMore,\n        };\n    }, [client, fetchMore, refetch, result, subscribeToMore]);\n}\nfunction validateOptions(options) {\n    var query = options.query, fetchPolicy = options.fetchPolicy, returnPartialData = options.returnPartialData;\n    verifyDocumentType(query, DocumentType.Query);\n    validateFetchPolicy(fetchPolicy);\n    validatePartialDataReturn(fetchPolicy, returnPartialData);\n}\nfunction validateFetchPolicy(fetchPolicy) {\n    if (fetchPolicy === void 0) { fetchPolicy = \"cache-first\"; }\n    var supportedFetchPolicies = [\n        \"cache-first\",\n        \"network-only\",\n        \"no-cache\",\n        \"cache-and-network\",\n    ];\n    invariant(supportedFetchPolicies.includes(fetchPolicy), 58, fetchPolicy);\n}\nfunction validatePartialDataReturn(fetchPolicy, returnPartialData) {\n    if (fetchPolicy === \"no-cache\" && returnPartialData) {\n        globalThis.__DEV__ !== false && invariant.warn(59);\n    }\n}\nexport function toApolloError(result) {\n    return isNonEmptyArray(result.errors) ?\n        new ApolloError({ graphQLErrors: result.errors })\n        : result.error;\n}\nexport function useWatchQueryOptions(_a) {\n    var client = _a.client, query = _a.query, options = _a.options;\n    return useDeepMemo(function () {\n        var _a;\n        if (options === skipToken) {\n            return { query: query, fetchPolicy: \"standby\" };\n        }\n        var fetchPolicy = options.fetchPolicy ||\n            ((_a = client.defaultOptions.watchQuery) === null || _a === void 0 ? void 0 : _a.fetchPolicy) ||\n            \"cache-first\";\n        var watchQueryOptions = __assign(__assign({}, options), { fetchPolicy: fetchPolicy, query: query, notifyOnNetworkStatusChange: false, nextFetchPolicy: void 0 });\n        if (globalThis.__DEV__ !== false) {\n            validateOptions(watchQueryOptions);\n        }\n        // Assign the updated fetch policy after our validation since `standby` is\n        // not a supported fetch policy on its own without the use of `skip`.\n        if (options.skip) {\n            watchQueryOptions.fetchPolicy = \"standby\";\n        }\n        return watchQueryOptions;\n    }, [client, options, query]);\n}\n//# sourceMappingURL=useSuspenseQuery.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}