{"ast":null,"code":"import React,{createContext,Component}from'react';import{GET_CART,CLEAR_CART_MUTATION}from\"../graphql/queries\";import{jsx as _jsx}from\"react/jsx-runtime\";export const CartContext=/*#__PURE__*/createContext();export class CartProvider extends Component{constructor(){super(...arguments);this.state={cart:[],loading:true,error:null};this.fetchCart=async()=>{try{const response=await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:GET_CART})});const result=await response.json();if(result.errors){this.setState({error:result.errors[0].message,loading:false});}else{this.setState({cart:result.data.cart.cartItems,loading:false});}}catch(err){this.setState({error:'Failed to fetch cart',loading:false});}};this.addToCart=async(skuId,color,size,capacity)=>{// Wrap the string variables with double quotes to ensure proper GraphQL formatting\nconst ADD_TO_CART_MUTATION=`\n      mutation add {\n        addToCart(sku_id: ${skuId}, color: \"${color}\", size: \"${size}\", capacity: \"${capacity}\") {\n          id\n        }\n      }\n    `;try{const response=await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php',{method:'POST',headers:{'Content-Type':'application/json','Accept':'application/json'},body:JSON.stringify({query:ADD_TO_CART_MUTATION,variables:{skuId:skuId,size:size||null,color:color||null,capacity:capacity||null}})});const result=await response.json();if(result.errors){console.error('Error adding item to cart:',result.errors);}else{this.fetchCart();}}catch(err){console.error('Failed to add item to cart:',err);}};this.clearCart=async()=>{try{const response=await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({query:CLEAR_CART_MUTATION})});const result=await response.json();if(result.errors){console.error('Error clearing cart:',result.errors);}else{this.setState({cart:[]},()=>{console.log('Cart cleared:',this.state.cart);});}}catch(err){console.error('Failed to clear cart:',err);}};}render(){return/*#__PURE__*/_jsx(CartContext.Provider,{value:{cart:this.state.cart,loading:this.state.loading,error:this.state.error,fetchCart:this.fetchCart,addToCart:this.addToCart,clearCart:this.clearCart},children:this.props.children});}}","map":{"version":3,"names":["React","createContext","Component","GET_CART","CLEAR_CART_MUTATION","jsx","_jsx","CartContext","CartProvider","constructor","arguments","state","cart","loading","error","fetchCart","response","fetch","method","headers","body","JSON","stringify","query","result","json","errors","setState","message","data","cartItems","err","addToCart","skuId","color","size","capacity","ADD_TO_CART_MUTATION","variables","console","clearCart","log","render","Provider","value","children","props"],"sources":["F:/scandiweb_store/frontend/src/context/CartContext.js"],"sourcesContent":["import React, { createContext, Component } from 'react';\r\nimport { GET_CART, CLEAR_CART_MUTATION } from \"../graphql/queries\";\r\nexport const CartContext = createContext();\r\n\r\nexport class CartProvider extends Component {\r\n    state = {\r\n        cart: [],\r\n        loading: true,\r\n        error: null,\r\n    };\r\n\r\n\r\n    fetchCart = async () => {\r\n\r\n        try {\r\n            const response = await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ query: GET_CART }),\r\n            });\r\n            const result = await response.json();\r\n            if (result.errors) {\r\n                this.setState({ error: result.errors[0].message, loading: false });\r\n            } else {\r\n                this.setState({ cart: result.data.cart.cartItems, loading: false });\r\n            }\r\n        } catch (err) {\r\n            this.setState({ error: 'Failed to fetch cart', loading: false });\r\n        }\r\n    };\r\n\r\n    addToCart = async (skuId, color, size, capacity) => {\r\n        // Wrap the string variables with double quotes to ensure proper GraphQL formatting\r\n        const ADD_TO_CART_MUTATION = `\r\n      mutation add {\r\n        addToCart(sku_id: ${skuId}, color: \"${color}\", size: \"${size}\", capacity: \"${capacity}\") {\r\n          id\r\n        }\r\n      }\r\n    `;\r\n        try {\r\n            const response = await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'Accept': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    query: ADD_TO_CART_MUTATION,\r\n                    variables: {\r\n                        skuId: skuId,\r\n                        size: size || null,\r\n                        color: color || null,\r\n                        capacity: capacity || null\r\n                    },\r\n                }),\r\n            });\r\n\r\n            const result = await response.json();\r\n            if (result.errors) {\r\n                console.error('Error adding item to cart:', result.errors);\r\n            } else {\r\n                this.fetchCart();\r\n            }\r\n        } catch (err) {\r\n            console.error('Failed to add item to cart:', err);\r\n        }\r\n    };\r\n\r\n    clearCart = async () => {\r\n        try {\r\n            const response = await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({ query: CLEAR_CART_MUTATION }),\r\n            });\r\n            const result = await response.json();\r\n\r\n            if (result.errors) {\r\n                console.error('Error clearing cart:', result.errors);\r\n            } else {\r\n\r\n                this.setState({ cart: [] }, () => {\r\n                    console.log('Cart cleared:', this.state.cart);\r\n                });\r\n            }\r\n        } catch (err) {\r\n            console.error('Failed to clear cart:', err);\r\n        }\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <CartContext.Provider\r\n                value={{\r\n                    cart: this.state.cart,\r\n                    loading: this.state.loading,\r\n                    error: this.state.error,\r\n                    fetchCart: this.fetchCart,\r\n                    addToCart: this.addToCart,\r\n                    clearCart: this.clearCart\r\n                }}\r\n            >\r\n                {this.props.children}\r\n            </CartContext.Provider>\r\n        );\r\n    }\r\n}\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,SAAS,KAAQ,OAAO,CACvD,OAASC,QAAQ,CAAEC,mBAAmB,KAAQ,oBAAoB,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBACnE,MAAO,MAAM,CAAAC,WAAW,cAAGN,aAAa,CAAC,CAAC,CAE1C,MAAO,MAAM,CAAAO,YAAY,QAAS,CAAAN,SAAU,CAAAO,YAAA,WAAAC,SAAA,OACxCC,KAAK,CAAG,CACJC,IAAI,CAAE,EAAE,CACRC,OAAO,CAAE,IAAI,CACbC,KAAK,CAAE,IACX,CAAC,MAGDC,SAAS,CAAG,SAAY,CAEpB,GAAI,CACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,iEAAiE,CAAE,CAC5FC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEC,KAAK,CAAEpB,QAAS,CAAC,CAC5C,CAAC,CAAC,CACF,KAAM,CAAAqB,MAAM,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CACpC,GAAID,MAAM,CAACE,MAAM,CAAE,CACf,IAAI,CAACC,QAAQ,CAAC,CAAEb,KAAK,CAAEU,MAAM,CAACE,MAAM,CAAC,CAAC,CAAC,CAACE,OAAO,CAAEf,OAAO,CAAE,KAAM,CAAC,CAAC,CACtE,CAAC,IAAM,CACH,IAAI,CAACc,QAAQ,CAAC,CAAEf,IAAI,CAAEY,MAAM,CAACK,IAAI,CAACjB,IAAI,CAACkB,SAAS,CAAEjB,OAAO,CAAE,KAAM,CAAC,CAAC,CACvE,CACJ,CAAE,MAAOkB,GAAG,CAAE,CACV,IAAI,CAACJ,QAAQ,CAAC,CAAEb,KAAK,CAAE,sBAAsB,CAAED,OAAO,CAAE,KAAM,CAAC,CAAC,CACpE,CACJ,CAAC,MAEDmB,SAAS,CAAG,MAAOC,KAAK,CAAEC,KAAK,CAAEC,IAAI,CAAEC,QAAQ,GAAK,CAChD;AACA,KAAM,CAAAC,oBAAoB,CAAG;AACrC;AACA,4BAA4BJ,KAAK,aAAaC,KAAK,aAAaC,IAAI,iBAAiBC,QAAQ;AAC7F;AACA;AACA;AACA,KAAK,CACG,GAAI,CACA,KAAM,CAAApB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,iEAAiE,CAAE,CAC5FC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,cAAc,CAAE,kBAAkB,CAClC,QAAQ,CAAE,kBACd,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CACjBC,KAAK,CAAEc,oBAAoB,CAC3BC,SAAS,CAAE,CACPL,KAAK,CAAEA,KAAK,CACZE,IAAI,CAAEA,IAAI,EAAI,IAAI,CAClBD,KAAK,CAAEA,KAAK,EAAI,IAAI,CACpBE,QAAQ,CAAEA,QAAQ,EAAI,IAC1B,CACJ,CAAC,CACL,CAAC,CAAC,CAEF,KAAM,CAAAZ,MAAM,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CACpC,GAAID,MAAM,CAACE,MAAM,CAAE,CACfa,OAAO,CAACzB,KAAK,CAAC,4BAA4B,CAAEU,MAAM,CAACE,MAAM,CAAC,CAC9D,CAAC,IAAM,CACH,IAAI,CAACX,SAAS,CAAC,CAAC,CACpB,CACJ,CAAE,MAAOgB,GAAG,CAAE,CACVQ,OAAO,CAACzB,KAAK,CAAC,6BAA6B,CAAEiB,GAAG,CAAC,CACrD,CACJ,CAAC,MAEDS,SAAS,CAAG,SAAY,CACpB,GAAI,CACA,KAAM,CAAAxB,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,iEAAiE,CAAE,CAC5FC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACL,cAAc,CAAE,kBACpB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEC,KAAK,CAAEnB,mBAAoB,CAAC,CACvD,CAAC,CAAC,CACF,KAAM,CAAAoB,MAAM,CAAG,KAAM,CAAAR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAEpC,GAAID,MAAM,CAACE,MAAM,CAAE,CACfa,OAAO,CAACzB,KAAK,CAAC,sBAAsB,CAAEU,MAAM,CAACE,MAAM,CAAC,CACxD,CAAC,IAAM,CAEH,IAAI,CAACC,QAAQ,CAAC,CAAEf,IAAI,CAAE,EAAG,CAAC,CAAE,IAAM,CAC9B2B,OAAO,CAACE,GAAG,CAAC,eAAe,CAAE,IAAI,CAAC9B,KAAK,CAACC,IAAI,CAAC,CACjD,CAAC,CAAC,CACN,CACJ,CAAE,MAAOmB,GAAG,CAAE,CACVQ,OAAO,CAACzB,KAAK,CAAC,uBAAuB,CAAEiB,GAAG,CAAC,CAC/C,CACJ,CAAC,EAEDW,MAAMA,CAAA,CAAG,CACL,mBACIpC,IAAA,CAACC,WAAW,CAACoC,QAAQ,EACjBC,KAAK,CAAE,CACHhC,IAAI,CAAE,IAAI,CAACD,KAAK,CAACC,IAAI,CACrBC,OAAO,CAAE,IAAI,CAACF,KAAK,CAACE,OAAO,CAC3BC,KAAK,CAAE,IAAI,CAACH,KAAK,CAACG,KAAK,CACvBC,SAAS,CAAE,IAAI,CAACA,SAAS,CACzBiB,SAAS,CAAE,IAAI,CAACA,SAAS,CACzBQ,SAAS,CAAE,IAAI,CAACA,SACpB,CAAE,CAAAK,QAAA,CAED,IAAI,CAACC,KAAK,CAACD,QAAQ,CACF,CAAC,CAE/B,CACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}