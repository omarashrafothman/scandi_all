{"ast":null,"code":"var _jsxFileName = \"C:\\\\laragon\\\\www\\\\php_projects\\\\scandiweb_store\\\\frontend\\\\src\\\\components\\\\cart\\\\Cart.jsx\";\nimport React, { Component } from 'react';\nimport cart from \"../../assets/images/shopping-cart.png\";\nimport { CartContext } from '../../context/CartContext.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Cart extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // cartElements: this.props.cartElements || [], // Ensure it's an array even if undefined\n    };\n  }\n  componentDidMount() {\n    this.context.fetchCart();\n  }\n  // componentDidUpdate(prevProps) {\n\n  //     // if (prevProps.cartElements !== this.props.cartElements) {\n  //     //     this.setState({\n  //     //         cartElements: this.props.cartElements,\n  //     //     });\n  //     // }\n  // }\n\n  // incrementQuantity = (cartItemId) => {\n  //     this.setState((prevState) => {\n  //         const updatedCart = prevState.cartElements.map((item) => {\n  //             if (item.id === cartItemId) {\n  //                 return {\n  //                     ...item,\n  //                     quantity: item.quantity + 1,\n  //                 };\n  //             }\n  //             return item;\n  //         });\n  //         return { cartElements: updatedCart };\n  //     });\n  // };\n\n  // decrementQuantity = async (cartItemId) => {\n  //     this.setState((prevState) => {\n  //         const updatedCart = prevState.cartElements.map((item) => {\n  //             if (item.id === cartItemId) {\n  //                 const newQuantity = item.quantity - 1;\n  //                 if (newQuantity >= 0) {\n  //                     return {\n  //                         ...item,\n  //                         quantity: newQuantity,\n  //                     };\n  //                 }\n  //             }\n  //             return item;\n  //         }).filter(item => item.quantity > 0); // Remove items with 0 quantity\n\n  //         return { cartElements: updatedCart };\n  //     });\n\n  //     // Optionally remove the item from the backend\n  //     const cartItem = this.state.cartElements.find(item => item.id === cartItemId);\n  //     if (cartItem && cartItem.quantity === 1) {\n  //         await this.removeFromCartMutation(cartItem.sku_id);\n  //     }\n  // };\n\n  // removeFromCartMutation = async (sku_id) => {\n  //     try {\n  //         const response = await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php', {\n  //             method: 'POST',\n  //             headers: {\n  //                 'Content-Type': 'application/json',\n  //             },\n  //             body: JSON.stringify({\n  //                 query: `\n  //               mutation {\n  //                 removeFromCart(sku_id: ${sku_id}) {\n  //                   id\n  //                 }\n  //               }\n  //             `,\n  //             }),\n  //         });\n\n  //         const result = await response.json();\n  //         if (result.errors) {\n  //             console.error(\"Error removing item from cart\", result.errors);\n  //         }\n  //     } catch (error) {\n  //         console.error(\"Network error while removing item from cart\", error);\n  //     }\n  // };\n\n  // calculateTotalPrice = (cartItem) => {\n  //     return cartItem.quantity * cartItem.product.prices[0].amount;\n  // };\n\n  // // Function to calculate total cart price\n  // calculateTotalCartPrice = () => {\n  //     const { cartElements } = this.state;\n  //     return cartElements.reduce(\n  //         (acc, cartItem) => acc + this.calculateTotalPrice(cartItem),\n  //         0\n  //     ).toFixed(2); // Ensure only 2 decimal points\n  // };\n\n  // placeOrder = async () => {\n  //     const { cartElements } = this.state;\n  //     if (cartElements.length === 0) return; // Prevent placing order if cart is empty\n  //     console.log(cartElements.length)\n  //     const total_price = this.calculateTotalCartPrice();\n  //     const cart_id = 1; // Replace with actual cart ID if needed\n\n  //     try {\n  //         const response = await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php', {\n  //             method: 'POST',\n  //             headers: {\n  //                 'Content-Type': 'application/json',\n  //             },\n  //             body: JSON.stringify({\n  //                 query: `mutation {\n  //                 createOrder(cart_id: ${cart_id}, total_price: ${total_price}, status: \"pending\") {\n  //                     id\n  //                 }\n  //             }`,\n  //             }),\n  //         });\n\n  //         const result = await response.json();\n  //         if (result.errors) {\n  //             console.error(\"Error creating order\", result.errors);\n  //             return;\n  //         }\n\n  //         // Clear the cart elements\n  //         this.context.clearCart();\n  //         console.log(\"Order created successfully:\", result.data.createOrder.id);\n  //     } catch (error) {\n  //         console.error(\"Network error while creating order\", error);\n  //     }\n  // };\n\n  render() {\n    const cartElements = this.context.cart;\n    console.log(cartElements);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        className: \"btn position-relative\",\n        \"data-bs-toggle\": \"modal\",\n        \"data-bs-target\": \"#exampleModal\",\n        children: [cartElements.length <= 0 ? \"\" : /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"cartCount\",\n          children: cartElements.length\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 54\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: cart,\n          alt: \"cart icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal fade\",\n        id: \"exampleModal\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-dialog\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-content\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"modal-body\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"cartHeading d-flex align-items-center\",\n                children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                  children: \"My Bag, \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 169,\n                  columnNumber: 37\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  className: \"m-0\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 170,\n                  columnNumber: 37\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }, this);\n  }\n}\nCart.contextType = CartContext;","map":{"version":3,"names":["React","Component","cart","CartContext","jsxDEV","_jsxDEV","Cart","constructor","props","state","componentDidMount","context","fetchCart","render","cartElements","console","log","children","type","className","length","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","id","contextType"],"sources":["C:/laragon/www/php_projects/scandiweb_store/frontend/src/components/cart/Cart.jsx"],"sourcesContent":["import React, { Component } from 'react';\r\nimport cart from \"../../assets/images/shopping-cart.png\";\r\nimport { CartContext } from '../../context/CartContext.js';\r\n\r\nexport default class Cart extends Component {\r\n    static contextType = CartContext;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            // cartElements: this.props.cartElements || [], // Ensure it's an array even if undefined\r\n        };\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.context.fetchCart();\r\n    }\r\n    // componentDidUpdate(prevProps) {\r\n\r\n    //     // if (prevProps.cartElements !== this.props.cartElements) {\r\n    //     //     this.setState({\r\n    //     //         cartElements: this.props.cartElements,\r\n    //     //     });\r\n    //     // }\r\n    // }\r\n\r\n    // incrementQuantity = (cartItemId) => {\r\n    //     this.setState((prevState) => {\r\n    //         const updatedCart = prevState.cartElements.map((item) => {\r\n    //             if (item.id === cartItemId) {\r\n    //                 return {\r\n    //                     ...item,\r\n    //                     quantity: item.quantity + 1,\r\n    //                 };\r\n    //             }\r\n    //             return item;\r\n    //         });\r\n    //         return { cartElements: updatedCart };\r\n    //     });\r\n    // };\r\n\r\n\r\n    // decrementQuantity = async (cartItemId) => {\r\n    //     this.setState((prevState) => {\r\n    //         const updatedCart = prevState.cartElements.map((item) => {\r\n    //             if (item.id === cartItemId) {\r\n    //                 const newQuantity = item.quantity - 1;\r\n    //                 if (newQuantity >= 0) {\r\n    //                     return {\r\n    //                         ...item,\r\n    //                         quantity: newQuantity,\r\n    //                     };\r\n    //                 }\r\n    //             }\r\n    //             return item;\r\n    //         }).filter(item => item.quantity > 0); // Remove items with 0 quantity\r\n\r\n    //         return { cartElements: updatedCart };\r\n    //     });\r\n\r\n    //     // Optionally remove the item from the backend\r\n    //     const cartItem = this.state.cartElements.find(item => item.id === cartItemId);\r\n    //     if (cartItem && cartItem.quantity === 1) {\r\n    //         await this.removeFromCartMutation(cartItem.sku_id);\r\n    //     }\r\n    // };\r\n\r\n\r\n    // removeFromCartMutation = async (sku_id) => {\r\n    //     try {\r\n    //         const response = await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php', {\r\n    //             method: 'POST',\r\n    //             headers: {\r\n    //                 'Content-Type': 'application/json',\r\n    //             },\r\n    //             body: JSON.stringify({\r\n    //                 query: `\r\n    //               mutation {\r\n    //                 removeFromCart(sku_id: ${sku_id}) {\r\n    //                   id\r\n    //                 }\r\n    //               }\r\n    //             `,\r\n    //             }),\r\n    //         });\r\n\r\n    //         const result = await response.json();\r\n    //         if (result.errors) {\r\n    //             console.error(\"Error removing item from cart\", result.errors);\r\n    //         }\r\n    //     } catch (error) {\r\n    //         console.error(\"Network error while removing item from cart\", error);\r\n    //     }\r\n    // };\r\n\r\n\r\n    // calculateTotalPrice = (cartItem) => {\r\n    //     return cartItem.quantity * cartItem.product.prices[0].amount;\r\n    // };\r\n\r\n    // // Function to calculate total cart price\r\n    // calculateTotalCartPrice = () => {\r\n    //     const { cartElements } = this.state;\r\n    //     return cartElements.reduce(\r\n    //         (acc, cartItem) => acc + this.calculateTotalPrice(cartItem),\r\n    //         0\r\n    //     ).toFixed(2); // Ensure only 2 decimal points\r\n    // };\r\n\r\n    // placeOrder = async () => {\r\n    //     const { cartElements } = this.state;\r\n    //     if (cartElements.length === 0) return; // Prevent placing order if cart is empty\r\n    //     console.log(cartElements.length)\r\n    //     const total_price = this.calculateTotalCartPrice();\r\n    //     const cart_id = 1; // Replace with actual cart ID if needed\r\n\r\n    //     try {\r\n    //         const response = await fetch('http://localhost/php_projects/scandiweb_store/backend/index.php', {\r\n    //             method: 'POST',\r\n    //             headers: {\r\n    //                 'Content-Type': 'application/json',\r\n    //             },\r\n    //             body: JSON.stringify({\r\n    //                 query: `mutation {\r\n    //                 createOrder(cart_id: ${cart_id}, total_price: ${total_price}, status: \"pending\") {\r\n    //                     id\r\n    //                 }\r\n    //             }`,\r\n    //             }),\r\n    //         });\r\n\r\n    //         const result = await response.json();\r\n    //         if (result.errors) {\r\n    //             console.error(\"Error creating order\", result.errors);\r\n    //             return;\r\n    //         }\r\n\r\n    //         // Clear the cart elements\r\n    //         this.context.clearCart();\r\n    //         console.log(\"Order created successfully:\", result.data.createOrder.id);\r\n    //     } catch (error) {\r\n    //         console.error(\"Network error while creating order\", error);\r\n    //     }\r\n    // };\r\n\r\n    render() {\r\n        const cartElements = this.context.cart;\r\n\r\n        console.log(cartElements)\r\n\r\n        return (\r\n            <div>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn position-relative\"\r\n                    data-bs-toggle=\"modal\"\r\n                    data-bs-target=\"#exampleModal\"\r\n                >\r\n\r\n                    {cartElements.length <= 0 ? \"\" : <span className=\"cartCount\">{cartElements.length}</span>}\r\n                    <img src={cart} alt=\"cart icon\" />\r\n                </button>\r\n\r\n                <div className=\"modal fade\" id=\"exampleModal\">\r\n                    <div className=\"modal-dialog\">\r\n                        <div className=\"modal-content\">\r\n                            <div className=\"modal-body\">\r\n                                <div className=\"cartHeading d-flex align-items-center\">\r\n                                    <h4>My Bag, </h4>\r\n                                    <p className=\"m-0\">{/*{cartElements.length} {cartElements.length <= 1 ? \"item\" : \"items\"}*/}</p>\r\n                                </div>\r\n                                {/*\r\n                                <div className=\"cartItemsContainer my-2\">\r\n                                    {cartElements.length > 0 ? (\r\n                                        cartElements.map((cartItem) => (\r\n                                            <div className=\"cartItem w-100 d-flex\" key={cartItem.id}>\r\n                                                <div className=\"w-50 cartItemContent\">\r\n                                                    <h5 className=\"itemName\">{cartItem.product.name}</h5>\r\n                                                    <p className=\"m-0 itemPrice\">\r\n                                                        {cartItem.product.prices[0].currency_symbol}\r\n                                                        {this.calculateTotalPrice(cartItem).toFixed(2)}\r\n                                                    </p>\r\n\r\n                                                    <div className=\"productAttr\">\r\n                                                        {cartItem.product.attributes.map((attrItem) => {\r\n                                                            let content;\r\n                                                            switch (attrItem.name) {\r\n                                                                case \"Color\":\r\n                                                                    content = (\r\n                                                                        <div className=\"productColors\">\r\n                                                                            <p>{attrItem.name}:</p>\r\n                                                                            <div className=\"d-flex align-items-center w-75 sizesContainer my-2\">\r\n                                                                                {attrItem.items.map((item, index) => (\r\n                                                                                    <label\r\n                                                                                        className=\"containerBlock colorItem\"\r\n                                                                                        style={{ background: item.value }}\r\n                                                                                        key={index}\r\n                                                                                    >\r\n                                                                                        <input\r\n                                                                                            type=\"radio\"\r\n                                                                                            name=\"color\"\r\n                                                                                            value={item.value}\r\n                                                                                        />\r\n                                                                                        <span className=\"checkmark\"></span>\r\n                                                                                    </label>\r\n                                                                                ))}\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    );\r\n                                                                    break;\r\n\r\n                                                                default:\r\n                                                                    content = (\r\n                                                                        <div className=\"productSizes my-2\">\r\n                                                                            <p>{attrItem.name}:</p>\r\n                                                                            {attrItem.items.map((item, index) => (\r\n                                                                                <label\r\n                                                                                    className=\"containerBlock my-1\"\r\n                                                                                    key={index}\r\n                                                                                >\r\n                                                                                    <input\r\n                                                                                        type=\"radio\"\r\n                                                                                        name={\"size\"}\r\n                                                                                        value={item.display_value}\r\n                                                                                    />\r\n                                                                                    <span className=\"checkmark\">\r\n                                                                                        {item.display_value}\r\n                                                                                    </span>\r\n                                                                                </label>\r\n                                                                            ))}\r\n                                                                        </div>\r\n                                                                    );\r\n                                                                    break;\r\n                                                            }\r\n                                                            return content;\r\n                                                        })}\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <div className=\"w-50 d-flex justify-content-between align-items-center\">\r\n                                                    <div className=\"d-flex align-items-center justify-content-between flex-column cartItemquantity\">\r\n                                                        <button\r\n                                                            className=\"d-flex align-items-center justify-content-center\"\r\n                                                            onClick={() => this.incrementQuantity(cartItem.id)}\r\n                                                        >\r\n                                                            +\r\n                                                        </button>\r\n                                                        <span>{cartItem.quantity}</span>\r\n                                                        <button\r\n                                                            className=\"d-flex align-items-center justify-content-center\"\r\n                                                            onClick={() => this.decrementQuantity(cartItem.id)}\r\n                                                        >\r\n                                                            -\r\n                                                        </button>\r\n                                                    </div>\r\n\r\n                                                    <div className=\"itemImage\">\r\n                                                        <img\r\n                                                            src={cartItem.product.galleries[0].image_url}\r\n                                                            alt=\"product image\"\r\n                                                        />\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        ))\r\n                                    ) : (\r\n                                        <p>Your cart is empty.</p>\r\n                                    )}\r\n                                </div>\r\n                                {cartElements.length > 0 && (\r\n                                    <div className=\"totalPrice d-flex align-items-center justify-content-between\">\r\n                                        <p className=\"m-0\">Total</p>\r\n                                        <p className=\"m-0\">\r\n                                            {cartElements[0]?.product.prices[0]?.currency_symbol}\r\n                                            {this.calculateTotalCartPrice()}\r\n                                        </p>\r\n                                    </div>\r\n                                )}\r\n\r\n                                {cartElements.length > 0 && (\r\n                                    <div className=\"placeOrder\">\r\n                                        <div className=\"my-4\">\r\n                                            <button className=\"cartBtn\" onClick={this.placeOrder}>PLACE ORDER</button>\r\n                                        </div>\r\n                                    </div>\r\n                                )}\r\n  */}\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,IAAI,MAAM,uCAAuC;AACxD,SAASC,WAAW,QAAQ,8BAA8B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3D,eAAe,MAAMC,IAAI,SAASL,SAAS,CAAC;EAExCM,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACT;IAAA,CACH;EACL;EAGAC,iBAAiBA,CAAA,EAAG;IAChB,IAAI,CAACC,OAAO,CAACC,SAAS,CAAC,CAAC;EAC5B;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEAC,MAAMA,CAAA,EAAG;IACL,MAAMC,YAAY,GAAG,IAAI,CAACH,OAAO,CAACT,IAAI;IAEtCa,OAAO,CAACC,GAAG,CAACF,YAAY,CAAC;IAEzB,oBACIT,OAAA;MAAAY,QAAA,gBACIZ,OAAA;QACIa,IAAI,EAAC,QAAQ;QACbC,SAAS,EAAC,uBAAuB;QACjC,kBAAe,OAAO;QACtB,kBAAe,eAAe;QAAAF,QAAA,GAG7BH,YAAY,CAACM,MAAM,IAAI,CAAC,GAAG,EAAE,gBAAGf,OAAA;UAAMc,SAAS,EAAC,WAAW;UAAAF,QAAA,EAAEH,YAAY,CAACM;QAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC,eACzFnB,OAAA;UAAKoB,GAAG,EAAEvB,IAAK;UAACwB,GAAG,EAAC;QAAW;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9B,CAAC,eAETnB,OAAA;QAAKc,SAAS,EAAC,YAAY;QAACQ,EAAE,EAAC,cAAc;QAAAV,QAAA,eACzCZ,OAAA;UAAKc,SAAS,EAAC,cAAc;UAAAF,QAAA,eACzBZ,OAAA;YAAKc,SAAS,EAAC,eAAe;YAAAF,QAAA,eAC1BZ,OAAA;cAAKc,SAAS,EAAC,YAAY;cAAAF,QAAA,eACvBZ,OAAA;gBAAKc,SAAS,EAAC,uCAAuC;gBAAAF,QAAA,gBAClDZ,OAAA;kBAAAY,QAAA,EAAI;gBAAQ;kBAAAI,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAI,CAAC,eACjBnB,OAAA;kBAAGc,SAAS,EAAC;gBAAK;kBAAAE,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAA6E,CAAC;cAAA;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC/F;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAqHL;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAEL;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEL;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEL,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAEd;AACJ;AArSqBlB,IAAI,CACdsB,WAAW,GAAGzB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}