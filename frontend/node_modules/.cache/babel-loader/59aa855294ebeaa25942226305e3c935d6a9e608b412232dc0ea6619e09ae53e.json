{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError, Observable } from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useDeepMemo } from \"./internal/useDeepMemo.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { toApolloError } from \"./useQuery.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n/**\n * > Refer to the [Subscriptions](https://www.apollographql.com/docs/react/data/subscriptions/) section for a more in-depth overview of `useSubscription`.\n *\n * @example\n * ```jsx\n * const COMMENTS_SUBSCRIPTION = gql`\n *   subscription OnCommentAdded($repoFullName: String!) {\n *     commentAdded(repoFullName: $repoFullName) {\n *       id\n *       content\n *     }\n *   }\n * `;\n *\n * function DontReadTheComments({ repoFullName }) {\n *   const {\n *     data: { commentAdded },\n *     loading,\n *   } = useSubscription(COMMENTS_SUBSCRIPTION, { variables: { repoFullName } });\n *   return <h4>New comment: {!loading && commentAdded.content}</h4>;\n * }\n * ```\n * @remarks\n * #### Consider using `onData` instead of `useEffect`\n *\n * If you want to react to incoming data, please use the `onData` option instead of `useEffect`.\n * State updates you make inside a `useEffect` hook might cause additional rerenders, and `useEffect` is mostly meant for side effects of rendering, not as an event handler.\n * State updates made in an event handler like `onData` might - depending on the React version - be batched and cause only a single rerender.\n *\n * Consider the following component:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const { data, error, loading } = useSubscription(query);\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *\n *   useEffect(() => {\n *     setAccumulatedData((prev) => [...prev, data]);\n *   }, [data]);\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * Instead of using `useEffect` here, we can re-write this component to use the `onData` callback function accepted in `useSubscription`'s `options` object:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *   const { data, error, loading } = useSubscription(\n *     query,\n *     {\n *       onData({ data }) {\n *         setAccumulatedData((prev) => [...prev, data])\n *       }\n *     }\n *   );\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * > ⚠️ **Note:** The `useSubscription` option `onData` is available in Apollo Client >= 3.7. In previous versions, the equivalent option is named `onSubscriptionData`.\n *\n * Now, the first message will be added to the `accumulatedData` array since `onData` is called _before_ the component re-renders. React 18 automatic batching is still in effect and results in a single re-render, but with `onData` we can guarantee each message received after the component mounts is added to `accumulatedData`.\n *\n * @since 3.0.0\n * @param subscription - A GraphQL subscription document parsed into an AST by `gql`.\n * @param options - Options to control how the subscription is executed.\n * @returns Query result object\n */\nexport function useSubscription(subscription, options) {\n  if (options === void 0) {\n    options = Object.create(null);\n  }\n  var hasIssuedDeprecationWarningRef = React.useRef(false);\n  var client = useApolloClient(options.client);\n  verifyDocumentType(subscription, DocumentType.Subscription);\n  if (!hasIssuedDeprecationWarningRef.current) {\n    hasIssuedDeprecationWarningRef.current = true;\n    if (options.onSubscriptionData) {\n      globalThis.__DEV__ !== false && invariant.warn(options.onData ? 53 : 54);\n    }\n    if (options.onSubscriptionComplete) {\n      globalThis.__DEV__ !== false && invariant.warn(options.onComplete ? 55 : 56);\n    }\n  }\n  var skip = options.skip,\n    fetchPolicy = options.fetchPolicy,\n    errorPolicy = options.errorPolicy,\n    shouldResubscribe = options.shouldResubscribe,\n    context = options.context,\n    extensions = options.extensions,\n    ignoreResults = options.ignoreResults;\n  var variables = useDeepMemo(function () {\n    return options.variables;\n  }, [options.variables]);\n  var recreate = function () {\n    return createSubscription(client, subscription, variables, fetchPolicy, errorPolicy, context, extensions);\n  };\n  var _a = React.useState(options.skip ? null : recreate),\n    observable = _a[0],\n    setObservable = _a[1];\n  var recreateRef = React.useRef(recreate);\n  useIsomorphicLayoutEffect(function () {\n    recreateRef.current = recreate;\n  });\n  if (skip) {\n    if (observable) {\n      setObservable(observable = null);\n    }\n  } else if (!observable || (client !== observable.__.client || subscription !== observable.__.query || fetchPolicy !== observable.__.fetchPolicy || errorPolicy !== observable.__.errorPolicy || !equal(variables, observable.__.variables)) && (typeof shouldResubscribe === \"function\" ? !!shouldResubscribe(options) : shouldResubscribe) !== false) {\n    setObservable(observable = recreate());\n  }\n  var optionsRef = React.useRef(options);\n  React.useEffect(function () {\n    optionsRef.current = options;\n  });\n  var fallbackLoading = !skip && !ignoreResults;\n  var fallbackResult = React.useMemo(function () {\n    return {\n      loading: fallbackLoading,\n      error: void 0,\n      data: void 0,\n      variables: variables\n    };\n  }, [fallbackLoading, variables]);\n  var ignoreResultsRef = React.useRef(ignoreResults);\n  useIsomorphicLayoutEffect(function () {\n    // We cannot reference `ignoreResults` directly in the effect below\n    // it would add a dependency to the `useEffect` deps array, which means the\n    // subscription would be recreated if `ignoreResults` changes\n    // As a result, on resubscription, the last result would be re-delivered,\n    // rendering the component one additional time, and re-triggering `onData`.\n    // The same applies to `fetchPolicy`, which results in a new `observable`\n    // being created. We cannot really avoid it in that case, but we can at least\n    // avoid it for `ignoreResults`.\n    ignoreResultsRef.current = ignoreResults;\n  });\n  var ret = useSyncExternalStore(React.useCallback(function (update) {\n    if (!observable) {\n      return function () {};\n    }\n    var subscriptionStopped = false;\n    var variables = observable.__.variables;\n    var client = observable.__.client;\n    var subscription = observable.subscribe({\n      next: function (fetchResult) {\n        var _a, _b;\n        if (subscriptionStopped) {\n          return;\n        }\n        var result = {\n          loading: false,\n          // TODO: fetchResult.data can be null but SubscriptionResult.data\n          // expects TData | undefined only\n          data: fetchResult.data,\n          error: toApolloError(fetchResult),\n          variables: variables\n        };\n        observable.__.setResult(result);\n        if (!ignoreResultsRef.current) update();\n        if (result.error) {\n          (_b = (_a = optionsRef.current).onError) === null || _b === void 0 ? void 0 : _b.call(_a, result.error);\n        } else if (optionsRef.current.onData) {\n          optionsRef.current.onData({\n            client: client,\n            data: result\n          });\n        } else if (optionsRef.current.onSubscriptionData) {\n          optionsRef.current.onSubscriptionData({\n            client: client,\n            subscriptionData: result\n          });\n        }\n      },\n      error: function (error) {\n        var _a, _b;\n        error = error instanceof ApolloError ? error : new ApolloError({\n          protocolErrors: [error]\n        });\n        if (!subscriptionStopped) {\n          observable.__.setResult({\n            loading: false,\n            data: void 0,\n            error: error,\n            variables: variables\n          });\n          if (!ignoreResultsRef.current) update();\n          (_b = (_a = optionsRef.current).onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n        }\n      },\n      complete: function () {\n        if (!subscriptionStopped) {\n          if (optionsRef.current.onComplete) {\n            optionsRef.current.onComplete();\n          } else if (optionsRef.current.onSubscriptionComplete) {\n            optionsRef.current.onSubscriptionComplete();\n          }\n        }\n      }\n    });\n    return function () {\n      // immediately stop receiving subscription values, but do not unsubscribe\n      // until after a short delay in case another useSubscription hook is\n      // reusing the same underlying observable and is about to subscribe\n      subscriptionStopped = true;\n      setTimeout(function () {\n        subscription.unsubscribe();\n      });\n    };\n  }, [observable]), function () {\n    return observable && !skip && !ignoreResults ? observable.__.result : fallbackResult;\n  }, function () {\n    return fallbackResult;\n  });\n  var restart = React.useCallback(function () {\n    invariant(!optionsRef.current.skip, 57);\n    setObservable(recreateRef.current());\n  }, [optionsRef, recreateRef]);\n  return React.useMemo(function () {\n    return __assign(__assign({}, ret), {\n      restart: restart\n    });\n  }, [ret, restart]);\n}\nfunction createSubscription(client, query, variables, fetchPolicy, errorPolicy, context, extensions) {\n  var options = {\n    query: query,\n    variables: variables,\n    fetchPolicy: fetchPolicy,\n    errorPolicy: errorPolicy,\n    context: context,\n    extensions: extensions\n  };\n  var __ = __assign(__assign({}, options), {\n    client: client,\n    result: {\n      loading: true,\n      data: void 0,\n      error: void 0,\n      variables: variables\n    },\n    setResult: function (result) {\n      __.result = result;\n    }\n  });\n  var observable = null;\n  return Object.assign(new Observable(function (observer) {\n    // lazily start the subscription when the first observer subscribes\n    // to get around strict mode\n    if (!observable) {\n      observable = client.subscribe(options);\n    }\n    var sub = observable.subscribe(observer);\n    return function () {\n      return sub.unsubscribe();\n    };\n  }), {\n    /**\n     * A tracking object to store details about the observable and the latest result of the subscription.\n     */\n    __: __\n  });\n}","map":{"version":3,"names":["__assign","invariant","React","equal","DocumentType","verifyDocumentType","ApolloError","Observable","useApolloClient","useDeepMemo","useSyncExternalStore","toApolloError","useIsomorphicLayoutEffect","useSubscription","subscription","options","Object","create","hasIssuedDeprecationWarningRef","useRef","client","Subscription","current","onSubscriptionData","globalThis","__DEV__","warn","onData","onSubscriptionComplete","onComplete","skip","fetchPolicy","errorPolicy","shouldResubscribe","context","extensions","ignoreResults","variables","recreate","createSubscription","_a","useState","observable","setObservable","recreateRef","__","query","optionsRef","useEffect","fallbackLoading","fallbackResult","useMemo","loading","error","data","ignoreResultsRef","ret","useCallback","update","subscriptionStopped","subscribe","next","fetchResult","_b","result","setResult","onError","call","subscriptionData","protocolErrors","complete","setTimeout","unsubscribe","restart","assign","observer","sub"],"sources":["C:/laragon/www/php_projects/scandiweb_store/frontend/node_modules/@apollo/client/react/hooks/useSubscription.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from \"rehackt\";\nimport { equal } from \"@wry/equality\";\nimport { DocumentType, verifyDocumentType } from \"../parser/index.js\";\nimport { ApolloError, Observable } from \"../../core/index.js\";\nimport { useApolloClient } from \"./useApolloClient.js\";\nimport { useDeepMemo } from \"./internal/useDeepMemo.js\";\nimport { useSyncExternalStore } from \"./useSyncExternalStore.js\";\nimport { toApolloError } from \"./useQuery.js\";\nimport { useIsomorphicLayoutEffect } from \"./internal/useIsomorphicLayoutEffect.js\";\n/**\n * > Refer to the [Subscriptions](https://www.apollographql.com/docs/react/data/subscriptions/) section for a more in-depth overview of `useSubscription`.\n *\n * @example\n * ```jsx\n * const COMMENTS_SUBSCRIPTION = gql`\n *   subscription OnCommentAdded($repoFullName: String!) {\n *     commentAdded(repoFullName: $repoFullName) {\n *       id\n *       content\n *     }\n *   }\n * `;\n *\n * function DontReadTheComments({ repoFullName }) {\n *   const {\n *     data: { commentAdded },\n *     loading,\n *   } = useSubscription(COMMENTS_SUBSCRIPTION, { variables: { repoFullName } });\n *   return <h4>New comment: {!loading && commentAdded.content}</h4>;\n * }\n * ```\n * @remarks\n * #### Consider using `onData` instead of `useEffect`\n *\n * If you want to react to incoming data, please use the `onData` option instead of `useEffect`.\n * State updates you make inside a `useEffect` hook might cause additional rerenders, and `useEffect` is mostly meant for side effects of rendering, not as an event handler.\n * State updates made in an event handler like `onData` might - depending on the React version - be batched and cause only a single rerender.\n *\n * Consider the following component:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const { data, error, loading } = useSubscription(query);\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *\n *   useEffect(() => {\n *     setAccumulatedData((prev) => [...prev, data]);\n *   }, [data]);\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * Instead of using `useEffect` here, we can re-write this component to use the `onData` callback function accepted in `useSubscription`'s `options` object:\n *\n * ```jsx\n * export function Subscriptions() {\n *   const [accumulatedData, setAccumulatedData] = useState([]);\n *   const { data, error, loading } = useSubscription(\n *     query,\n *     {\n *       onData({ data }) {\n *         setAccumulatedData((prev) => [...prev, data])\n *       }\n *     }\n *   );\n *\n *   return (\n *     <>\n *       {loading && <p>Loading...</p>}\n *       {JSON.stringify(accumulatedData, undefined, 2)}\n *     </>\n *   );\n * }\n * ```\n *\n * > ⚠️ **Note:** The `useSubscription` option `onData` is available in Apollo Client >= 3.7. In previous versions, the equivalent option is named `onSubscriptionData`.\n *\n * Now, the first message will be added to the `accumulatedData` array since `onData` is called _before_ the component re-renders. React 18 automatic batching is still in effect and results in a single re-render, but with `onData` we can guarantee each message received after the component mounts is added to `accumulatedData`.\n *\n * @since 3.0.0\n * @param subscription - A GraphQL subscription document parsed into an AST by `gql`.\n * @param options - Options to control how the subscription is executed.\n * @returns Query result object\n */\nexport function useSubscription(subscription, options) {\n    if (options === void 0) { options = Object.create(null); }\n    var hasIssuedDeprecationWarningRef = React.useRef(false);\n    var client = useApolloClient(options.client);\n    verifyDocumentType(subscription, DocumentType.Subscription);\n    if (!hasIssuedDeprecationWarningRef.current) {\n        hasIssuedDeprecationWarningRef.current = true;\n        if (options.onSubscriptionData) {\n            globalThis.__DEV__ !== false && invariant.warn(options.onData ? 53 : 54);\n        }\n        if (options.onSubscriptionComplete) {\n            globalThis.__DEV__ !== false && invariant.warn(options.onComplete ? 55 : 56);\n        }\n    }\n    var skip = options.skip, fetchPolicy = options.fetchPolicy, errorPolicy = options.errorPolicy, shouldResubscribe = options.shouldResubscribe, context = options.context, extensions = options.extensions, ignoreResults = options.ignoreResults;\n    var variables = useDeepMemo(function () { return options.variables; }, [options.variables]);\n    var recreate = function () {\n        return createSubscription(client, subscription, variables, fetchPolicy, errorPolicy, context, extensions);\n    };\n    var _a = React.useState(options.skip ? null : recreate), observable = _a[0], setObservable = _a[1];\n    var recreateRef = React.useRef(recreate);\n    useIsomorphicLayoutEffect(function () {\n        recreateRef.current = recreate;\n    });\n    if (skip) {\n        if (observable) {\n            setObservable((observable = null));\n        }\n    }\n    else if (!observable ||\n        ((client !== observable.__.client ||\n            subscription !== observable.__.query ||\n            fetchPolicy !== observable.__.fetchPolicy ||\n            errorPolicy !== observable.__.errorPolicy ||\n            !equal(variables, observable.__.variables)) &&\n            (typeof shouldResubscribe === \"function\" ?\n                !!shouldResubscribe(options)\n                : shouldResubscribe) !== false)) {\n        setObservable((observable = recreate()));\n    }\n    var optionsRef = React.useRef(options);\n    React.useEffect(function () {\n        optionsRef.current = options;\n    });\n    var fallbackLoading = !skip && !ignoreResults;\n    var fallbackResult = React.useMemo(function () { return ({\n        loading: fallbackLoading,\n        error: void 0,\n        data: void 0,\n        variables: variables,\n    }); }, [fallbackLoading, variables]);\n    var ignoreResultsRef = React.useRef(ignoreResults);\n    useIsomorphicLayoutEffect(function () {\n        // We cannot reference `ignoreResults` directly in the effect below\n        // it would add a dependency to the `useEffect` deps array, which means the\n        // subscription would be recreated if `ignoreResults` changes\n        // As a result, on resubscription, the last result would be re-delivered,\n        // rendering the component one additional time, and re-triggering `onData`.\n        // The same applies to `fetchPolicy`, which results in a new `observable`\n        // being created. We cannot really avoid it in that case, but we can at least\n        // avoid it for `ignoreResults`.\n        ignoreResultsRef.current = ignoreResults;\n    });\n    var ret = useSyncExternalStore(React.useCallback(function (update) {\n        if (!observable) {\n            return function () { };\n        }\n        var subscriptionStopped = false;\n        var variables = observable.__.variables;\n        var client = observable.__.client;\n        var subscription = observable.subscribe({\n            next: function (fetchResult) {\n                var _a, _b;\n                if (subscriptionStopped) {\n                    return;\n                }\n                var result = {\n                    loading: false,\n                    // TODO: fetchResult.data can be null but SubscriptionResult.data\n                    // expects TData | undefined only\n                    data: fetchResult.data,\n                    error: toApolloError(fetchResult),\n                    variables: variables,\n                };\n                observable.__.setResult(result);\n                if (!ignoreResultsRef.current)\n                    update();\n                if (result.error) {\n                    (_b = (_a = optionsRef.current).onError) === null || _b === void 0 ? void 0 : _b.call(_a, result.error);\n                }\n                else if (optionsRef.current.onData) {\n                    optionsRef.current.onData({\n                        client: client,\n                        data: result,\n                    });\n                }\n                else if (optionsRef.current.onSubscriptionData) {\n                    optionsRef.current.onSubscriptionData({\n                        client: client,\n                        subscriptionData: result,\n                    });\n                }\n            },\n            error: function (error) {\n                var _a, _b;\n                error =\n                    error instanceof ApolloError ? error : (new ApolloError({ protocolErrors: [error] }));\n                if (!subscriptionStopped) {\n                    observable.__.setResult({\n                        loading: false,\n                        data: void 0,\n                        error: error,\n                        variables: variables,\n                    });\n                    if (!ignoreResultsRef.current)\n                        update();\n                    (_b = (_a = optionsRef.current).onError) === null || _b === void 0 ? void 0 : _b.call(_a, error);\n                }\n            },\n            complete: function () {\n                if (!subscriptionStopped) {\n                    if (optionsRef.current.onComplete) {\n                        optionsRef.current.onComplete();\n                    }\n                    else if (optionsRef.current.onSubscriptionComplete) {\n                        optionsRef.current.onSubscriptionComplete();\n                    }\n                }\n            },\n        });\n        return function () {\n            // immediately stop receiving subscription values, but do not unsubscribe\n            // until after a short delay in case another useSubscription hook is\n            // reusing the same underlying observable and is about to subscribe\n            subscriptionStopped = true;\n            setTimeout(function () {\n                subscription.unsubscribe();\n            });\n        };\n    }, [observable]), function () {\n        return observable && !skip && !ignoreResults ?\n            observable.__.result\n            : fallbackResult;\n    }, function () { return fallbackResult; });\n    var restart = React.useCallback(function () {\n        invariant(!optionsRef.current.skip, 57);\n        setObservable(recreateRef.current());\n    }, [optionsRef, recreateRef]);\n    return React.useMemo(function () { return (__assign(__assign({}, ret), { restart: restart })); }, [ret, restart]);\n}\nfunction createSubscription(client, query, variables, fetchPolicy, errorPolicy, context, extensions) {\n    var options = {\n        query: query,\n        variables: variables,\n        fetchPolicy: fetchPolicy,\n        errorPolicy: errorPolicy,\n        context: context,\n        extensions: extensions,\n    };\n    var __ = __assign(__assign({}, options), { client: client, result: {\n            loading: true,\n            data: void 0,\n            error: void 0,\n            variables: variables,\n        }, setResult: function (result) {\n            __.result = result;\n        } });\n    var observable = null;\n    return Object.assign(new Observable(function (observer) {\n        // lazily start the subscription when the first observer subscribes\n        // to get around strict mode\n        if (!observable) {\n            observable = client.subscribe(options);\n        }\n        var sub = observable.subscribe(observer);\n        return function () { return sub.unsubscribe(); };\n    }), {\n        /**\n         * A tracking object to store details about the observable and the latest result of the subscription.\n         */\n        __: __,\n    });\n}\n//# sourceMappingURL=useSubscription.js.map"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}