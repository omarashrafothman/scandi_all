"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/slugify.ts
var slugify_exports = {};
__export(slugify_exports, {
  default: () => slugify
});
module.exports = __toCommonJS(slugify_exports);
var import_diacritics = require("diacritics");
function getSafeRegexpString(input) {
  return input.split("").map((char) => `\\${char}`).join("");
}
function format(input, delimiter, ignoreInvalid = false) {
  const harmonized = (0, import_diacritics.remove)(input).trim().toLowerCase();
  const safeDelimiter = getSafeRegexpString(delimiter);
  if (ignoreInvalid) {
    return harmonized.replace(/\s+/g, delimiter);
  }
  return harmonized.replace(new RegExp(`[^a-z0-9${safeDelimiter}]+`, "g"), delimiter).replace(new RegExp(`${safeDelimiter}+`, "g"), delimiter).replace(new RegExp(`^${safeDelimiter}`, "g"), "").replace(new RegExp(`${safeDelimiter}$`, "g"), "");
}
function slugify(node, options = { delimiter: "-", prefix: "" }) {
  if (!options.delimiter)
    options.delimiter = "-";
  if (!options.prefix)
    options.prefix = "";
  if (!node || typeof node === "boolean") {
    return "";
  }
  const { delimiter, prefix } = options;
  if (typeof node === "boolean") {
    return "";
  }
  if (typeof node === "string" || typeof node === "number") {
    const harmonizedPrefix = format(prefix, delimiter, true);
    const harmonizedNode = format(String(node), delimiter);
    if (harmonizedPrefix) {
      return `${harmonizedPrefix}${delimiter}${harmonizedNode}`;
    }
    return harmonizedNode;
  }
  if ("children" in node) {
    return slugify(node.children);
  }
  if ("type" in node)
    return slugify(node.props.children, options);
  if (Symbol.iterator in node) {
    return slugify(
      Array.from(node).map((subNode) => slugify(subNode, { delimiter })).join(delimiter),
      options
    );
  }
  return "";
}
//# sourceMappingURL=slugify.cjs.map